using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Threading;
using System.Windows.Forms;
using AIOInventorySystem.Data.Model;
using AIOInventorySystem.Data.Repository;
using AIOInventorySystem.Desk.Reports;
using Excel1 = Microsoft.Office.Interop.Excel;

namespace AIOInventorySystem.Desk.Forms
{
    public partial class frmCustomerBill : Form
    {
        DbClass db = new DbClass();
        public static SaveFileDialog saveFileDialog = new SaveFileDialog();
        public static frmCustomerBill custbillinfo;
        SettingRepository SettingRepoM = new SettingRepository();
        Setting SetDataM = new Setting();
        ProductInformation ProductDataGlobal = new ProductInformation();
        CommonMethod cm = new CommonMethod();
        ToolTip tooltipbtn = new ToolTip();
        List<int> billList = new List<int>(), DCNoList, did, deleteid = new List<int>();

        public static int maxProductCode;
        public static decimal setvat1 = 0, setvat2 = 0, BarcodePrice;

        public decimal totalamt = 0, OrderNo, vat5amt, vat12amt, totalqty = 0, tpuramt = 0, remamt = 0, Pamt = 0, QuotationNo, rdoff = 1, GlbProdtRemQty = 0,
            savedQuantity = 0, tempPaidamt, qtySlab = 0, SizeQty = 0, NewSizeQty = 0, bonusInRs = 0, bonusInPer = 0, pSgstamt = 0, pCgstamt = 0, pIgstamt = 0,
            pSgstpercent = 0, pCgstpercent = 0, pIgstpercent = 0, pQuantity = 0, pRate = 0, pDisc = 0, pdiscamt = 0, ptotalamt = 0, pbasicrate = 0;
        public int delay = 0, isdirect = 0, BillMasterID = 0, QuotationId, colIndex = -1, DCId, flag = 0, billtype, codeflag = 0, chkSumQty, productentrytype = 0, qdid = 0,
            intcell = 0, RateSlabId = 0, productCount = 0, copyCount = 0, CopyInput = 0, FormulaConstCount = 0, DynamicDtlSlabId = 0, formulaCount = 0, StateId = 0;// FormulaConstCount this taken to get count of values which are applied slab
        public string custbillno, billid, fakebillno, creditstatus = "0", CustomerType, ProductCategory, taxinclude, subtitlestring, SizeSpecString = "",
            Glbproname = "", Glbcompany = "", Glbunit = "", currentdate = Convert.ToString(DateTime.Now.ToString("M/d/yyyy")), HasMandatoryCodeSr = "Y",
            updatebarcode, barcodestatus, barcode, CopyString = "", input_Copies = "", FlagData = "", input = "", RateDecrease = "", RateIncrease = "";
        public string[] pono = new string[3];
        public bool StaticBarcode = false, flgdiscountchange = false, PrefixToBind = false, emptyUserSeries = false, showPrintPreview = false,
            printUnderComposition = false, getFormula = false, ApplyRateSlab = false, userDefinedSeries = false, ShowBonus = true, barcodeMinus = false,
            QtySubtitle = false;

        private static string calledlisttype = "", getSlabUnit = "", staticbarStatus = "", bonusStatus, typeofLedger = "", psize = "", pcolor = "", colorname = "", deptname = "", category = "";
        private decimal[] arrSlab = new decimal[20];
        private static char slabGroup;
        Thread delayedCalculationThread;

        #region Methods
        public frmCustomerBill()
        {
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            fillcombo();
            customerdata();
            fillbankname();
            fillStaffname(); fillSiteName();
            fillgst();
            fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                lblSeries.Enabled = true;
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
            }
            else
            {
                lblSeries.Enabled = false;
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
            }
            btnUpdate.Enabled = false;
            btnDelete.Enabled = false;
            deleteid.Clear();
            this.ActiveControl = txtBillReceiptNo;
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(int type, string a)
        {
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                lblSeries.Enabled = true;
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
            }
            else
            {
                lblSeries.Enabled = false;
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
            }
            btnUpdate.Enabled = false;
            btnDelete.Enabled = false;
            deleteid.Clear();
            this.ActiveControl = tblltMaster;
            this.ActiveControl = dtpbilldate;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(int type, string a, List<int> DCData)
        {
            did = DCData;
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                lblSeries.Enabled = true;
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
            }
            else
            {
                lblSeries.Enabled = false;
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
            }
            btnUpdate.Enabled = false; btnDelete.Enabled = false;
            listDelieverychallandata(DCData);
            deleteid.Clear();
            this.ActiveControl = txtBillReceiptNo;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(int type, string a, int DCno)
        {
            DCId = Convert.ToInt32(DCno);
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                lblSeries.Enabled = true;
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
            }
            else
            {
                lblSeries.Enabled = false;
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
            }
            deleteid.Clear();
            DeliveryChallanData(DCno);
            this.ActiveControl = txtBillReceiptNo;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(double orderno, int type)
        {
            OrderNo = Convert.ToInt32(orderno);
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            deleteid.Clear();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
                lblSeries.Enabled = true;
            }
            else
            {
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
                lblSeries.Enabled = false;
            }
            OrderBookingData(orderno);
            this.ActiveControl = txtBillReceiptNo;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(int type, string a, decimal QNo, string qyear)
        {
            QuotationNo = QNo;
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
                lblSeries.Enabled = true;
            }
            else
            {
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
                lblSeries.Enabled = false;
            }
            deleteid.Clear();
            QuotationData(QNo, qyear);
            this.ActiveControl = txtBillReceiptNo;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(int type, string a, string billno)
        {
            custbillno = billno;
            fakebillno = billno;
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            billtype = type;
            maxbillidtype(type);
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst(); fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
                lblSeries.Enabled = true;
            }
            else
            {
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
                lblSeries.Enabled = false;
            }
            deleteid.Clear();
            faketoOriginal(custbillno);
            this.ActiveControl = txtBillReceiptNo;
            if (billtype == 2 || SetDataM.CompositionScheme == "True")
            {
                cmbsgst.Enabled = false;
                txtVat.Enabled = false;
                cmbcgst.Enabled = false;
                cmbigst.Enabled = false;
                txtpCess.Enabled = false;
            }
            pnlOtherDetails.Visible = false;
        }

        public frmCustomerBill(string billno, string calltype = "")
        {
            calledlisttype = calltype;
            custbillno = billno;
            InitializeComponent();
            cm.changedatetimepickerrange(this);
            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
            if (SetDataM != null)
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                    setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                }
                if (SetDataM.ShowTenderCash == "Y")
                {
                    label75.Visible = true;
                    label76.Visible = true;
                    txtTendercash.Visible = true;
                    txtreturncash.Visible = true;
                }
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    userDefinedSeries = true;
                else
                    userDefinedSeries = false;
                typeofLedger = SetDataM.SeparationLedger;
            }
            dtppaymentdate.MaxDate = CommonMethod.enddate.AddYears(1);
            btnsave.Enabled = false;
            btnUpdate.Enabled = true;
            fillcombo();
            customerdata();
            fillbankname(); fillStaffname(); fillSiteName();
            fillgst();
            fillState();
            fillgroupmaster();
            if (userDefinedSeries == true)
            {
                fillInvoiceSeries();
                cmbInvoiceSeries.Enabled = true;
                txtSeriesNext.Enabled = true;
                lblSeries.Enabled = true;
            }
            else
            {
                cmbInvoiceSeries.Enabled = false;
                txtSeriesNext.Enabled = false;
                lblSeries.Enabled = false;
            }
            deleteid.Clear();
            billdata(billno);
            this.ActiveControl = txtProductname;
            pnlOtherDetails.Visible = false;
        }

        public void OrderBookingData(double id)
        {
            try
            {
                pDisc = 0;
                pSgstamt = 0;
                pSgstpercent = 0;
                pCgstamt = 0;
                pCgstpercent = 0;
                pIgstpercent = 0;
                pIgstamt = 0;

                OrderbookingRepository orderbookrepo = new OrderbookingRepository();
                var custmasterData = orderbookrepo.GetAll().Where(t => t.Id == Convert.ToInt32(OrderNo) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                cmbcustomername.Text = custmasterData.Customername;
                var billDetailData = custmasterData.OrderBookdetails;
                GvProductInfo.Rows.Clear();
                int i = 0;
                totalqty = 0;
                foreach (var item in billDetailData)
                {
                    GvProductInfo.Rows.Add();
                    GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                    GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.Productname;
                    GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                    GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                    if (item.SaleUnit != null)
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                    else
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                    ProductRepository productrepo = new ProductRepository();
                    var productdata = productrepo.GetAll().Where(t => t.ProductName == item.Productname && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();

                    if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                    else
                    {
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDouble(item.Quantity);
                        pQuantity = Convert.ToDecimal(item.Quantity);
                        if (CustomerType == "Retailer" || CustomerType == null)
                            pRate = Convert.ToDecimal(productdata.Rate);
                        else
                        {
                            if (productdata.DealerRate != null)
                                pRate = Convert.ToDecimal(productdata.DealerRate);
                            else
                                pRate = Convert.ToDecimal(productdata.Rate);
                        }
                    }
                    pSgstpercent = Convert.ToDecimal(productdata.SGstPercent);
                    pIgstpercent = Convert.ToDecimal(productdata.IGstPercent);
                    pCgstpercent = Convert.ToDecimal(productdata.CGstPercent);
                    GvProductInfo.Rows[i].Cells["HSNCode"].Value = productdata.HSNCode;
                    if (productdata.TaxInclusive == "True")
                        taxinclude = "True";
                    else
                        taxinclude = "False";
                    GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                    getGstCalculation(true);
                    GvProductInfo.Rows[i].Cells["Rate"].Value = pbasicrate;
                    decimal amount = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) * pRate;
                    GvProductInfo.Rows[i].Cells["Amount"].Value = amount;
                    GvProductInfo.Rows[i].Cells["Disc"].Value = "0";
                    GvProductInfo.Rows[i].Cells["SpDisc"].Value = "0";
                    GvProductInfo.Rows[i].Cells["SGST"].Value = pSgstpercent;
                    GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = pSgstamt;
                    GvProductInfo.Rows[i].Cells["CGST"].Value = pCgstpercent;
                    GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = pCgstamt;
                    GvProductInfo.Rows[i].Cells["IGST"].Value = pIgstpercent;
                    GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = pIgstamt;
                    GvProductInfo.Rows[i].Cells["Cess"].Value = Convert.ToDecimal(productdata.Cess);
                    GvProductInfo.Rows[i].Cells["TotalAmount"].Value = Convert.ToString(Math.Round(ptotalamt, 2, MidpointRounding.AwayFromZero));
                    GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                    GvProductInfo.Rows[i].Cells["SaleRate"].Value = pRate;
                    GvProductInfo.Rows[i].Cells["CessAmt"].Value = lblpCessamt.Text; ;
                    GvProductInfo.Rows[i].Cells["Barcodeg"].Value = "";
                    i++;
                    productrepo.Dispose();
                }
                totalamt = 0; totalqty = 0;
                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                txttrchrg.Text = "0";
                txthmchrg.Text = "0";
                txtTendercash.Text = "0";
                txtreturncash.Text = "0";
                txtNetAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                txtPaidAmt.Text = "0";
                txtRemainingAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                btnUpdate.Enabled = false;
                btnDelete.Enabled = false;
                btnsave.Enabled = true;
                orderbookrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void listDelieverychallandata(List<int> ListData)
        {
            try
            {
                DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                DCNoList = ListData;
                int k = 0, i = 0;
                totalqty = 0;
                GvProductInfo.Rows.Clear();
                for (int j = 0; j < DCNoList.Count; j++)
                {
                    var dcmasterdata = DCRepo.GetAll().Where(t => t.Id == Convert.ToInt32(DCNoList[k]) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    cmbcustomername.Text = dcmasterdata.CustomerName;
                    DeliveryChallanDetailRepository DCDetailRepo = new DeliveryChallanDetailRepository();
                    var dcDetailData = DCDetailRepo.GetAll().Where(t => t.DeliveryChallanNo == Convert.ToInt32(DCNoList[k]) && t.DeliveryChallanMaster.TransactionYear == CommonMethod.TransactionYear && t.DeliveryChallanMaster.CompId == CommonMethod.CompId);
                    foreach (var item in dcDetailData)
                    {
                        GvProductInfo.Rows.Add();
                        GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                        GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductName;
                        GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                        GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                        if (item.SaleUnit != null)
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                        else
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                        decimal rate;
                        ProductRepository productrepo = new ProductRepository();
                        var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductName && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();

                        if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        {
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                            rate = Convert.ToDecimal(productdata.AlternateUnitRate);
                        }
                        else
                        {
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDouble(item.Quantity);
                            if (CustomerType == "Retailer" || CustomerType == null)
                                rate = Convert.ToDecimal(productdata.Rate);
                            else
                            {
                                if (productdata.DealerRate != null)
                                    rate = Convert.ToDecimal(productdata.DealerRate);
                                else
                                    rate = Convert.ToDecimal(productdata.Rate);
                            }
                        }
                        GvProductInfo.Rows[i].Cells["HSNCode"].Value = productdata.HSNCode;
                        GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                        GvProductInfo.Rows[i].Cells["Rate"].Value = rate;
                        decimal amount = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) * rate;
                        GvProductInfo.Rows[i].Cells["Amount"].Value = amount;
                        GvProductInfo.Rows[i].Cells["Disc"].Value = "0";
                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = "0";
                        GvProductInfo.Rows[i].Cells["SGST"].Value = "0";
                        GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = "0";
                        GvProductInfo.Rows[i].Cells["CGST"].Value = "0";
                        GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = "0";
                        GvProductInfo.Rows[i].Cells["IGST"].Value = "0";
                        GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = "0";
                        GvProductInfo.Rows[i].Cells["Cess"].Value = "0";
                        GvProductInfo.Rows[i].Cells["TotalAmount"].Value = amount;
                        GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                        GvProductInfo.Rows[i].Cells["SaleRate"].Value = rate;
                        GvProductInfo.Rows[i].Cells["CessAmt"].Value = lblpCessamt.Text;
                        GvProductInfo.Rows[i].Cells["Barcodeg"].Value = "";
                        i++;
                        productrepo.Dispose();
                    }
                    totalamt = 0; totalqty = 0;
                    totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                    totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                    lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                    txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                    txtNetAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                    txttrchrg.Text = "0";
                    txthmchrg.Text = "0";
                    txtTendercash.Text = "0";
                    txtreturncash.Text = "0";
                    btnUpdate.Enabled = false;
                    btnsave.Enabled = true;
                    btnDelete.Enabled = false;
                    k++;
                    DCDetailRepo.Dispose();
                }
                DCRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void DeliveryChallanData(int id)
        {
            try
            {
                decimal totalSGst = 0, totalCGst = 0, totalIGst = 0;
                tpuramt = 0;
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                var dcData = DCRepo.GetAll().Where(t => t.Id == Convert.ToInt32(id) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (dcData != null)
                {
                    cmbcustomername.Text = dcData.CustomerName;
                    lbldcno.Text = Convert.ToString(dcData.DeliveryChallanNo);
                    lbldcdate.Text = Convert.ToString(dcData.DeliveryChallanDate.Value.Date);
                    txtVehicleNo.Text = Convert.ToString(dcData.VehicalNo);
                }
                var checkdata = Custmasterrepo.GetAll().Where(t => t.DcNo == Convert.ToInt32(lbldcno.Text) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (checkdata != null)
                {
                    int billno = Convert.ToInt32(checkdata.BillNo);
                    CustomerBillMasterRepository Custmasterrepo1 = new CustomerBillMasterRepository();
                    var custmasterData = Custmasterrepo1.GetAll().Where(t => t.BillNo == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();

                    txtbillno.Text = Convert.ToString(custmasterData.BillNo);
                    if (custmasterData.BillRcptNo != null)
                        txtBillReceiptNo.Text = custmasterData.BillRcptNo.ToString();
                    dtpbilldate.Value = custmasterData.Billdate.Value.Date;
                    cmbcustomername.Text = custmasterData.CustomerName;
                    txtNarration.Text = custmasterData.Narration;
                    creditstatus = Convert.ToString(custmasterData.YN);
                    txtTotalAmt.Text = Convert.ToString(custmasterData.TotalAmount);
                    txtDiscount.Text = Convert.ToString(custmasterData.Discount);
                    txtNetAmt.Text = Convert.ToString(custmasterData.NetAmount);
                    txtPaidAmt.Text = Convert.ToString(custmasterData.PaidAmount);
                    txtVat.Text = Convert.ToString(custmasterData.Vat);
                    txtRemainingAmt.Text = Convert.ToString(custmasterData.RemainingAmount);
                    txttrchrg.Text = Convert.ToString(custmasterData.TransportCharges);
                    txthmchrg.Text = Convert.ToString(custmasterData.HamaliCharges);
                    BillMasterID = custmasterData.Id;
                    var billDetailData = custmasterData.CustomerBillDetails;
                    GvProductInfo.Rows.Clear();
                    int i = 0;
                    totalqty = 0;
                    foreach (var item in billDetailData)
                    {
                        GvProductInfo.Rows.Add();
                        GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                        GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductId;
                        GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                        GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                        if (item.SaleUnit != null)
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                        else
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                        if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        {
                            ProductRepository productrepo = new ProductRepository();
                            var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                            decimal qty;
                            qty = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = qty;
                            if (productdata.TaxInclusive == "True")
                                taxinclude = "True";
                            else
                                taxinclude = "False";
                        }
                        else
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity);
                        GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                        GvProductInfo.Rows[i].Cells["Rate"].Value = item.Rate;
                        GvProductInfo.Rows[i].Cells["Amount"].Value = item.Amount;
                        GvProductInfo.Rows[i].Cells["Disc"].Value = item.Discount;
                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = item.SpcDisc;
                        GvProductInfo.Rows[i].Cells["SGST"].Value = item.SGstPercent;
                        GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = item.SGstAmt;
                        GvProductInfo.Rows[i].Cells["CGST"].Value = item.CGstPercent;
                        GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = item.CGstAmt;
                        GvProductInfo.Rows[i].Cells["IGST"].Value = item.IGstPercent;
                        GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = item.IGstAmt;
                        GvProductInfo.Rows[i].Cells["Cess"].Value = item.Cess;
                        GvProductInfo.Rows[i].Cells["TotalAmount"].Value = item.TotalAmount;
                        GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                        GvProductInfo.Rows[i].Cells["HSNCode"].Value = item.HSNCode;
                        GvProductInfo.Rows[i].Cells["SaleRate"].Value = item.SaleRate;
                        GvProductInfo.Rows[i].Cells["CessAmt"].Value = item.CessAmt;
                        GvProductInfo.Rows[i].Cells["Barcodeg"].Value = item.Barcode;

                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                            command.CommandType = CommandType.StoredProcedure;

                            command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = item.ProductId;
                            command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = item.CompanyName;
                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = item.Unit;
                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                            SqlDataReader reader = command.ExecuteReader();
                            DataTable dtRate = new DataTable();
                            dtRate.Load(reader);

                            decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                            decimal qty = Convert.ToDecimal(item.Quantity);
                            tpuramt = tpuramt + (avgprice * qty);

                            db.CloseConnection();
                            dtRate.Dispose();
                        }
                        catch (Exception)
                        { db.CloseConnection(); }
                        i++;
                    }
                    totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                    totalSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                    totalCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                    totalIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));
                    totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));

                    lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                    txttotSGst.Text = Convert.ToString(Math.Round(totalSGst, 0, MidpointRounding.AwayFromZero));
                    txttotCGst.Text = Convert.ToString(Math.Round(totalCGst, 0, MidpointRounding.AwayFromZero));
                    txttotIGst.Text = Convert.ToString(Math.Round(totalIGst, 0, MidpointRounding.AwayFromZero));
                    txtTotalAmt.Text = Convert.ToString(totalamt);

                    btnprint.Enabled = true;
                    btnsave.Enabled = false;
                    try
                    {
                        db.connect();
                        SqlCommand command = new SqlCommand("SPremainingpayment", db.Connection);
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                        command.Parameters.Add("@CompId", SqlDbType.NVarChar).Value = CommonMethod.CompId;
                        command.Parameters.Add("@Flag", SqlDbType.NVarChar).Value = "CustRem";
                        command.Parameters.Add("@CustomerID", SqlDbType.Int).Value = Convert.ToInt32(cmbcustomername.SelectedValue);

                        DataTable dt = new DataTable();
                        dt.Load(command.ExecuteReader());
                        db.CloseConnection();
                        label6.Text = Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        //label6.Text = Convert.ToString(dt.Rows[0]["OpeningAmount"]) + "+" + Convert.ToString(dt.Rows[0]["ReaminingAmount"]) + "=" + Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        dt.Dispose();
                    }
                    catch (Exception)
                    { db.CloseConnection(); }
                    btnUpdate.Enabled = true;
                    Custmasterrepo1.Dispose();
                }
                else
                {
                    pDisc = 0;
                    pSgstamt = 0;
                    pSgstpercent = 0;
                    pCgstamt = 0;
                    pCgstpercent = 0;
                    pIgstpercent = 0;
                    pIgstamt = 0;
                    decimal pcess = 0;
                    DeliveryChallanDetailRepository DCDetailRepo = new DeliveryChallanDetailRepository();
                    var dcDetailData = DCDetailRepo.GetAll().Where(t => t.DeliveryChallanNo == Convert.ToInt32(id) && t.DeliveryChallanMaster.TransactionYear == CommonMethod.TransactionYear && t.DeliveryChallanMaster.CompId == CommonMethod.CompId);
                    GvProductInfo.Rows.Clear();
                    int i = 0;
                    totalqty = 0;
                    foreach (var item in dcDetailData)
                    {
                        GvProductInfo.Rows.Add();
                        GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                        GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductName;
                        GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                        GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                        if (item.SaleUnit != null)
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                        else
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                        decimal rate;
                        ProductRepository productrepo = new ProductRepository();
                        var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductName && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();

                        if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        {
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                            rate = Convert.ToDecimal(productdata.AlternateUnitRate);
                        }
                        else
                        {
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDouble(item.Quantity);
                            if (productdata != null)
                            {
                                if (CustomerType == "Retailer" || CustomerType == null)
                                    rate = Convert.ToDecimal(productdata.Rate);
                                else
                                {
                                    if (productdata.DealerRate != null)
                                        rate = Convert.ToDecimal(productdata.DealerRate);
                                    else
                                        rate = Convert.ToDecimal(productdata.Rate);
                                }
                                pRate = rate;
                            }
                            productrepo.Dispose();
                        }
                        pSgstpercent = Convert.ToDecimal(productdata.SGstPercent);
                        pCgstpercent = Convert.ToDecimal(productdata.CGstPercent);
                        pIgstpercent = Convert.ToDecimal(productdata.IGstPercent);
                        pDisc = Convert.ToDecimal(productdata.ProductDiscount);
                        pcess = Convert.ToDecimal(productdata.Cess);
                        if (productdata.TaxInclusive == "True")
                            taxinclude = "True";
                        else
                            taxinclude = "False";
                        productrepo.Dispose();
                        GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                        decimal amount = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) * pRate;
                        GvProductInfo.Rows[i].Cells["Amount"].Value = amount;
                        pQuantity = Convert.ToDecimal(item.Quantity);
                        getGstCalculation(true);
                        GvProductInfo.Rows[i].Cells["Rate"].Value = pbasicrate;
                        GvProductInfo.Rows[i].Cells["Disc"].Value = pDisc;
                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = "0"; ;
                        GvProductInfo.Rows[i].Cells["SGST"].Value = pSgstpercent;
                        GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = pSgstamt; ;
                        GvProductInfo.Rows[i].Cells["CGST"].Value = pCgstpercent;
                        GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = pCgstamt;
                        GvProductInfo.Rows[i].Cells["IGST"].Value = pIgstpercent;
                        GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = pIgstamt;
                        GvProductInfo.Rows[i].Cells["Cess"].Value = pcess;
                        GvProductInfo.Rows[i].Cells["TotalAmount"].Value = ptotalamt;
                        GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                        GvProductInfo.Rows[i].Cells["HSNCode"].Value = Convert.ToString(productdata.HSNCode);
                        GvProductInfo.Rows[i].Cells["SaleRate"].Value = pRate;
                        GvProductInfo.Rows[i].Cells["CessAmt"].Value = lblpCessamt.Text;
                        GvProductInfo.Rows[i].Cells["Barcodeg"].Value = "";
                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                            command.CommandType = CommandType.StoredProcedure;

                            command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = item.ProductName;
                            command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = item.CompanyName;
                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = item.Unit;
                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                            SqlDataReader reader = command.ExecuteReader();
                            DataTable dtRate = new DataTable();
                            dtRate.Load(reader);

                            decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                            decimal qty = Convert.ToDecimal(item.Quantity);
                            tpuramt = tpuramt + (avgprice * qty);
                            db.CloseConnection();
                            dtRate.Dispose();
                        }
                        catch (Exception)
                        { db.CloseConnection(); }
                        i++;
                    }
                    totalamt = 0; totalqty = 0;
                    totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                    totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                    lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                    lbltpuramt.Text = Convert.ToString(Math.Round(tpuramt, 2, MidpointRounding.AwayFromZero));
                    txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                    txttrchrg.Text = "0";
                    txthmchrg.Text = "0";
                    txtTendercash.Text = "0";
                    txtreturncash.Text = "0";
                    txtNetAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                    txtPaidAmt.Text = "0";
                    txtRemainingAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                    totalSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                    totalCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                    totalIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));
                    txttotSGst.Text = Convert.ToString(Math.Round(totalSGst, 0, MidpointRounding.AwayFromZero));
                    txttotCGst.Text = Convert.ToString(Math.Round(totalCGst, 0, MidpointRounding.AwayFromZero));
                    txttotIGst.Text = Convert.ToString(Math.Round(totalIGst, 0, MidpointRounding.AwayFromZero));
                    btnUpdate.Enabled = false;
                    btnDelete.Enabled = false;
                    btnsave.Enabled = true;
                    DCDetailRepo.Dispose();
                }
                Custmasterrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void faketoOriginal(string billno)
        {
            try
            {
                char a = billno.FirstOrDefault();
                if (a == 'T')
                    billtype = 1;
                else if (a == 'E')
                    billtype = 2;
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                var custmasterData = Custmasterrepo.GetAll().Where(t => t.BillNo == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                GoodDetailRepository SRDetailRepo = new GoodDetailRepository();
                List<GoodReturnDetail> SRDetailData = new List<GoodReturnDetail>();
                SRDetailData = SRDetailRepo.GetAll().Where(t => t.GoodReturnMaster.BillNo == Convert.ToString(txtbillno.Text) && t.GoodReturnMaster.TransactionYear == CommonMethod.TransactionYear && t.GoodReturnMaster.CompId == CommonMethod.CompId).ToList();
                if (SRDetailData.Count > 0)
                    btnreturn.Visible = true;
                else
                    btnreturn.Visible = false;
                if (custmasterData.BillRcptNo != null)
                    txtBillReceiptNo.Text = custmasterData.BillRcptNo.ToString();
                if (custmasterData.MannualDCNo != null)
                    txtmannualDCNo.Text = custmasterData.MannualDCNo.ToString();
                dtpbilldate.Value = custmasterData.Billdate.Value.Date;
                dtppaymentdate.Value = custmasterData.PaymentDate.Value.Date;
                cmbcustomername.Text = custmasterData.CustomerName;
                txtNarration.Text = custmasterData.Narration;
                creditstatus = Convert.ToString(custmasterData.YN);
                txtTotalAmt.Text = Convert.ToString(custmasterData.TotalAmount);
                txtDiscount.Text = Convert.ToString(custmasterData.Discount);
                txtVat.Text = Convert.ToString(Convert.ToInt32(custmasterData.Vat));
                txttrchrg.Text = Convert.ToString(custmasterData.TransportCharges);
                txthmchrg.Text = Convert.ToString(custmasterData.HamaliCharges);
                txtNetAmt.Text = Convert.ToString(custmasterData.NetAmount);
                txtPaidAmt.Text = Convert.ToString(custmasterData.PaidAmount);
                txtRemainingAmt.Text = Convert.ToString(custmasterData.RemainingAmount);
                lblqno.Text = Convert.ToString(custmasterData.QuotationNo);
                tempPaidamt = Convert.ToDecimal(custmasterData.PaidAmount);
                if (custmasterData.TenderCash == null)
                    txtTendercash.Text = "0";
                else
                    txtTendercash.Text = Convert.ToString(custmasterData.TenderCash);
                if (custmasterData.ReturnCash == null)
                    txtreturncash.Text = "0";
                else
                    txtreturncash.Text = Convert.ToString(custmasterData.ReturnCash);
                BillMasterID = custmasterData.Id;
                if (custmasterData.BillNo.StartsWith("F"))
                {
                    if (custmasterData.BillType == "Cash")
                        chkCash.Checked = true;
                    else if (custmasterData.BillType == "Credit")
                        chkCredit.Checked = true;
                }
                CustomerBillDetailRepository Custdetailrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> billDetailData = new List<CustomerBillDetail>();
                billDetailData = Custdetailrepo.GetAll().Where(t => t.BillNo == BillMasterID && t.Status != "Inactive" && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                billid = Convert.ToString(txtbillno.Text);
                GvProductInfo.Rows.Clear();
                int i = 0;
                totalqty = 0;
                foreach (var item in billDetailData)
                {
                    GvProductInfo.Rows.Add();
                    GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                    GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductId;
                    GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                    GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                    if (item.SaleUnit != null)
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                    else
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                    if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                    {
                        ProductRepository productrepo = new ProductRepository();
                        var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                        decimal qty;
                        qty = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = qty;
                    }
                    else
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity);
                    GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                    GvProductInfo.Rows[i].Cells["Rate"].Value = item.Rate;
                    GvProductInfo.Rows[i].Cells["Amount"].Value = item.Amount;
                    GvProductInfo.Rows[i].Cells["Disc"].Value = item.Discount;
                    GvProductInfo.Rows[i].Cells["SpDisc"].Value = item.SpcDisc;
                    GvProductInfo.Rows[i].Cells["SGST"].Value = item.SGstPercent;
                    GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = item.SGstAmt;
                    GvProductInfo.Rows[i].Cells["CGST"].Value = item.CGstPercent;
                    GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = item.CGstAmt;
                    GvProductInfo.Rows[i].Cells["IGST"].Value = item.IGstPercent;
                    GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = item.IGstAmt;
                    GvProductInfo.Rows[i].Cells["Cess"].Value = item.Cess;
                    GvProductInfo.Rows[i].Cells["TotalAmount"].Value = item.TotalAmount;
                    GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                    GvProductInfo.Rows[i].Cells["HSNCode"].Value = item.HSNCode;
                    GvProductInfo.Rows[i].Cells["SaleRate"].Value = item.SaleRate;
                    GvProductInfo.Rows[i].Cells["CessAmt"].Value = item.CessAmt;
                    GvProductInfo.Rows[i].Cells["Barcodeg"].Value = item.Barcode;
                    checkstock(item.ProductId, item.CompanyName, item.Unit, Convert.ToDecimal(item.Quantity));
                    i++;
                }
                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                btnprint.Enabled = true;
                try
                {
                    db.connect();
                    SqlCommand command = new SqlCommand("SPremainingpayment", db.Connection);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                    command.Parameters.Add("@CompId", SqlDbType.NVarChar).Value = CommonMethod.CompId;
                    command.Parameters.Add("@Flag", SqlDbType.NVarChar).Value = "CustRemWithFake";
                    command.Parameters.Add("@CustomerID", SqlDbType.Int).Value = Convert.ToInt32(cmbcustomername.SelectedValue);

                    DataTable dt = new DataTable();
                    dt.Load(command.ExecuteReader());
                    db.CloseConnection();

                    label6.Text = Convert.ToString(dt.Rows[0]["OpeningAmount"]) + "+" + Convert.ToString(dt.Rows[0]["ReaminingAmount"]) + "=" + Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                    dt.Dispose();
                }
                catch (Exception)
                { db.CloseConnection(); }
                RemainingPaymentRepository remainingpayrepo = new RemainingPaymentRepository();
                var remdata = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId && t.PaymentMode == "Cheque").FirstOrDefault();
                if (remdata != null)
                {
                    if (remdata.PaymentMode == "Cheque")
                    {
                        cmbbank.Enabled = true;
                        txtchequeno.Enabled = true;
                        dtpchequedate.Enabled = true;
                        txtbankname.Enabled = true;
                        label42.Enabled = true;
                        label43.Enabled = true;
                        label44.Enabled = true;
                        chkcheque.Checked = true;
                        label18.Enabled = true;
                        txtbankname.Text = remdata.Bankname;
                        txtchequeno.Text = remdata.Chequeno;
                        dtpchequedate.Value = remdata.CreateDate.Value.Date;
                    }
                    else
                    {
                        cmbbank.Enabled = false;
                        txtchequeno.Enabled = false;
                        dtpchequedate.Enabled = false;
                        txtbankname.Enabled = false;
                        label42.Enabled = false;
                        label43.Enabled = false;
                        label44.Enabled = false;
                        label18.Enabled = false;
                    }
                }
                btnUpdate.Enabled = false;
                SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (SetDataM.DeleteSaleBill == "True")
                    btnDelete.Enabled = true;
                else
                    btnDelete.Enabled = false;
                Custmasterrepo.Dispose(); Custdetailrepo.Dispose(); SRDetailRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void billdata(string billno)
        {
            decimal totalSGst = 0, totalCGst = 0, totalIGst = 0;
            try
            {
                custbillno = billno;
                vat5amt = 0; vat12amt = 0; tpuramt = 0;
                char a = billno.FirstOrDefault();
                if (a == 'T')
                    billtype = 1;
                else if (a == 'E')
                    billtype = 2;
                else if (a == 'F')
                {
                    chkCash.Visible = true;
                    chkCredit.Visible = true;
                    billtype = 3;
                }
                if (billtype == 2)
                {
                    cmbsgst.Enabled = false;
                    txtVat.Enabled = false;
                    cmbcgst.Enabled = false;
                    cmbigst.Enabled = false;
                    txtpCess.Enabled = false;
                }
                ShowBonus = false;
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                var custmasterData = Custmasterrepo.GetAll().Where(t => t.BillNo == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                txtbillno.Text = Convert.ToString(custmasterData.BillNo);
                GoodDetailRepository SRDetailRepo = new GoodDetailRepository();
                List<GoodReturnDetail> SRDetailData = new List<GoodReturnDetail>();
                SRDetailData = SRDetailRepo.GetAll().Where(t => t.GoodReturnMaster.BillNo == Convert.ToString(txtbillno.Text) && t.GoodReturnMaster.TransactionYear == CommonMethod.TransactionYear && t.GoodReturnMaster.CompId == CommonMethod.CompId).ToList();
                if (SRDetailData.Count > 0)
                    btnreturn.Visible = true;
                else
                    btnreturn.Visible = false;
                if (custmasterData.BillRcptNo != null)
                    txtBillReceiptNo.Text = custmasterData.BillRcptNo.ToString();
                if (custmasterData.MannualDCNo != null)
                    txtmannualDCNo.Text = custmasterData.MannualDCNo.ToString();
                dtpbilldate.Value = custmasterData.Billdate.Value.Date;
                BillMasterID = custmasterData.Id;
                cmbcustomername.Text = custmasterData.CustomerName;
                txtNarration.Text = custmasterData.Narration;
                creditstatus = Convert.ToString(custmasterData.YN);
                if (custmasterData.RoundOff != null)
                {
                    txtRoundOff.Text = Convert.ToString(custmasterData.RoundOff);
                    rdoff = 1;
                }
                else
                    rdoff = 0;
                txtTotalAmt.Text = Convert.ToString(custmasterData.TotalAmount);
                txtDiscount.Text = Convert.ToString(custmasterData.Discount);
                txtVat.Text = Convert.ToString(custmasterData.Vat);
                txttrchrg.Text = Convert.ToString(custmasterData.TransportCharges);
                txthmchrg.Text = Convert.ToString(custmasterData.HamaliCharges);
                txtVehicleNo.Text = custmasterData.VehicleNo;
                txtVehicletype.Text = custmasterData.VehicleType;
                dtpSupply.Text = Convert.ToString(custmasterData.SupplyDate);
                cmbState.Text = custmasterData.SupplyPlace;
                txtTransporter.Text = custmasterData.Transporter;
                lblqno.Text = Convert.ToString(custmasterData.QuotationNo);
                lbldcno.Text = Convert.ToString(custmasterData.DcNo);
                lbldcdate.Text = Convert.ToString(custmasterData.DcDate);
                dtppaymentdate.Value = custmasterData.PaymentDate.Value.Date;
                tempPaidamt = Convert.ToDecimal(custmasterData.PaidAmount);
                if (custmasterData.TenderCash == null)
                    txtTendercash.Text = "0";
                else
                    txtTendercash.Text = Convert.ToString(custmasterData.TenderCash);
                if (custmasterData.ReturnCash == null)
                    txtreturncash.Text = "0";
                else
                    txtreturncash.Text = Convert.ToString(custmasterData.ReturnCash);
                if (custmasterData.BillNo.StartsWith("F"))
                {
                    if (custmasterData.BillType == "Cash")
                        chkCash.Checked = true;
                    else if (custmasterData.BillType == "Credit")
                        chkCredit.Checked = true;
                }
                if (custmasterData.StaffId != null)
                    cmbStaffName.SelectedValue = custmasterData.StaffId;
                if (custmasterData.SiteId != null)
                    cmbSiteName.SelectedValue = custmasterData.SiteId;
                CustomerBillDetailRepository Custdetailrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> billDetailData = new List<CustomerBillDetail>();
                billDetailData = Custdetailrepo.GetAll().Where(t => t.BillNo == BillMasterID && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                billid = Convert.ToString(txtbillno.Text);
                CustomerRepository custrepo = new CustomerRepository();
                var custdata = custrepo.GetAll().Where(t => t.CustomerID == custmasterData.ShipCustomerId && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (custdata != null)
                {
                    cmbShipParty.Text = custdata.CustomerName;
                    cmbShipParty.SelectedValue = custdata.CustomerID;
                }
                if (custmasterData.CatId == null || custmasterData.CatId == 0)
                    fillgroupmaster();
                else
                {
                    cmbGroup.SelectedValue = custmasterData.CatId;
                    cmbGroup.Text = custmasterData.CategoryName;
                }
                txtSeriesNext.Text = custmasterData.UserSeries;
                if (!string.IsNullOrEmpty(Convert.ToString(custmasterData.UserSeries)))
                {
                    string strSeries = custmasterData.UserSeries;
                    string[] str_Series = strSeries.Split('/', '-');
                    if (str_Series.Length > 0)
                        cmbInvoiceSeries.Text = str_Series[0];
                }
                else
                {
                    cmbInvoiceSeries.Text = "";
                    emptyUserSeries = true;
                }
                GvProductInfo.Rows.Clear();
                int i = 0;
                totalqty = 0;
                foreach (var item in billDetailData)
                {
                    if (item.AssemblyChildStatus == "N" || item.AssemblyChildStatus == null || item.AssemblyChildStatus == "")
                    {
                        GvProductInfo.Rows.Add();
                        productCount++;
                        GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                        if (item.Prodsubtitle != "" && item.Prodsubtitle != null)
                        {
                            ProductRepository productrepo1 = new ProductRepository();
                            var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                            if (productdata1.Formulae == null || productdata1.Formulae == "")
                                GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.Prodsubtitle + "," + item.ProductId;
                            else
                            {
                                GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductId;
                                GvProductInfo.Rows[i].Cells["SubTitle"].Value = item.Prodsubtitle;
                            }
                            productrepo1.Dispose();
                        }
                        else
                            GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductId;
                        GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                        GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                        if (item.SaleUnit != null)
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                        else
                            GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                        ProductRepository productrepo = new ProductRepository();
                        ProductInformation productdata = new ProductInformation();
                        if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        {
                            if (CommonMethod.commProduct == true)
                                productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                            else
                                productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            decimal qty;
                            if (item.SaleUnit == productdata.AlternateUnit)
                            {
                                qty = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                                GvProductInfo.Rows[i].Cells["Quantityg"].Value = qty;
                            }
                            else if (item.SaleUnit == productdata.TripleUnit)
                            {
                                qty = Convert.ToDecimal(item.Quantity) / ((Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty)) * (Convert.ToDecimal(productdata.SecondUnitQty) / Convert.ToDecimal(productdata.TripleUnitQty)));
                                GvProductInfo.Rows[i].Cells["Quantityg"].Value = qty;
                            }
                        }
                        else
                            GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDouble(item.Quantity);
                        GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                        GvProductInfo.Rows[i].Cells["Rate"].Value = item.Rate;
                        GvProductInfo.Rows[i].Cells["Amount"].Value = item.Amount;
                        GvProductInfo.Rows[i].Cells["Disc"].Value = item.Discount;
                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = item.SpcDisc;
                        GvProductInfo.Rows[i].Cells["SGST"].Value = item.SGstPercent;
                        GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = item.SGstAmt;
                        GvProductInfo.Rows[i].Cells["CGST"].Value = item.CGstPercent;
                        GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = item.CGstAmt;
                        GvProductInfo.Rows[i].Cells["IGST"].Value = item.IGstPercent;
                        GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = item.IGstAmt;
                        GvProductInfo.Rows[i].Cells["Cess"].Value = item.Cess;
                        GvProductInfo.Rows[i].Cells["TotalAmount"].Value = item.TotalAmount;
                        GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                        GvProductInfo.Rows[i].Cells["HSNCode"].Value = item.HSNCode;
                        if (item.SaleRate == null)
                            GvProductInfo.Rows[i].Cells["SaleRate"].Value = item.Rate;
                        else
                            GvProductInfo.Rows[i].Cells["SaleRate"].Value = item.SaleRate;
                        GvProductInfo.Rows[i].Cells["CessAmt"].Value = item.CessAmt;
                        GvProductInfo.Rows[i].Cells["Barcodeg"].Value = item.Barcode;
                        if (!string.IsNullOrEmpty(Convert.ToString(item.BatchNo)))
                            GvProductInfo.Rows[i].Cells["BatchNo"].Value = item.BatchNo;
                        GvProductInfo.Rows[i].Cells["ExpiryDate"].Value = item.Expiry;
                        if (item.TotalQuantitySubtitle != null)
                            GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = item.TotalQuantitySubtitle;
                        else
                            GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = "0";
                        ManufacturingUnitInfoRepository manufatRepo = new ManufacturingUnitInfoRepository();
                        var mfdata = manufatRepo.GetAll().Where(t => t.BillDetailId == item.Id).FirstOrDefault();
                        if (mfdata != null)
                        {
                            GvProductInfo.Rows[i].Cells["SizeSpec"].Value = mfdata.Size;
                            GvProductInfo.Rows[i].Cells["SizeQtyg"].Value = mfdata.BillQty;
                            SizeQty = Convert.ToDecimal(mfdata.BillQty);
                        }
                        else
                        {
                            GvProductInfo.Rows[i].Cells["SizeSpec"].Value = "";
                            GvProductInfo.Rows[i].Cells["SizeQtyg"].Value = "";
                        }
                        GvProductInfo.Rows[i].Cells["Sizec"].Value = item.Size;
                        GvProductInfo.Rows[i].Cells["Department"].Value = item.DeptName;
                        GvProductInfo.Rows[i].Cells["ColorNm"].Value = item.ColorName;
                        GvProductInfo.Rows[i].Cells["Categoryg"].Value = item.Category;
                        GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value = item.barcodePrice;

                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                            command.CommandType = CommandType.StoredProcedure;

                            command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = item.ProductId;
                            command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = item.CompanyName;
                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = item.Unit;
                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                            command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                            SqlDataReader reader = command.ExecuteReader();
                            DataTable dtRate = new DataTable();
                            dtRate.Load(reader);
                            decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                            decimal qty = Convert.ToDecimal(item.Quantity);
                            tpuramt = tpuramt + (avgprice * qty);
                            db.CloseConnection();
                            dtRate.Dispose();
                        }
                        catch (Exception)
                        { db.CloseConnection(); }
                        i++;
                    }
                }
                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                totalSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                totalCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                totalIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));

                lbltpuramt.Text = Convert.ToString(Math.Round(tpuramt, 2, MidpointRounding.AwayFromZero));
                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                txttotSGst.Text = Convert.ToString(Math.Round(totalSGst, 0, MidpointRounding.AwayFromZero));
                txttotCGst.Text = Convert.ToString(Math.Round(totalCGst, 0, MidpointRounding.AwayFromZero));
                txttotIGst.Text = Convert.ToString(Math.Round(totalIGst, 0, MidpointRounding.AwayFromZero));

                txtNetAmt.Text = Convert.ToString(custmasterData.NetAmount);
                txtPaidAmt.Text = Convert.ToString(custmasterData.PaidAmount);
                txtRemainingAmt.Text = Convert.ToString(custmasterData.RemainingAmount);
                btnprint.Enabled = true;
                btnsave.Enabled = false;
                try
                {
                    db.connect();
                    SqlCommand command = new SqlCommand("SPremainingpayment", db.Connection);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                    command.Parameters.Add("@CompId", SqlDbType.NVarChar).Value = CommonMethod.CompId;
                    command.Parameters.Add("@Flag", SqlDbType.NVarChar).Value = "CustRem";
                    command.Parameters.Add("@CustomerID", SqlDbType.Int).Value = Convert.ToInt32(cmbcustomername.SelectedValue);

                    DataTable dt = new DataTable();
                    dt.Load(command.ExecuteReader());
                    db.CloseConnection();
                    label6.Text = Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                    //label6.Text = Convert.ToString(dt.Rows[0]["OpeningAmount"]) + "+" + Convert.ToString(dt.Rows[0]["ReaminingAmount"]) + "=" + Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                    dt.Dispose();
                }
                catch (Exception)
                { db.CloseConnection(); }
                btnUpdate.Enabled = true;
                if (a == 'F')
                {
                    if (custmasterData.BillStatus == 1)
                        btnUpdate.Enabled = false;
                }
                this.ActiveControl = txtProductname;
                if (txtbillno.Text.StartsWith("F"))
                {
                    FakeRemainingPaymentRepository fremainingpayrepo = new FakeRemainingPaymentRepository();
                    var remdata = fremainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId && t.PaymentMode == "Cheque").FirstOrDefault();
                    if (remdata != null)
                    {
                        if (remdata.PaymentMode == "Cheque")
                        {
                            BankStatementRepository BankStRepo = new BankStatementRepository();
                            var bdata = BankStRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == remdata.CreateDate.Value.ToShortDateString() && t.ChequeNo == remdata.Chequeno && t.Withdrawals == Convert.ToDecimal(remdata.PaidAmt)).FirstOrDefault();
                            txtchequeno.Enabled = true;
                            dtpchequedate.Enabled = true;
                            label42.Enabled = true;
                            label43.Enabled = true;
                            label44.Enabled = true;
                            chkcheque.Checked = true;
                            label18.Enabled = true;
                            txtbankname.Text = remdata.Bankname;
                            txtchequeno.Text = remdata.Chequeno;
                            cmbbank.Text = bdata.Bankname;
                            dtpchequedate.Value = remdata.CreateDate.Value.Date;
                            chkcheque.Enabled = false;
                            cmbbank.Enabled = false;
                            txtbankname.Enabled = false;
                        }
                        else
                        {
                            txtbankname.Enabled = false;
                            cmbbank.Enabled = false;
                            txtchequeno.Enabled = false;
                            dtpchequedate.Enabled = false;
                            label42.Enabled = false;
                            label43.Enabled = false;
                            label44.Enabled = false;
                            label18.Enabled = false;
                        }
                    }
                }
                else
                {
                    RemainingPaymentRepository remainingpayrepo11 = new RemainingPaymentRepository();
                    var remdata = remainingpayrepo11.GetAll().Where(t => t.BillId == Convert.ToString(billno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    if (remdata != null)
                    {
                        if (remdata.PaymentMode == "Cheque")
                        {
                            BankStatementRepository BankStRepo = new BankStatementRepository();
                            var bdata = BankStRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == remdata.CreateDate.Value.ToShortDateString() && t.ChequeNo == remdata.Chequeno && t.Deposits == Convert.ToDecimal(remdata.PaidAmt)).FirstOrDefault();
                            txtchequeno.Enabled = true;
                            dtpchequedate.Enabled = true;
                            label42.Enabled = true;
                            label43.Enabled = true;
                            label44.Enabled = true;
                            chkcheque.Checked = true;
                            label18.Enabled = true;
                            txtbankname.Text = remdata.Bankname;
                            txtchequeno.Text = remdata.Chequeno;
                            dtpchequedate.Value = remdata.CreateDate.Value.Date;
                            chkcheque.Enabled = false;
                            cmbbank.Enabled = false;
                            txtbankname.Enabled = false;
                            cmbbank.Text = bdata.Bankname;
                        }
                        else if (remdata.PaymentMode == "By Swipe")
                        {
                            BankStatementRepository BankStRepo = new BankStatementRepository();
                            var bdata = BankStRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == remdata.CreateDate.Value.ToShortDateString() && t.Deposits == Convert.ToDecimal(remdata.PaidAmt)).FirstOrDefault();
                            chkBySwipe.Checked = true;
                            label18.Enabled = true;
                            label42.Enabled = true;
                            cmbbank.Enabled = true;
                            txtbankname.Enabled = true;
                            txtbankname.Text = remdata.Bankname;
                            cmbbank.Text = bdata.Bankname;
                            chkBySwipe.Enabled = false;
                            cmbbank.Enabled = false;
                            txtbankname.Enabled = false;
                        }
                        else
                        {
                            txtbankname.Enabled = false;
                            cmbbank.Enabled = false;
                            txtchequeno.Enabled = false;
                            dtpchequedate.Enabled = false;
                            label42.Enabled = false;
                            label43.Enabled = false;
                            label44.Enabled = false;
                            label18.Enabled = false;
                        }
                    }
                }
                SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (SetDataM.DeleteSaleBill == "True")
                    btnDelete.Enabled = true;
                else
                    btnDelete.Enabled = false;
                if (SetDataM.CompositionScheme == "True")
                {
                    cmbsgst.Enabled = false;
                    txtVat.Enabled = false;
                    cmbcgst.Enabled = false;
                    cmbigst.Enabled = false;
                    txtpCess.Enabled = false;
                }
                lblProductcount.Text = productCount.ToString();
                Custmasterrepo.Dispose(); Custdetailrepo.Dispose(); SRDetailRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void QuotationData(decimal QNo, string qyear)
        {
            decimal totSGst = 0, totCGst = 0, totIGst = 0;
            try
            {
                vat5amt = 0; vat12amt = 0; tpuramt = 0;
                QuotationMasterRepository qmasterrepo = new QuotationMasterRepository();
                var custmasterData = qmasterrepo.GetAll().Where(t => t.QuotationNo == Convert.ToInt32(QuotationNo) && t.TransactionYear == qyear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                lblqno.Text = Convert.ToString(custmasterData.QuotationNo);
                cmbcustomername.Text = custmasterData.CustomerName;
                txtTotalAmt.Text = Convert.ToString(custmasterData.TotalAmount);
                txtDiscount.Text = Convert.ToString(custmasterData.Discount);
                txtVat.Text = Convert.ToString(custmasterData.Vat);
                txttrchrg.Text = Convert.ToString(custmasterData.TransportCharges);
                txthmchrg.Text = Convert.ToString(custmasterData.HamaliCharges);
                txtNetAmt.Text = Convert.ToString(custmasterData.NetAmount);
                txtPaidAmt.Text = "0";
                txtRemainingAmt.Text = Convert.ToString(custmasterData.NetAmount);
                QuotationId = custmasterData.Id;
                var billDetailData = custmasterData.QuotationDetails;
                GvProductInfo.Rows.Clear();
                int i = 0;
                totalqty = 0;
                foreach (var item in billDetailData)
                {
                    GvProductInfo.Rows.Add();
                    GvProductInfo.Rows[i].Cells["Id"].Value = item.Id;
                    GvProductInfo.Rows[i].Cells["ProductNameg"].Value = item.ProductId;
                    GvProductInfo.Rows[i].Cells["Company"].Value = item.CompanyName;
                    GvProductInfo.Rows[i].Cells["Unit"].Value = item.Unit;
                    if (item.SaleUnit != null)
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.SaleUnit;
                    else
                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = item.Unit;
                    if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                    {
                        ProductRepository productrepo = new ProductRepository();
                        var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                    }
                    else
                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = Convert.ToDouble(item.Quantity);
                    GvProductInfo.Rows[i].Cells["Code"].Value = item.Code;
                    GvProductInfo.Rows[i].Cells["Rate"].Value = item.Rate;
                    GvProductInfo.Rows[i].Cells["Amount"].Value = item.Amount;
                    GvProductInfo.Rows[i].Cells["Disc"].Value = item.Discount;
                    GvProductInfo.Rows[i].Cells["SpDisc"].Value = "0";
                    GvProductInfo.Rows[i].Cells["SGST"].Value = item.SGstPercent;
                    GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = item.SGstAmt;
                    GvProductInfo.Rows[i].Cells["CGST"].Value = item.CGstPercent;
                    GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = item.CGstAmt;
                    GvProductInfo.Rows[i].Cells["IGST"].Value = item.IGstPercent;
                    GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = item.IGstAmt;
                    GvProductInfo.Rows[i].Cells["Cess"].Value = "0";
                    GvProductInfo.Rows[i].Cells["TotalAmount"].Value = item.TotalAmount;
                    GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                    GvProductInfo.Rows[i].Cells["HSNCode"].Value = item.HSNCode;
                    GvProductInfo.Rows[i].Cells["SaleRate"].Value = item.Rate;
                    GvProductInfo.Rows[i].Cells["CessAmt"].Value = "0";
                    GvProductInfo.Rows[i].Cells["Barcodeg"].Value = "";
                    decimal stockindication = checkstock1(item.ProductId, item.CompanyName, item.Unit, Convert.ToDecimal(item.Quantity));
                    if (Convert.ToDecimal(item.Vat) != 0)
                    {
                        ProductRepository productrepo1 = new ProductRepository();
                        var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                        if (productdata1 != null)
                        {
                            if (productdata1.TaxInclusive == "True")
                                taxinclude = "True";
                            else
                                taxinclude = "False";
                        }
                        productrepo1.Dispose();
                    }
                    try
                    {
                        db.connect();
                        SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = item.ProductId;
                        command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = item.CompanyName;
                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = item.Unit;
                        command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                        command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                        command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                        SqlDataReader reader = command.ExecuteReader();
                        DataTable dtRate = new DataTable();
                        dtRate.Load(reader);

                        decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                        decimal qty = Convert.ToDecimal(item.Quantity);
                        tpuramt = tpuramt + (avgprice * qty);

                        db.CloseConnection();
                        dtRate.Dispose();
                    }
                    catch (Exception)
                    { db.CloseConnection(); }
                    i++;
                }
                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                totSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                totCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                totIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));

                txttotSGst.Text = Convert.ToString(totSGst);
                txttotCGst.Text = Convert.ToString(totCGst);
                txttotIGst.Text = Convert.ToString(totIGst);

                lbltpuramt.Text = Convert.ToString(Math.Round(tpuramt, 2, MidpointRounding.AwayFromZero));
                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                if (vat5amt != 0)
                {
                    if (vat12amt != 0)
                    {
                        lbl2vatamt.Text = Convert.ToString(Math.Round(vat12amt, 2, MidpointRounding.AwayFromZero));
                        lbl2vat.Text = setvat2.ToString() + " %";
                    }
                    lblvat.Text = Convert.ToString(Math.Round(vat5amt, 2, MidpointRounding.AwayFromZero));
                    txtVat.Text = setvat1.ToString();
                    txtVat.Enabled = false;
                }
                else if (vat12amt != 0)
                {
                    lblvat.Text = Convert.ToString(Math.Round(vat12amt, 2, MidpointRounding.AwayFromZero));
                    txtVat.Text = setvat2.ToString();
                    txtVat.Enabled = false;
                }
                btnprint.Enabled = true;
                btnsave.Enabled = true;
                btnUpdate.Enabled = false;
                qmasterrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public decimal checkstock1(string Proname, string company, string unit, decimal qty)
        {
            decimal remq = 0;
            try
            {
                PurchaseDetailRepository PurDetailRepo = new PurchaseDetailRepository();
                PurchaseDetail PurDData = new PurchaseDetail();
                PurDData = PurDetailRepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                if (PurDData != null)
                {
                    try
                    {
                        string vat = "";
                        if (SetDataM.StockShowOnBill == "Y")
                        {
                            if (billtype == 1)
                                vat = "y";
                            else if (billtype == 2)
                                vat = "n";
                        }
                        else
                            vat = "a";
                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand("SPVatnWithoutVatStock", db.Connection);
                            command.CommandType = CommandType.StoredProcedure;

                            command.Parameters.Add("@PrePName", SqlDbType.VarChar).Value = Proname;
                            command.Parameters.Add("@PreCName", SqlDbType.VarChar).Value = company;
                            command.Parameters.Add("@PreUName", SqlDbType.VarChar).Value = unit;
                            command.Parameters.Add("@stock", SqlDbType.VarChar).Value = 'P';
                            command.Parameters.Add("@vat", SqlDbType.VarChar).Value = vat;
                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                            SqlDataReader reader = command.ExecuteReader();
                            while (reader.Read())
                            {
                                remq = Convert.ToDecimal(reader.GetSqlDecimal(11).ToDouble());
                            }
                            db.CloseConnection();
                        }
                        catch (Exception)
                        { db.CloseConnection(); }
                    }
                    catch (Exception)
                    { db.CloseConnection(); }
                }
                PurDetailRepo.Dispose();
            }
            catch (Exception)
            { }
            return remq;
        }

        public void maxbillidtype(int Type)
        {
            try
            {
                string initial = "";
                if (Type == 1)
                    initial = "T";
                else if (Type == 2)
                    initial = "E";
                else if (Type == 3)
                {
                    initial = "F";
                    chkCash.Visible = true;
                    chkCredit.Visible = true;
                }
                try
                {
                    db.connect();
                    SqlCommand command = new SqlCommand("SELECT MAX(CAST(SUBSTRING(BillNo, 2, len(BillNo)-1) AS int))+1 FROM CustomerBillMaster where BillNo like '" + initial + "%' and TransactionYear = '" + CommonMethod.TransactionYear + "' and CompId=" + CommonMethod.CompId + "", db.Connection);
                    var maxid = command.ExecuteScalar();
                    db.CloseConnection();
                    if (maxid.ToString() == "")
                        txtbillno.Text = initial + "1";
                    else
                        txtbillno.Text = initial + maxid;
                }
                catch (Exception)
                { db.CloseConnection(); }
            }
            catch (Exception)
            { }
        }

        public void fillbankname()
        {
            try
            {
                BankRepository BankRepo = new BankRepository();
                List<BankInformation> bankdata = new List<BankInformation>();
                bankdata.Clear();
                bankdata = BankRepo.GetAll().OrderByDescending(t => t.Bankname).ToList();
                bankdata.Add(new BankInformation { Bankname = "Select", BankId = 0 });
                bankdata.Reverse();
                cmbbank.DataSource = bankdata;
                cmbbank.ValueMember = "BankId";
                cmbbank.DisplayMember = "Bankname";
                BankRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void fillStaffname()
        {
            try
            {
                StaffRepository StaffRepo = new StaffRepository();
                List<StaffInfo> Staffdata = new List<StaffInfo>();
                Staffdata.Clear();
                Staffdata = StaffRepo.GetAll().OrderByDescending(t => t.Name).ToList();
                Staffdata.Add(new StaffInfo { Name = "Select", ID = 0 });
                Staffdata.Reverse();
                cmbStaffName.DataSource = Staffdata;
                cmbStaffName.ValueMember = "ID";
                cmbStaffName.DisplayMember = "Name";
                StaffRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void fillSiteName()
        {
            try
            {
                SiteInfoRepository StaffRepo = new SiteInfoRepository();
                List<SiteInfo> Staffdata = new List<SiteInfo>();
                Staffdata.Clear();
                Staffdata = StaffRepo.GetAll().OrderByDescending(t => t.SiteName).ToList();
                Staffdata.Add(new SiteInfo { SiteName = "Select", Id = 0 });
                Staffdata.Reverse();
                cmbSiteName.DataSource = Staffdata;
                cmbSiteName.ValueMember = "Id";
                cmbSiteName.DisplayMember = "SiteName";
                StaffRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void fillgst()
        {
            try
            {
                DataTable dtsgst = db.Gettable("select 0 as GSTNo,0 as GSTPercent from GSTMaster union select Id,cast(GSTPercent as decimal(18,2)) from GSTMaster where ApplyforSnCGST='Y'");
                if (dtsgst.Rows.Count > 0)
                {
                    cmbsgst.ValueMember = "GSTNo";
                    cmbsgst.DisplayMember = "GSTPercent";
                    cmbsgst.DataSource = dtsgst;
                }

                DataTable dtcgst = db.Gettable("select 0 as GSTNo,0 as GSTPercent from GSTMaster union select Id,cast(GSTPercent as decimal(18,2)) from GSTMaster where ApplyforSnCGST='Y'");
                if (dtcgst.Rows.Count > 0)
                {
                    cmbcgst.ValueMember = "GSTNo";
                    cmbcgst.DisplayMember = "GSTPercent";
                    cmbcgst.DataSource = dtcgst;
                }

                DataTable dtigst = db.Gettable("select 0 as GSTNo,0 as GSTPercent from GSTMaster union select Id,cast(GSTPercent as decimal(18,2)) from GSTMaster where ApplyforIGST='Y'");
                if (dtigst.Rows.Count > 0)
                {
                    cmbigst.ValueMember = "GSTNo";
                    cmbigst.DisplayMember = "GSTPercent";
                    cmbigst.DataSource = dtigst;
                }
            }
            catch (Exception) { }
        }

        public void customerdata()
        {
            try
            {
                if (chkCustomerNameDefault.Checked == false)
                {
                    CustomerRepository custrepo = new CustomerRepository();
                    List<CustomerInformation> customerdata = new List<CustomerInformation>();
                    customerdata.Clear();
                    customerdata = custrepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).OrderByDescending(t => t.CustomerName).ToList();
                    customerdata.Add(new CustomerInformation { CustomerName = "Select", CustomerID = 0 });
                    customerdata.Reverse();
                    cmbcustomername.DataSource = customerdata;
                    cmbcustomername.ValueMember = "CustomerID";
                    cmbcustomername.DisplayMember = "CustomerName";
                    custrepo.Dispose();
                }
                CustomerRepository custrepo1 = new CustomerRepository();
                List<CustomerInformation> customerdata1 = new List<CustomerInformation>();
                customerdata1.Clear();
                customerdata1 = custrepo1.GetAll().Where(t => t.CompId == CommonMethod.CompId).OrderByDescending(t => t.CustomerName).ToList();
                customerdata1.Add(new CustomerInformation { CustomerName = "Select", CustomerID = 0 });
                customerdata1.Reverse();
                cmbShipParty.DataSource = customerdata1;
                cmbShipParty.ValueMember = "CustomerID";
                cmbShipParty.DisplayMember = "CustomerName";
                custrepo1.Dispose();
            }
            catch (Exception)
            { }
        }

        public void fillcombo()
        {
            try
            {
                ProductRepository custrepo = new ProductRepository();
                List<ProductInformation> customerdata = new List<ProductInformation>();
                customerdata.Clear();
                if (CommonMethod.commProduct == true)
                    customerdata = custrepo.GetAll().Where(t => t.Prefix != null).GroupBy(t => t.Prefix).Select(t => t.FirstOrDefault()).OrderByDescending(t => t.Prefix).ToList();
                else
                    customerdata = custrepo.GetAll().Where(t => t.Prefix != null && t.CompId == CommonMethod.CompId).GroupBy(t => t.Prefix).Select(t => t.FirstOrDefault()).OrderByDescending(t => t.Prefix).ToList();
                customerdata.Add(new ProductInformation { Prefix = "Select", ProductCode = 0 });
                customerdata.Reverse();
                cmbPrefix.DataSource = customerdata;
                cmbPrefix.ValueMember = "ProductCode";
                cmbPrefix.DisplayMember = "Prefix";
                custrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void fillgroupmaster()
        {
            try
            {
                GroupMasterRepository grouprepo = new GroupMasterRepository();
                List<GroupMaster> groupdata = new List<GroupMaster>();
                groupdata.Clear();
                if (CommonMethod.commProduct == true)
                    groupdata = grouprepo.GetAll().OrderByDescending(t => t.GroupMasterName).ToList();
                else
                    groupdata = grouprepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).OrderByDescending(t => t.GroupMasterName).ToList();
                groupdata.Add(new GroupMaster { GroupMasterName = "Select", GroupMasterId = 0 });
                groupdata.Reverse();
                cmbGroup.DataSource = groupdata;
                cmbGroup.ValueMember = "GroupMasterId";
                cmbGroup.DisplayMember = "GroupMasterName";
                grouprepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void loadProductName()
        {
            try
            {
                txtProductname.Text = "";
                txtSubtitle.Text = "";
                string cnString1 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
                using (SqlConnection con = new SqlConnection(cnString1))
                {
                    SqlCommand cmd = null;
                    if (CommonMethod.commProduct == true)
                        cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation", con);
                    else
                        cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation where compid=" + CommonMethod.CompId, con);
                    con.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    AutoCompleteStringCollection MyCollection = new AutoCompleteStringCollection();
                    while (reader.Read())
                    {
                        try
                        {
                            MyCollection.Add(reader.GetString(0) + "," + reader.GetString(1) + "," + reader.GetString(2));
                        }
                        catch (Exception)
                        { }
                    }
                    txtProductname.AutoCompleteCustomSource = MyCollection;
                    con.Close();
                    reader.Dispose();
                }
            }
            catch (Exception) { }
        }

        public void clearatadd()
        {
            try
            {
                isdirect = 0;
                txtProductname.Text = "";
                txtBarcode.Text = "";
                cmbUnit.Items.Clear();
                txtQuantity.Text = "0";
                txtrate.Text = "0";
                txtAmount.Text = "0";
                txtHSNCode.Text = "";
                txtpdiscount.Text = "0";
                txtpdisAmt.Text = "0";
                lblpvat.Text = "0";
                txtpSpcDisc.Text = "0";
                fillgst();
                txtpCess.Text = "0";
                txtpTotalAmt.Text = "0";
                txtSubtitle.Text = "";
                txtBatchNo.Text = "";
                txtExpiry.Text = "";
                lblavgrate.Text = "AvgRate: 0";
                fillcombo();
                totalamt = 0;
                colIndex = -1;
                psize = "";
                pcolor = "";
                BarcodePrice = 0;
                dtgvcode.Rows.Clear();
                barcodeMinus = false;
                pnlSubtitle.Visible = false;
                dtgvFormulae.Visible = false;
                dtgvFormulae.Rows.Clear();
                dtgvFormulae.Columns.Clear();
                if (billtype == 2)
                {
                    cmbsgst.Enabled = false;
                    txtVat.Enabled = false;
                    cmbcgst.Enabled = false;
                    cmbigst.Enabled = false;
                    txtpCess.Enabled = false;
                }
                pnlQtySubtitle.Visible = false;
                QtySubtitle = false;
                txtQuantitySubtitle.Text = "0";
                if (cmbPrefix.Items.Count > 2)
                    this.ActiveControl = cmbPrefix;
                else
                    this.ActiveControl = txtProductname;
                productentrytype = 0;
                updatebarcode = "";
                barcodestatus = "";
                barcode = "";
                ProductDataGlobal = null;
            }
            catch (Exception)
            { }
        }

        public void clear()
        {
            try
            {
                btnsave.Enabled = true;
                btnUpdate.Enabled = false;
                chkCash.Checked = false;
                chkCredit.Checked = false;
                chkCash.Visible = false;
                chkCredit.Visible = false;
                txtVat.Enabled = true;
                chkcheque.Checked = false;
                btnreturn.Visible = false;
                chkBySwipe.Checked = false;
                colIndex = -1;
                txtBillReceiptNo.Text = "";
                txtmannualDCNo.Text = "";
                lbltotalqty.Text = "0";
                lbltpuramt.Text = "0";
                vat5amt = 0; vat12amt = 0;
                tpuramt = 0;
                lbl2vatamt.Text = "0";
                lbl2vat.Text = " %";
                maxbillidtype(billtype);
                lbldcdate.Text = "";
                lbldcno.Text = "";
                lblqno.Text = "";
                txtProductname.Text = "";
                txtBarcode.Text = "";
                txtQuantity.Text = "0";
                txtDiscount.Text = "0";
                customerdata();
                fillbankname(); fillStaffname(); fillSiteName();
                txtDiscAmt.Text = "0";
                lbldiscount.Text = "0";
                txtHSNCode.Text = "";
                fillcombo();
                txtTotalAmt.Text = "0";
                GvProductInfo.Rows.Clear();
                cmbUnit.Items.Clear();
                Pamt = 0;
                txtNetAmt.Text = "0";
                txtPaidAmt.Text = "0";
                txtRemainingAmt.Text = "0";
                btnsave.Text = "Save";
                txtVat.Text = "0";
                lblvat.Text = "0";
                fillgst();
                txtpCess.Text = "0";
                lblmechname.Text = "0";
                txtpdiscount.Text = "0";
                txtpTotalAmt.Text = "0";
                txtrate.Text = "0";
                txtAmount.Text = "0";
                txtchequeno.Text = "";
                txthmchrg.Text = "0";
                txttrchrg.Text = "0";
                ShowBonus = true;
                barcodeMinus = false;
                label6.Text = "-------------";
                txtVehicleNo.Text = "";
                txtVehicletype.Text = "";
                txtTransporter.Text = "";
                txtNarration.Text = "";
                fillState();
                txttotSGst.Text = "0";
                txttotCGst.Text = "0";
                txttotIGst.Text = "0";
                lblProductcount.Text = "0";
                lblCurrentRow.Text = "0";
                txtTendercash.Text = "0";
                fillgroupmaster();
                txtreturncash.Text = "0";
                staticbarStatus = "";
                gvProductRemStock.Visible = false;
                emptyUserSeries = false;
                pnlQtySubtitle.Visible = false;
                QtySubtitle = false;
                txtQuantitySubtitle.Text = "0";
                try
                {
                    dtpbilldate.Value = DateTime.Now.Date;
                    dtppaymentdate.Value = DateTime.Now.Date;
                    dtpchequedate.Value = DateTime.Now.Date;
                    dtpSupply.Value = DateTime.Today.Date;
                    dtpPoDate.Value = DateTime.Today.Date;
                }
                catch (Exception)
                { }
                txtprefixproduct.Visible = false;
                pnlOtherDetails.Visible = false;

                // for bonus 
                lblCurrBonus.Visible = false;
                label78.Visible = false;
                label80.Visible = false;
                label79.Visible = false;
                lblTotalBonus.Visible = false;
                lblPrvBonus.Visible = false;
                lblTotalBonus.Text = "0";
                lblPrvBonus.Text = "0";
                lblCurrBonus.Text = "0";
                bonusStatus = null;
                if (billtype == 2 || SetDataM.CompositionScheme == "True")
                {
                    cmbsgst.Enabled = false;
                    txtVat.Enabled = false;
                    cmbcgst.Enabled = false;
                    cmbigst.Enabled = false;
                    txtpCess.Enabled = false;
                }
                else
                {
                    cmbsgst.Enabled = true;
                    txtVat.Enabled = true;
                    cmbcgst.Enabled = true;
                    cmbigst.Enabled = true;
                    txtpCess.Enabled = true;
                }
                txtSeriesNext.Text = "";
                if (cmbInvoiceSeries.Text != "")
                    getMaxSeries();
            }
            catch (Exception)
            { }
        }

        public void fillState()
        {
            try
            {
                StateMasterRepository unitrepo = new StateMasterRepository();
                List<StateMaster> unitdata = new List<StateMaster>();
                unitdata.Clear();
                unitdata = unitrepo.GetAll();
                unitdata.Add(new StateMaster { StateName = "Select", StateId = 0 });
                unitdata.Reverse();
                cmbState.DataSource = unitdata;
                cmbState.ValueMember = "StateId";
                cmbState.DisplayMember = "StateName";
                unitrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void InputField()
        {
            try
            {
            a:
                {
                    string input = "";
                    int type = billtype;
                    input = Microsoft.VisualBasic.Interaction.InputBox("", "Bill Type", "" + type + "", 500, 250);
                    if (input == "")
                    { }
                    else if (input == "1" || input == "2" || input == "3")
                    {
                        type = Convert.ToInt32(input);
                        maxbillidtype(type);
                        billtype = type;
                    }
                    else
                        goto a;
                }
                if (billtype == 2 || SetDataM.CompositionScheme == "True")
                {
                    cmbsgst.Enabled = false;
                    txtVat.Enabled = false;
                    cmbcgst.Enabled = false;
                    cmbigst.Enabled = false;
                    txtpCess.Enabled = false;
                }
                else
                {
                    cmbsgst.Enabled = true;
                    txtVat.Enabled = true;
                    cmbcgst.Enabled = true;
                    cmbigst.Enabled = true;
                    txtpCess.Enabled = true;
                }
            }
            catch (Exception)
            { }
        }

        public void DeleteDuplicateBatchRecords()
        {
            try
            {
                db.connect();
                SqlCommand command = new SqlCommand("SPDeleteUnwantedBatchEntries", db.Connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.Add("@MasterBillNo", SqlDbType.VarChar).Value = txtbillno.Text;
                command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                command.ExecuteNonQuery();
                db.CloseConnection();
            }
            catch (Exception)
            { db.CloseConnection(); }
        }

        public void savemaster()
        {
            try
            {
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                CustomerBillMaster billdata = new CustomerBillMaster();
                maxbillidtype(billtype);
                billdata.BillNo = Convert.ToString(txtbillno.Text);
                billdata.BillRcptNo = txtBillReceiptNo.Text.ToString();
                billdata.Billdate = Convert.ToDateTime(dtpbilldate.Value);
                billdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                billdata.CustomerName = cmbcustomername.Text;
                try
                { billdata.DcNo = Convert.ToInt32(lbldcno.Text); }
                catch (Exception)
                { }
                try
                { billdata.DcDate = Convert.ToDateTime(lbldcdate.Text); }
                catch (Exception)
                { }
                try
                { billdata.QuotationNo = Convert.ToString(lblqno.Text); }
                catch (Exception)
                { }

                if (txtDiscount.Text != "")
                    billdata.Discount = Math.Round(Convert.ToDecimal(txtDiscount.Text), 5);
                else
                    billdata.Discount = 0;
                if (txtNetAmt.Text != "")
                    billdata.NetAmount = Convert.ToDecimal(txtNetAmt.Text);
                else
                    billdata.NetAmount = Convert.ToDecimal(txtTotalAmt.Text);
                if (txtPaidAmt.Text != "")
                    billdata.PaidAmount = Convert.ToDecimal(txtPaidAmt.Text);
                else
                    billdata.PaidAmount = 0;
                if (txtRemainingAmt.Text != "")
                    billdata.RemainingAmount = Convert.ToDecimal(txtRemainingAmt.Text);
                else
                    billdata.RemainingAmount = 0;
                if (txtTotalAmt.Text != "")
                    billdata.TotalAmount = Convert.ToDecimal(txtTotalAmt.Text);
                else
                    billdata.TotalAmount = 0;
                if (txtVat.Text != "")
                    billdata.Vat = Convert.ToDecimal(txtVat.Text);
                else
                    billdata.Vat = 0;
                if (txttrchrg.Text != "")
                    billdata.TransportCharges = Convert.ToDecimal(txttrchrg.Text);
                else
                    billdata.TransportCharges = 0;
                if (txthmchrg.Text != "")
                    billdata.HamaliCharges = Convert.ToDecimal(txthmchrg.Text);
                else
                    billdata.HamaliCharges = 0;
                try
                {
                    billdata.RoundOff = Convert.ToDecimal(txtRoundOff.Text);
                }
                catch (Exception)
                { }
                billdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value);
                billdata.YN = Convert.ToString("0");
                billdata.BillStatus = 0;
                billdata.Narration = txtNarration.Text.ToString();
                billdata.TransactionYear = CommonMethod.TransactionYear;
                billdata.CompId = CommonMethod.CompId;
                if (txtbillno.Text.StartsWith("F"))
                {
                    if (chkCash.Checked == true)
                        billdata.BillType = "Cash";
                    else if (chkCredit.Checked == true)
                        billdata.BillType = "Credit";
                }
                billdata.SupplyDate = Convert.ToDateTime(dtpSupply.Value);
                billdata.SupplyPlace = cmbState.Text;
                billdata.VehicleType = txtVehicletype.Text;
                billdata.VehicleNo = txtVehicleNo.Text;
                billdata.ShipCustomerId = Convert.ToInt32(cmbShipParty.SelectedValue);
                billdata.Transporter = txtTransporter.Text;
                billdata.PoDate = dtpPoDate.Value.Date;
                billdata.MannualDCNo = txtmannualDCNo.Text;
                if (cmbGroup.SelectedIndex > 0)
                {
                    billdata.CategoryName = cmbGroup.Text;
                    billdata.CatId = Convert.ToInt32(cmbGroup.SelectedValue);
                }
                else
                {
                    billdata.CategoryName = null;
                    billdata.CatId = null;
                }
                billid = Convert.ToString(txtbillno.Text);
                if (!string.IsNullOrEmpty(txtTendercash.Text))
                    billdata.TenderCash = Convert.ToDecimal(txtTendercash.Text);
                else
                    billdata.TenderCash = 0;
                if (!string.IsNullOrEmpty(txtreturncash.Text))
                    billdata.ReturnCash = Convert.ToDecimal(txtreturncash.Text);
                else
                    billdata.ReturnCash = 0;

                billdata.UserSeries = txtSeriesNext.Text;
                if (cmbStaffName.SelectedIndex != 0)
                    billdata.StaffId = Convert.ToInt32(cmbStaffName.SelectedValue);
                if (cmbSiteName.SelectedIndex != 0)
                    billdata.SiteId = Convert.ToInt32(cmbSiteName.SelectedValue);
                Custmasterrepo.Add(billdata);
                Custmasterrepo.Save();
                BillMasterID = Convert.ToInt32(billdata.Id);
                Custmasterrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void saveremainingpayment(string mode)
        {
            //Save BillNo entry with calculating total balance amount
            try
            {
                RemainingPaymentRepository remainingpayrepo = new RemainingPaymentRepository();
                RemainingPayment remainingdata = new RemainingPayment();

                remainingdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                remainingdata.Customername = Convert.ToString(cmbcustomername.Text);
                if (txtNetAmt.Text != "")
                    remainingdata.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                else
                    remainingdata.NetAmt = Convert.ToDecimal(txtTotalAmt.Text);
                if (txtPaidAmt.Text != "")
                    remainingdata.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                else
                    remainingdata.PaidAmt = 0;
                RemainingPaymentRepository remainingpayrepo1 = new RemainingPaymentRepository();
                RemainingPayment remainingdata1 = new RemainingPayment();
                remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                decimal decremamt = 0;
                if (remainingdata1 != null)
                {
                    decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                    else
                        remainingdata.RemainingAmt = decremamt;
                }
                else
                {
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                    else
                        remainingdata.RemainingAmt = 0;
                }
                remainingdata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value);
                remainingdata.PaymentMode = mode;
                if (cmbStaffName.SelectedIndex != 0)
                    remainingdata.StaffId = Convert.ToInt32(cmbStaffName.SelectedValue);
                if (cmbSiteName.SelectedIndex != 0)
                    remainingdata.SiteId = Convert.ToInt32(cmbSiteName.SelectedValue);
                if (mode == "Cheque" || mode == "By Swipe")
                {
                    if (mode == "By Swipe")
                        remainingdata.Bankname = txtbankname.Text;
                    else
                    {
                        remainingdata.Bankname = txtbankname.Text;
                        remainingdata.Chequeno = txtchequeno.Text;
                        remainingdata.Chequedate = dtpchequedate.Value.Date;
                    }
                    try
                    {
                        BankStatementRepository bankrepo = new BankStatementRepository();
                        BankStatement bankstdata = new BankStatement();

                        bankstdata.BankId = Convert.ToInt32(cmbbank.SelectedValue);
                        bankstdata.Bankname = Convert.ToString(cmbbank.Text);
                        bankstdata.TransactionDate = dtpbilldate.Value.Date;
                        bankstdata.Particulars = "Receive From" + " " + Convert.ToString(cmbcustomername.Text.Trim());
                        if (mode == "By Swipe")
                            bankstdata.ChequeNo = "";
                        else
                            bankstdata.ChequeNo = Convert.ToString(txtchequeno.Text);
                        bankstdata.Deposits = Convert.ToDecimal(txtPaidAmt.Text);
                        bankstdata.Balance = 0;
                        bankstdata.CompId = CommonMethod.CompId;
                        bankstdata.TransactionType = "Bill";
                        bankrepo.Add(bankstdata);
                        bankrepo.Save();
                        bankrepo.Dispose();
                    }
                    catch (Exception)
                    { }
                }
                remainingdata.Type = "Bill";
                remainingdata.BillId = Convert.ToString(txtbillno.Text);
                remainingdata.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                if (typeofLedger == "Y")
                {
                    if (billtype == 1)
                        remainingdata.Status = "Tax";
                    else if (billtype == 2)
                        remainingdata.Status = "Estimate";
                }
                else
                    remainingdata.Status = "";
                remainingdata.TransactionYear = CommonMethod.TransactionYear;
                remainingdata.CompId = CommonMethod.CompId;
                remainingpayrepo.Add(remainingdata);
                remainingpayrepo.Save();
                remainingpayrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void SaveBonus(int BillMasterID)
        {
            try
            {
                BonusRepository remainingpayrepo = new BonusRepository();
                CustomerBonu remainingdata = new CustomerBonu();
                CustomerInformation newcust = new CustomerInformation();
                CustomerRepository custRepo = new CustomerRepository();
                newcust = custRepo.GetAll().Where(t1 => t1.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t1.CompId == CommonMethod.CompId).FirstOrDefault();
                remainingdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                if (lblCurrBonus.Text != "")
                    remainingdata.TotalBonusAmount = Convert.ToDecimal(lblCurrBonus.Text);
                BonusRepository remainingpayrepo1 = new BonusRepository();
                CustomerBonu remainingdata1 = new CustomerBonu();
                remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerInformation.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();

                if (remainingdata1 != null)
                {
                    decimal decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                    if (lblCurrBonus.Text != "")
                        remainingdata.RemainingAmt = decremamt + Convert.ToDecimal(lblCurrBonus.Text);
                    else
                        remainingdata.RemainingAmt = decremamt;
                }
                else
                {
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = Convert.ToDecimal(lblCurrBonus.Text);
                    else
                        remainingdata.RemainingAmt = 0;
                }
                remainingdata.CustomerId = newcust.Id;
                remainingdata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value);
                remainingdata.Status = "Bonus";
                remainingdata.BillId = BillMasterID;
                remainingdata.billDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.TransactionYear = CommonMethod.TransactionYear;
                remainingdata.CompId = CommonMethod.CompId;
                remainingpayrepo.Add(remainingdata);
                remainingpayrepo.Save();
                remainingpayrepo.Dispose();
                custRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void UpdateBonus(int BillMasterID)
        {
            try
            {
                DataTable dt = new DataTable();
                dt = db.GetTable("Select m.Id as BillMId,c.Id as CId from CustomerBillMaster m inner join CustomerInformation c on c.CustomerID=m.CustomerId where m.BillId=" + Convert.ToString(txtbillno.Text) + " and c.CustomerID=" + Convert.ToInt32(cmbcustomername.SelectedValue) + "");

                BonusRepository remainingpayrepo = new BonusRepository();
                CustomerBonu remainingdata = new CustomerBonu();
                remainingdata = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToInt32(dt.Rows[0]["BillMId"].ToString())).FirstOrDefault();
                remainingdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                if (lblCurrBonus.Text != "")
                    remainingdata.TotalBonusAmount = Convert.ToDecimal(lblCurrBonus.Text);
                BonusRepository remainingpayrepo1 = new BonusRepository();
                CustomerBonu remainingdata1 = new CustomerBonu();
                remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(dt.Rows[0]["CId"].ToString()) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                if (remainingdata1 != null)
                {
                    decimal decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                    if (lblCurrBonus.Text != "")
                        remainingdata.RemainingAmt = decremamt + Convert.ToDecimal(lblCurrBonus.Text);
                    else
                        remainingdata.RemainingAmt = decremamt;
                }
                else
                {
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = Convert.ToDecimal(lblCurrBonus.Text);
                    else
                        remainingdata.RemainingAmt = 0;
                }
                remainingdata.CustomerId = Convert.ToInt32(dt.Rows[0]["CId"].ToString());
                remainingdata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value);
                remainingdata.Status = "Bonus";
                remainingdata.BillId = BillMasterID;
                remainingdata.billDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.TransactionYear = CommonMethod.TransactionYear;
                remainingdata.CompId = CommonMethod.CompId;
                remainingpayrepo.Edit(remainingdata);
                remainingpayrepo.Save();
                remainingpayrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void savefakebillremainingpayment(string mode)
        {
            try
            {
                FakeRemainingPaymentRepository remainingpayrepo = new FakeRemainingPaymentRepository();
                FakeRemainingPayment remainingdata = new FakeRemainingPayment();

                remainingdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                remainingdata.Customername = Convert.ToString(cmbcustomername.Text);
                if (txtNetAmt.Text != "")
                    remainingdata.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                else
                    remainingdata.NetAmt = Convert.ToDecimal(txtTotalAmt.Text);
                if (txtPaidAmt.Text != "")
                    remainingdata.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                else
                    remainingdata.PaidAmt = 0;
                FakeRemainingPaymentRepository remainingpayrepo1 = new FakeRemainingPaymentRepository();
                FakeRemainingPayment remainingdata1 = new FakeRemainingPayment();
                remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                if (remainingdata1 != null)
                {
                    decimal decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                    else
                        remainingdata.RemainingAmt = decremamt;
                }
                else
                {
                    if (txtRemainingAmt.Text != "")
                        remainingdata.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                    else
                        remainingdata.RemainingAmt = 0;
                }
                remainingdata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value);
                remainingdata.PaymentMode = mode;
                if (mode == "Cheque")
                {
                    remainingdata.Bankname = txtbankname.Text;
                    remainingdata.Chequeno = txtchequeno.Text;
                    remainingdata.Chequedate = dtpchequedate.Value.Date;
                }
                remainingdata.Type = "Bill";
                remainingdata.BillId = Convert.ToString(txtbillno.Text);
                remainingdata.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                remainingdata.TransactionYear = CommonMethod.TransactionYear;
                remainingdata.CompId = CommonMethod.CompId;
                remainingpayrepo.Add(remainingdata);
                remainingpayrepo.Save();
                remainingpayrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void SendSMS(string billno, decimal netAmount)
        {
            try
            {
                bool connection = NetworkInterface.GetIsNetworkAvailable();
                if (connection == true)
                {
                    if (SetDataM.SendOption == "Auto" && SetDataM.AutoForBill == "True")
                    {
                        CompanyInformationRepository compRepo = new CompanyInformationRepository();
                        CompanyInformation compData = compRepo.GetAll().Where(t => t.CompanyId == CommonMethod.CompId).FirstOrDefault();
                        CustomerRepository custRepo = new CustomerRepository();
                        string mobileno = custRepo.GetAll().Where(t => t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CustomerName == cmbcustomername.Text && t.CompId == CommonMethod.CompId).FirstOrDefault().Mobileno;
                        string smsText = "";
                        if (SetDataM.MarathiSMS == "True")
                            smsText = compData.CompanyName + " मध्ये आपले स्वागत आहे. तुमचा बिल नं " + billno + " आणि तुमची बिलाची रक्कम " + netAmount + " आहे. पुन्हा अवश्य भेट द्या...धन्यवाद.";
                        else
                            smsText = "Welcome to " + compData.CompanyName + ". Your Bill No is " + billno + " and Your net amount is " + netAmount + "." + Environment.NewLine + "Please Visit Again...Thank You!!";
                        WebClient client = new WebClient();
                        string URL = "";
                        SMSRepository smsRepo = new SMSRepository();
                        SendSM smsData = new SendSM();
                        smsData.CompId = CommonMethod.CompId;
                        try
                        {
                            if (!string.IsNullOrEmpty(mobileno))
                            {
                                if (System.Text.RegularExpressions.Regex.IsMatch(mobileno, "[^0-9]"))
                                {
                                    smsData.Status = "Mobile no not valid for Auto Bill";
                                    smsRepo.Add(smsData);
                                    smsRepo.Save();
                                }
                                else if (mobileno.Length == 10)
                                {
                                    string SmsStatusMsg = string.Empty;
                                    //  return SmsStatusMsg;
                                    smsData.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                                    smsData.CustomerName = cmbcustomername.Text;
                                    smsData.MobileNo = mobileno;
                                    smsData.SmsText = smsText;
                                    smsData.SmsDate = DateTime.Now.Date;
                                    smsData.BillNo = Convert.ToString(billno);
                                    URL = SetDataM.SMSURLPath + SetDataM.SMSUserId + "&pass=" + SetDataM.SMSPassword + "&sender=" + SetDataM.SMSKey + "&phone=" + mobileno + "&text=" + smsText + "&priority=ndnd&stype=normal";
                                    string result = apicall(URL);
                                    if (result.Contains("Username/Password Incorrect") == true)
                                    {
                                        smsData.Status = "Wrong User Name or Password For Bill Auto SMS";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                    }
                                    else if (result.Contains("Sender ID Does not Exist") == true)
                                    {
                                        smsData.Status = "Sender ID Does not Exist For Bill Auto SMS";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                    }
                                    else
                                    {
                                        smsData.Status = "Auto Bill";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                        MessageBox.Show("SMS Send Successfully.", "Success");
                                    }
                                }
                                else
                                {
                                    smsData.Status = "Mobile no not valid for Auto Bill";
                                    smsRepo.Add(smsData);
                                    smsRepo.Save();
                                }
                            }
                            else
                            {
                                smsData.Status = "Mobile dose not exsist For Auto Bill";
                                smsRepo.Add(smsData);
                                smsRepo.Save();
                            }
                        }
                        catch (Exception)
                        {
                            smsData.Status = "Send Option is Auto but customer dose not have mobile no!!";
                            smsRepo.Add(smsData);
                            smsRepo.Save();
                        }
                    }
                }
                else
                    MessageBox.Show("Internet connection in not available");
            }
            catch (Exception)
            { }
        }

        public string apicall(string url)
        {
            HttpWebRequest httpreq = (HttpWebRequest)WebRequest.Create(url);
            try
            {
                HttpWebResponse httpres = (HttpWebResponse)httpreq.GetResponse();
                StreamReader sr = new StreamReader(httpres.GetResponseStream());
                string results = sr.ReadToEnd();
                sr.Close();
                return results;
            }
            catch
            {
                return "0";
            }
        }

        private void getPrint()
        {
            try
            {
                custbillno = Convert.ToString(billid);
                char c = custbillno.FirstOrDefault();
                char multiCopies = 'N';
                FlagData = "";
                if (c == 'T')
                    FlagData = "WithVat";
                else if (c == 'F')
                    FlagData = "Fake";
                else
                    FlagData = "WithoutVat";
                if (SetDataM != null)
                {
                    multiCopies = Convert.ToChar((SetDataM.MultipleCopies == null ? "N" : SetDataM.MultipleCopies));
                    if (SetDataM.CompositionScheme == "True")
                    {
                        printUnderComposition = true;
                        if (multiCopies == 'Y')
                        {
                            input_Copies = Microsoft.VisualBasic.Interaction.InputBox("How Many Copies?", "Tax Invoice", "", 250, 250);
                            CopyInput = Convert.ToInt32(input_Copies);
                            if (CopyInput > 0)
                            {
                                chkCust.Checked = false;
                                chkTrans.Checked = false;
                                chkSend.Checked = false;
                                if (Convert.ToInt32(input_Copies) == 3)
                                {
                                    chkCust.Checked = true;
                                    chkTrans.Checked = true;
                                    chkSend.Checked = true;
                                }
                                else if (Convert.ToInt32(input_Copies) == 1)
                                    chkCust.Checked = true;
                                pnlCopies.Visible = true;
                                btnprint.Enabled = false;
                                this.ActiveControl = pnlCopies;
                            }
                            else
                                pnlCopies.Visible = false;
                        }
                        else
                        {
                            if (c == 'T')
                            {
                                string copyType = "Original Copy";
                                RptCustomerBillCopmpositionScheme custrpt = new RptCustomerBillCopmpositionScheme(custbillno, copyType);
                                custrpt.ShowDialog();
                                custrpt.Dispose();
                            }
                            else if (c == 'E')
                            {
                                if ((MessageBox.Show("Are you Want Preview of this Report?", "Preview", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
                                {
                                    RptNoVatBill custrpt = new RptNoVatBill(custbillno);
                                    custrpt.ShowDialog();
                                    custrpt.Dispose();
                                }
                                else
                                {
                                    billList.Clear();
                                    billList.Add(BillMasterID);
                                    RptNoVatBill custrpt = new RptNoVatBill(billList, FlagData);
                                }
                            }
                        }
                    }
                    else
                    {
                        printUnderComposition = false;
                        input = "";
                        if (c == 'T' || c == 'F')
                        {
                            if (SetDataM.TaxInvoicePrintOn == "Both")
                                input = Microsoft.VisualBasic.Interaction.InputBox("1 For Portrait and 2 For LandScape and 3 For A5 and 4 For Marathi Bill and 5 For Marathi A6 Bill and 8 For Only A6 and 9 For Only Horizontal A6 ", "Tax Invoice", "", 250, 250);
                            else if (SetDataM.TaxInvoicePrintOn == "Portrait")
                                input = "1";
                            else if (SetDataM.TaxInvoicePrintOn == "HoriZontal")
                                input = "2";
                            else if (SetDataM.TaxInvoicePrintOn == "A5")
                                input = "3";
                            else if (SetDataM.TaxInvoicePrintOn == "Marathi")
                                input = "4";
                            else if (SetDataM.TaxInvoicePrintOn == "MarathiA6")
                                input = "5";
                            else if (SetDataM.TaxInvoicePrintOn == "Thermal")
                                input = "6";
                            else if (SetDataM.TaxInvoicePrintOn == "Slab")
                                input = "7";
                            else if (SetDataM.TaxInvoicePrintOn == "A6")
                                input = "8";
                            else if (SetDataM.TaxInvoicePrintOn == "HorizontalA5")
                                input = "9";
                            if (input == "6")
                            {
                                RptCustomerbill custrpt = new RptCustomerbill(custbillno, input, "");
                            }
                            else if ((MessageBox.Show("Are you want to see preview of this Report?", "Preview", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
                            {
                                showPrintPreview = true;
                                if (multiCopies == 'Y' && (input != "4"))
                                {
                                    input_Copies = Microsoft.VisualBasic.Interaction.InputBox("How Many Copies?", "Tax Invoice", "", 250, 250);
                                    CopyInput = Convert.ToInt32(input_Copies);
                                    if (CopyInput > 0)
                                    {
                                        chkCust.Checked = false;
                                        chkTrans.Checked = false;
                                        chkSend.Checked = false;
                                        if (Convert.ToInt32(input_Copies) == 3)
                                        {
                                            chkCust.Checked = true;
                                            chkTrans.Checked = true;
                                            chkSend.Checked = true;
                                        }
                                        else if (Convert.ToInt32(input_Copies) == 1)
                                            chkCust.Checked = true;
                                        pnlCopies.Visible = true;
                                        btnprint.Enabled = false;
                                        this.ActiveControl = pnlCopies;
                                    }
                                    else
                                        pnlCopies.Visible = false;
                                }
                                else
                                {
                                    string copyType = "Original Copy";
                                    RptCustomerbill custrpt = new RptCustomerbill(custbillno, input, copyType);
                                    custrpt.ShowDialog();
                                    custrpt.Dispose();
                                }
                            }
                            else
                            {
                                showPrintPreview = false;
                                if (multiCopies == 'Y' && (input != "4"))
                                {
                                    input_Copies = Microsoft.VisualBasic.Interaction.InputBox("How Many Copies?", "Tax Invoice", "", 250, 250);
                                    CopyInput = Convert.ToInt32(input_Copies);
                                    if (CopyInput > 0)
                                    {
                                        chkCust.Checked = false;
                                        chkTrans.Checked = false;
                                        chkSend.Checked = false;
                                        if (Convert.ToInt32(input_Copies) == 3)
                                        {
                                            chkCust.Checked = true;
                                            chkTrans.Checked = true;
                                            chkSend.Checked = true;
                                        }
                                        else if (Convert.ToInt32(input_Copies) == 1)
                                            chkCust.Checked = true;
                                        pnlCopies.Visible = true;
                                        btnprint.Enabled = false;
                                        this.ActiveControl = pnlCopies;
                                    }
                                    else
                                        pnlCopies.Visible = false;
                                }
                                else
                                {
                                    string copyType = "Original Copy";
                                    billList.Clear();
                                    billList.Add(BillMasterID);
                                    RptCustomerbill custrpt = new RptCustomerbill(custbillno, FlagData, input, copyType);
                                    //custrpt.ShowDialog();
                                    custrpt.Dispose();
                                }
                            }
                        }
                        else if (c == 'E')
                        {
                            if ((MessageBox.Show("Are you Want Preview of this Report?", "Preview", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
                            {
                                RptNoVatBill custrpt = new RptNoVatBill(custbillno);
                                custrpt.ShowDialog();
                                custrpt.Dispose();
                            }
                            else
                            {
                                billList.Clear();
                                billList.Add(BillMasterID);
                                RptNoVatBill custrpt = new RptNoVatBill(billList, FlagData);
                            }
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        public void checkstock(string Proname, string company, string unit, decimal qty)
        {
            try
            {
                decimal remq = 0;
                PurchaseDetailRepository PurDetailRepo = new PurchaseDetailRepository();
                PurchaseDetail PurDData = new PurchaseDetail();
                PurDData = PurDetailRepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                if (PurDData != null)
                {
                    try
                    {
                        string vat = "";
                        if (SetDataM.StockShowOnBill == "Y")
                        {
                            if (billtype == 1)
                                vat = "y";
                            else if (billtype == 2)
                                vat = "n";
                        }
                        else
                            vat = "a";
                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand("SPVatnWithoutVatStock", db.Connection);
                            command.CommandType = CommandType.StoredProcedure;

                            command.Parameters.Add("@PrePName", SqlDbType.VarChar).Value = Proname;
                            command.Parameters.Add("@PreCName", SqlDbType.VarChar).Value = company;
                            command.Parameters.Add("@PreUName", SqlDbType.VarChar).Value = unit;
                            command.Parameters.Add("@stock", SqlDbType.VarChar).Value = 'P';
                            command.Parameters.Add("@vat", SqlDbType.VarChar).Value = vat;
                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                            SqlDataReader reader = command.ExecuteReader();
                            while (reader.Read())
                            {
                                remq = Convert.ToDecimal(reader.GetSqlDecimal(11).ToDouble());
                                if (qty <= remq)
                                { }
                                else
                                {
                                    if (txtProductname.Focused == false)
                                    {
                                        if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK))
                                        { }
                                        else
                                            this.Close();
                                    }
                                }
                            }
                            db.CloseConnection();
                        }
                        catch (Exception)
                        { db.CloseConnection(); }
                    }
                    catch (Exception)
                    { db.CloseConnection(); }
                }
                else
                    MessageBox.Show("Stock is not available.", "Warning");
                PurDetailRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void updatemaster()
        {
            try
            {
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                //start of CustomerBillMaster table entry code
                CustomerBillMaster billdata = new CustomerBillMaster();
                billdata.BillNo = Convert.ToString(txtbillno.Text);
                billdata.BillRcptNo = txtBillReceiptNo.Text.ToString();
                billdata.Billdate = dtpbilldate.Value.Date;
                billdata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                billdata.CustomerName = cmbcustomername.Text;
                try
                { billdata.DcNo = Convert.ToInt32(lbldcno.Text); }
                catch (Exception)
                { }
                try
                { billdata.DcDate = Convert.ToDateTime(lbldcdate.Text); }
                catch (Exception)
                { }
                try
                { billdata.QuotationNo = Convert.ToString(lblqno.Text); }
                catch (Exception)
                { }
                if (txtDiscount.Text != "")
                    billdata.Discount = Math.Round(Convert.ToDecimal(txtDiscount.Text), 5);
                else
                    billdata.Discount = 0;
                if (txtNetAmt.Text != "")
                    billdata.NetAmount = Convert.ToDecimal(txtNetAmt.Text);
                else
                    billdata.NetAmount = Convert.ToDecimal(txtTotalAmt.Text);
                if (txtPaidAmt.Text != "")
                    billdata.PaidAmount = Convert.ToDecimal(txtPaidAmt.Text);
                else
                    billdata.PaidAmount = 0;
                if (txtRemainingAmt.Text != "")
                    billdata.RemainingAmount = Convert.ToDecimal(txtRemainingAmt.Text);
                else
                    billdata.RemainingAmount = 0;
                if (txtTotalAmt.Text != "")
                    billdata.TotalAmount = Convert.ToDecimal(txtTotalAmt.Text);
                else
                    billdata.TotalAmount = 0;
                if (txtVat.Text != "")
                    billdata.Vat = Convert.ToDecimal(txtVat.Text);
                else
                    billdata.Vat = 0;
                if (txttrchrg.Text != "")
                    billdata.TransportCharges = Convert.ToDecimal(txttrchrg.Text);
                else
                    billdata.TransportCharges = 0;
                if (txthmchrg.Text != "")
                    billdata.HamaliCharges = Convert.ToDecimal(txthmchrg.Text);
                else
                    billdata.HamaliCharges = 0;
                if (txtbillno.Text.StartsWith("F"))
                {
                    if (chkCash.Checked == true)
                        billdata.BillType = "Cash";
                    else if (chkCredit.Checked == true)
                        billdata.BillType = "Credit";
                }
                try
                {
                    billdata.RoundOff = Convert.ToDecimal(txtRoundOff.Text);
                }
                catch (Exception)
                { }
                billdata.PaymentDate = Convert.ToDateTime(dtppaymentdate.Value.ToShortDateString());
                billdata.YN = Convert.ToString(creditstatus);
                billdata.Narration = txtNarration.Text.ToString();
                billdata.TransactionYear = CommonMethod.TransactionYear;
                billdata.CompId = CommonMethod.CompId;
                billdata.BillStatus = 0;
                billdata.VehicleNo = txtVehicleNo.Text;
                billdata.VehicleType = txtVehicletype.Text;
                billdata.SupplyPlace = cmbState.Text;
                try
                {
                    billdata.SupplyDate = Convert.ToDateTime(dtpSupply.Value);
                }
                catch (Exception)
                { }
                billdata.Transporter = txtTransporter.Text;
                billdata.Id = BillMasterID;
                billdata.ShipCustomerId = Convert.ToInt32(cmbShipParty.SelectedValue);
                try
                {
                    billdata.PoDate = dtpPoDate.Value.Date;
                }
                catch (Exception)
                { }
                billdata.MannualDCNo = txtmannualDCNo.Text;
                if (cmbcustomername.SelectedIndex > 0)
                {
                    billdata.CatId = Convert.ToInt32(cmbGroup.SelectedValue);
                    billdata.CategoryName = cmbGroup.Text;
                }
                else
                {
                    billdata.CatId = null;
                    billdata.CategoryName = null;
                }
                billid = Convert.ToString(txtbillno.Text);
                if (!string.IsNullOrEmpty(txtTendercash.Text))
                    billdata.TenderCash = Convert.ToDecimal(txtTendercash.Text);
                else
                    billdata.TenderCash = 0;
                if (!string.IsNullOrEmpty(txtreturncash.Text))
                    billdata.ReturnCash = Convert.ToDecimal(txtreturncash.Text);
                else
                    billdata.ReturnCash = 0;
                if (txtSeriesNext.Text != "")
                    billdata.UserSeries = txtSeriesNext.Text;
                if (cmbStaffName.SelectedIndex != 0)
                    billdata.StaffId = Convert.ToInt32(cmbStaffName.SelectedValue);
                if (cmbSiteName.SelectedIndex != 0)
                    billdata.SiteId = Convert.ToInt32(cmbSiteName.SelectedValue);
                Custmasterrepo.Edit(billdata);
                Custmasterrepo.Save();
                Custmasterrepo.Dispose();
                //This method for only update Customer Data
                if (billtype == 1 || billtype == 2)
                    updateCustomerDataInRemainingPayment();
                else
                    updatefakeCustomerDataInRemainingPayment();
            }
            catch (Exception)
            { }
        }

        public void updateCustomerDataInRemainingPayment()
        {
            try
            {
                RemainingPaymentRepository payrepo = new RemainingPaymentRepository();
                RemainingPaymentRepository remainingpayrepo = new RemainingPaymentRepository();
                List<RemainingPayment> remainingdata = new List<RemainingPayment>();
                if (!string.IsNullOrEmpty(billid))
                {
                    remainingdata = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billid) && t.Type != "Receipt" && t.Type != "OpeningBalance" && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).ToList();
                    int i = 0;
                    while (remainingdata.Count > i)
                    {
                        if (Convert.ToInt32(cmbcustomername.SelectedValue) != remainingdata[i].CustomerId)
                        {
                            RemainingPaymentRepository Updateremainingpayrepo = new RemainingPaymentRepository();
                            RemainingPayment UpdateData=Updateremainingpayrepo.GetById(remainingdata[i].Id);
                            UpdateData.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                            UpdateData.Customername = cmbcustomername.Text;
                            Updateremainingpayrepo.Edit(UpdateData);
                            Updateremainingpayrepo.Save();
                            Updateremainingpayrepo.Dispose();
                        }
                        i++;
                    }
                }
                remainingpayrepo.Dispose();
                payrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void updatefakeCustomerDataInRemainingPayment()
        {
            try
            {
                FakeRemainingPaymentRepository payrepo = new FakeRemainingPaymentRepository();
                FakeRemainingPaymentRepository remainingpayrepo = new FakeRemainingPaymentRepository();
                List<FakeRemainingPayment> remainingdata = new List<FakeRemainingPayment>();
                if (!string.IsNullOrEmpty(billid))
                {
                    remainingdata = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billid) && t.Type != "Receipt" && t.Type != "OpeningBalance" && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).ToList();
                    int i = 0;
                    while (remainingdata.Count > i)
                    {
                        if (Convert.ToInt32(cmbcustomername.SelectedValue) != remainingdata[i].CustomerId)
                        {
                            RemainingPaymentRepository Updateremainingpayrepo = new RemainingPaymentRepository();
                            RemainingPayment UpdateData = Updateremainingpayrepo.GetById(remainingdata[i].Id);
                            UpdateData.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                            UpdateData.Customername = cmbcustomername.Text;
                            Updateremainingpayrepo.Edit(UpdateData);
                            Updateremainingpayrepo.Save();
                            Updateremainingpayrepo.Dispose();
                        }
                        i++;
                    }
                }
                remainingpayrepo.Dispose();
                payrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void updateremainingpayment(string mode)
        {
            //Update BillNo with total calculation of remaining amount
            try
            {
                RemainingPaymentRepository remainingpayrepo = new RemainingPaymentRepository();
                RemainingPaymentRepository payrepo = new RemainingPaymentRepository();
                var remainingpay = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billid) && t.Type == "Bill" && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                RemainingPayment paydata = new RemainingPayment();
                RemainingPaymentRepository remainingrepo = new RemainingPaymentRepository();
                if (mode == "Cheque" || mode == "Cash" || mode == "By Swipe")
                {
                    if (remainingpay == null)
                    {
                        paydata = new RemainingPayment();
                        paydata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                        paydata.Customername = Convert.ToString(cmbcustomername.Text);
                        if (txtNetAmt.Text != "")
                            paydata.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                        else
                            paydata.NetAmt = Convert.ToDecimal(txtTotalAmt.Text);
                        if (txtPaidAmt.Text != "")
                            paydata.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                        else
                            paydata.PaidAmt = 0;
                        RemainingPaymentRepository remainingpayrepo1 = new RemainingPaymentRepository();
                        RemainingPayment remainingdata1 = new RemainingPayment();
                        remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                        if (remainingdata1 != null)
                        {
                            decimal decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            if (txtRemainingAmt.Text != "")
                                paydata.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                            else
                                paydata.RemainingAmt = decremamt;
                        }
                        else
                        {
                            if (txtRemainingAmt.Text != "")
                                paydata.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                            else
                                paydata.RemainingAmt = 0;
                        }
                        paydata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                        paydata.Type = "Bill";
                        if (cmbStaffName.SelectedIndex != 0)
                            paydata.StaffId = Convert.ToInt32(cmbStaffName.SelectedValue);
                        if (cmbSiteName.SelectedIndex != 0)
                            paydata.SiteId = Convert.ToInt32(cmbSiteName.SelectedValue);
                        paydata.PaymentMode = mode;
                        if (mode == "Cheque" || mode == "By Swipe")
                        {
                            if (mode == "By Swipe")
                                paydata.Bankname = txtbankname.Text;
                            else
                            {
                                paydata.Chequedate = dtpchequedate.Value.Date;
                                paydata.Bankname = txtbankname.Text;
                                paydata.Chequeno = txtchequeno.Text;
                            }
                            try
                            {
                                BankStatementRepository BankStRepo = new BankStatementRepository();
                                RemainingPaymentRepository supprepo1 = new RemainingPaymentRepository();
                                var suppremdata = supprepo1.GetAll().Where(t => t.BillId == billid && t.Type == "Bill" && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                BankStatement bdata = new BankStatement();
                                if (suppremdata != null)
                                    bdata = BankStRepo.GetAll().Where(t => t.Bankname == cmbbank.Text && t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == suppremdata.CreateDate.Value.ToShortDateString() && t.ChequeNo == suppremdata.Chequeno && t.Deposits == Convert.ToDecimal(suppremdata.PaidAmt)).FirstOrDefault();
                                else
                                    bdata = null;
                                BankStatementRepository bankrepo = new BankStatementRepository();
                                BankStatement bankstdata = new BankStatement();
                                bankstdata.BankId = Convert.ToInt32(cmbbank.SelectedValue);
                                bankstdata.Bankname = Convert.ToString(cmbbank.Text);
                                bankstdata.TransactionDate = dtpbilldate.Value.Date;
                                bankstdata.Particulars = "Receive From" + " " + Convert.ToString(cmbcustomername.Text.Trim());
                                bankstdata.ChequeNo = Convert.ToString(txtchequeno.Text);
                                bankstdata.Deposits = Convert.ToDecimal(txtPaidAmt.Text);
                                bankstdata.Balance = 0;
                                bankstdata.CompId = CommonMethod.CompId;
                                bankstdata.TransactionType = "Bill";
                                if (bdata != null)
                                {
                                    if (bdata.Id != 0)
                                    {
                                        bankstdata.Id = bdata.Id;
                                        bankrepo.Edit(bankstdata);
                                        bankrepo.Save();
                                    }
                                    else if (bdata.Id == 0)
                                    {
                                        bankrepo.Add(bankstdata);
                                        bankrepo.Save();
                                    }
                                }
                                else if (bdata == null)
                                {
                                    bankrepo.Add(bankstdata);
                                    bankrepo.Save();
                                }
                                BankStRepo.Dispose();
                                bankrepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                        paydata.BillId = Convert.ToString(txtbillno.Text);
                        paydata.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                        paydata.TransactionYear = CommonMethod.TransactionYear;
                        if (typeofLedger == "Y")
                        {
                            if (billtype == 1)
                                paydata.Status = "Tax";
                            else if (billtype == 2)
                                paydata.Status = "Estimate";
                        }
                        else
                            paydata.Status = "";
                        paydata.CompId = CommonMethod.CompId;
                        remainingrepo.Add(paydata);
                        remainingrepo.Save();
                    }
                    else
                    {
                        if (txtNetAmt.Text != "")
                            remainingpay.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                        if (txtPaidAmt.Text != "")
                            remainingpay.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                        RemainingPaymentRepository remainingpayrepo1 = new RemainingPaymentRepository();
                        RemainingPayment remainingdata1 = new RemainingPayment();
                        remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Id < remainingpay.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                        decimal decremamt = 0;
                        if (remainingdata1 != null)
                        {
                            decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            if (txtRemainingAmt.Text != "")
                            {
                                remainingpay.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                                decremamt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                            }
                            else
                            {
                                remainingpay.RemainingAmt = decremamt;
                                decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            }
                        }
                        else
                        {
                            if (txtRemainingAmt.Text != "")
                            {
                                remainingpay.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                                decremamt = Convert.ToDecimal(txtRemainingAmt.Text);
                            }
                            else
                            {
                                remainingpay.RemainingAmt = 0;
                                decremamt = 0;
                            }
                        }
                        RemainingPaymentRepository remainingpayrepo2 = new RemainingPaymentRepository();
                        List<RemainingPayment> remainingdata2 = new List<RemainingPayment>();
                        remainingdata2 = remainingpayrepo2.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Id > remainingpay.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).ToList();
                        if (mode == "Cheque" || mode == "By Swipe")
                        {
                            if (mode == "By Swipe")
                                remainingpay.Bankname = txtbankname.Text;
                            else
                            {
                                remainingpay.Chequedate = dtpchequedate.Value.Date;
                                remainingpay.Bankname = txtbankname.Text;
                                remainingpay.Chequeno = txtchequeno.Text;
                            }
                            try
                            {
                                BankStatementRepository BankStRepo = new BankStatementRepository();
                                RemainingPaymentRepository supprepo1 = new RemainingPaymentRepository();
                                var suppremdata = supprepo1.GetAll().Where(t => t.BillId == billid && t.Type == "Bill" && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                BankStatement bdata = new BankStatement();
                                if (suppremdata != null)
                                {
                                    if (mode == "Cheque")
                                        bdata = BankStRepo.GetAll().Where(t => t.Bankname == cmbbank.Text && t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == suppremdata.CreateDate.Value.ToShortDateString() && t.ChequeNo == suppremdata.Chequeno && t.Deposits == Convert.ToDecimal(suppremdata.PaidAmt)).FirstOrDefault();
                                    else if (mode == "By Swipe")
                                        bdata = BankStRepo.GetAll().Where(t => t.Bankname == cmbbank.Text && t.CompId == CommonMethod.CompId && t.TransactionDate.Value.ToShortDateString() == suppremdata.CreateDate.Value.ToShortDateString() && t.Deposits == Convert.ToDecimal(suppremdata.PaidAmt)).FirstOrDefault();
                                }
                                else
                                    bdata = null;
                                BankStatementRepository bankrepo = new BankStatementRepository();
                                BankStatement bankstdata = new BankStatement();
                                bankstdata.BankId = Convert.ToInt32(cmbbank.SelectedValue);
                                bankstdata.Bankname = Convert.ToString(cmbbank.Text);
                                bankstdata.TransactionDate = dtpbilldate.Value.Date;
                                bankstdata.Particulars = "Receive From" + " " + Convert.ToString(cmbcustomername.Text.Trim());
                                bankstdata.ChequeNo = Convert.ToString(txtchequeno.Text);
                                bankstdata.Deposits = Convert.ToDecimal(txtPaidAmt.Text);
                                bankstdata.Balance = 0;
                                bankstdata.CompId = CommonMethod.CompId;
                                bankstdata.TransactionType = "Bill";
                                if (bdata != null)
                                {
                                    if (bdata.Id != 0)
                                    {
                                        bankstdata.Id = bdata.Id;
                                        bankrepo.Edit(bankstdata);
                                        bankrepo.Save();
                                    }
                                    else if (bdata.Id == 0)
                                    {
                                        bankrepo.Add(bankstdata);
                                        bankrepo.Save();
                                    }
                                }
                                else if (bdata == null)
                                {
                                    bankrepo.Add(bankstdata);
                                    bankrepo.Save();
                                }
                                BankStRepo.Dispose();
                                bankrepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                        remainingpay.PaymentMode = mode;
                        remainingpay.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                        remainingpay.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                        if (typeofLedger == "Y")
                        {
                            if (billtype == 1)
                                remainingpay.Status = "Tax";
                            else if (billtype == 2)
                                remainingpay.Status = "Estimate";
                        }
                        else
                            remainingpay.Status = "";
                        remainingpayrepo.Edit(remainingpay);
                        remainingpayrepo.Save();
                        int i = 0;
                        foreach (var item in remainingdata2)
                        {
                            item.RemainingAmt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                            decremamt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                            remainingpayrepo2.Edit(item);
                            remainingpayrepo2.Save();
                            i++;
                        }
                    }
                }
                remainingpayrepo.Dispose();
                payrepo.Dispose();
                remainingrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void updatefakeremainingpayment(string mode)
        {
            try
            {
                FakeRemainingPaymentRepository remainingpayrepo = new FakeRemainingPaymentRepository();
                FakeRemainingPaymentRepository payrepo = new FakeRemainingPaymentRepository();
                var remainingpay = remainingpayrepo.GetAll().Where(t => t.BillId == Convert.ToString(billid) && t.Type == "Bill" && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                FakeRemainingPayment paydata = new FakeRemainingPayment();
                FakeRemainingPaymentRepository remainingrepo = new FakeRemainingPaymentRepository();

                if (mode == "Cheque" || mode == "Cash")
                {
                    if (remainingpay == null)
                    {
                        paydata = new FakeRemainingPayment();
                        paydata.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                        paydata.Customername = Convert.ToString(cmbcustomername.Text);
                        if (txtNetAmt.Text != "")
                            paydata.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                        else
                            paydata.NetAmt = Convert.ToDecimal(txtTotalAmt.Text);
                        if (txtPaidAmt.Text != "")
                            paydata.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                        else
                            paydata.PaidAmt = 0;
                        FakeRemainingPaymentRepository remainingpayrepo1 = new FakeRemainingPaymentRepository();
                        FakeRemainingPayment remainingdata1 = new FakeRemainingPayment();
                        remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                        if (remainingdata1 != null)
                        {
                            decimal decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            if (txtRemainingAmt.Text != "")
                                paydata.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                            else
                                paydata.RemainingAmt = decremamt;
                        }
                        else
                        {
                            if (txtRemainingAmt.Text != "")
                                paydata.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                            else
                                paydata.RemainingAmt = 0;
                        }
                        paydata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                        paydata.Type = "Bill";
                        paydata.PaymentMode = mode;
                        if (mode == "Cheque")
                        {
                            paydata.Chequedate = dtpchequedate.Value.Date;
                            paydata.Bankname = txtbankname.Text;
                            paydata.Chequeno = txtchequeno.Text;
                        }
                        paydata.BillId = Convert.ToString(txtbillno.Text);
                        paydata.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                        paydata.TransactionYear = CommonMethod.TransactionYear;
                        paydata.CompId = CommonMethod.CompId;
                        remainingrepo.Add(paydata);
                        remainingrepo.Save();
                    }
                    else
                    {
                        if (txtNetAmt.Text != "")
                            remainingpay.NetAmt = Convert.ToDecimal(txtNetAmt.Text);
                        if (txtPaidAmt.Text != "")
                            remainingpay.PaidAmt = Convert.ToDecimal(txtPaidAmt.Text);
                        FakeRemainingPaymentRepository remainingpayrepo1 = new FakeRemainingPaymentRepository();
                        FakeRemainingPayment remainingdata1 = new FakeRemainingPayment();
                        remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Id < remainingpay.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                        decimal decremamt = 0;
                        if (remainingdata1 != null)
                        {
                            decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            if (txtRemainingAmt.Text != "")
                            {
                                remainingpay.RemainingAmt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                                decremamt = decremamt + Convert.ToDecimal(txtRemainingAmt.Text);
                            }
                            else
                            {
                                remainingpay.RemainingAmt = decremamt;
                                decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                            }
                        }
                        else
                        {
                            if (txtRemainingAmt.Text != "")
                            {
                                remainingpay.RemainingAmt = Convert.ToDecimal(txtRemainingAmt.Text);
                                decremamt = Convert.ToDecimal(txtRemainingAmt.Text);
                            }
                            else
                            {
                                remainingpay.RemainingAmt = 0;
                                decremamt = 0;
                            }
                        }
                        FakeRemainingPaymentRepository remainingpayrepo2 = new FakeRemainingPaymentRepository();
                        List<FakeRemainingPayment> remainingdata2 = new List<FakeRemainingPayment>();
                        remainingdata2 = remainingpayrepo2.GetAll().Where(t => t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Id > remainingpay.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).ToList();
                        if (mode == "Cheque")
                        {
                            remainingpay.Chequedate = dtpchequedate.Value.Date;
                            remainingpay.Bankname = txtbankname.Text;
                            remainingpay.Chequeno = txtchequeno.Text;
                        }
                        remainingpay.PaymentMode = mode;
                        paydata.CreateDate = Convert.ToDateTime(dtpbilldate.Value);
                        paydata.BillDate = Convert.ToDateTime(dtpbilldate.Value);
                        remainingpayrepo.Edit(remainingpay);
                        remainingpayrepo.Save();
                        int i = 0;
                        foreach (var item in remainingdata2)
                        {
                            item.RemainingAmt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                            decremamt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                            remainingpayrepo2.Edit(item);
                            remainingpayrepo2.Save();
                            i++;
                        }
                    }
                }
                remainingpayrepo.Dispose();
                payrepo.Dispose();
                remainingrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void SendSMSMannual(string billno, decimal netAmount)
        {
            try
            {
                bool connection = NetworkInterface.GetIsNetworkAvailable();
                if (connection == true)
                {
                    if (SetDataM.SendSMS == "True")
                    {
                        CustomerBillMasterRepository cMastRepo = new CustomerBillMasterRepository();
                        CompanyInformationRepository compRepo = new CompanyInformationRepository();
                        CompanyInformation compData = compRepo.GetAll().Where(t => t.CompanyId == CommonMethod.CompId).FirstOrDefault();
                        CustomerRepository custRepo = new CustomerRepository();
                        var customerDetails = cMastRepo.GetAll().Where(t => t.BillNo == billno && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                        string mobileno = custRepo.GetAll().Where(t => t.CustomerID == customerDetails.CustomerId && t.CustomerName == customerDetails.CustomerName && t.CompId == CommonMethod.CompId).FirstOrDefault().Mobileno;
                        string smsText = "";
                        if (SetDataM.MarathiSMS == "True")
                            smsText = compData.CompanyName + " मध्ये आपले स्वागत आहे.तुमचा बिल नं " + billno + " आणि तुमची बिलाची रक्कम " + netAmount + " आहे .पुन्हा अवश्य भेट द्या...धन्यवाद.";
                        else
                            smsText = "Welcome to " + compData.CompanyName + ". Your Bill No is " + billno + " and Your net amount is " + netAmount + "." + Environment.NewLine + "Please Visit Again...Thank You!!";
                        string MobNo = mobileno;
                        WebClient client = new WebClient();
                        string URL = "";
                        SMSRepository smsRepo = new SMSRepository();
                        SendSM smsData = new SendSM();
                        smsData.CompId = CommonMethod.CompId;
                        try
                        {
                            if (!string.IsNullOrEmpty(MobNo))
                            {
                                if (System.Text.RegularExpressions.Regex.IsMatch(MobNo, "[^0-9]"))
                                {
                                    smsData.Status = "Mobile not valid For for Mannual SMS";
                                    smsRepo.Add(smsData);
                                    smsRepo.Save();
                                }
                                else if (MobNo.Length == 10)
                                {
                                    string SmsStatusMsg = string.Empty;
                                    //  return SmsStatusMsg;
                                    smsData.CustomerId = Convert.ToInt32(cmbcustomername.SelectedValue);
                                    smsData.CustomerName = cmbcustomername.Text;
                                    smsData.MobileNo = mobileno;
                                    smsData.SmsText = smsText;
                                    smsData.SmsDate = DateTime.Now.Date;
                                    smsData.BillNo = billno;
                                    URL = SetDataM.SMSURLPath + SetDataM.SMSUserId + "&pass=" + SetDataM.SMSPassword + "&sender=" + SetDataM.SMSKey + "&phone=" + MobNo + "&text=" + smsText + "&priority=ndnd&stype=normal";
                                    string result = apicall(URL);
                                    if (result.Contains("Username/Password Incorrect") == true)
                                    {
                                        smsData.Status = "Wrong User Name or Password For Mannual SMS";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                    }
                                    else if (result.Contains("Sender ID Does not Exist") == true)
                                    {
                                        smsData.Status = "Sender ID Does not Exist For Mannual SMS";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                    }
                                    else
                                    {
                                        smsData.Status = "Mannual SMS";
                                        smsRepo.Add(smsData);
                                        smsRepo.Save();
                                        MessageBox.Show("SMS Send Successfully.", "Success");
                                    }
                                }
                                else
                                {
                                    smsData.Status = "Mobile no not valid for Mannual SMS";
                                    smsRepo.Add(smsData);
                                    smsRepo.Save();
                                }
                            }
                            else
                            {
                                smsData.Status = "Mobile dose not exsist For Mannual SMS";
                                smsRepo.Add(smsData);
                                smsRepo.Save();
                            }
                        }
                        catch (Exception)
                        {
                            smsData.Status = "Send Option is Auto but customer dose not have mobile no!!";
                            smsRepo.Add(smsData);
                            smsRepo.Save();
                        }
                        cMastRepo.Dispose();
                        compRepo.Dispose();
                        custRepo.Dispose();
                        smsRepo.Dispose();
                    }
                }
                else
                    MessageBox.Show("Internet connection in not available");
            }
            catch (Exception)
            { }
        }

        public void AvgRate()
        {
            try
            {
                if (txtProductname.Text != "")
                {
                    string newpname = "";
                    if ((txtProductname.Text).Contains("'"))
                        newpname = txtProductname.Text.Replace("'", "''");
                    else
                        newpname = txtProductname.Text.Trim();
                    string proname = newpname.Split(',')[0];
                    string company = newpname.Split(',')[1];
                    string unit = newpname.Split(',')[2];
                    SqlDataAdapter da = null;
                    if (CommonMethod.commProduct == null)
                        da = new SqlDataAdapter("SELECT cast(case when d.Unit=d.PurchaseUnit or d.PurchaseUnit is null then d.PurchasePrice else (d.PurchasePrice/(Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit)) end as Decimal(18,2)) as 'Price', d.Discount as 'Disc', m.Vat, cast(case when d.Unit=d.PurchaseUnit or d.PurchaseUnit is null then (d.TotalAmount/d.Quantity)+(d.TotalAmount/d.Quantity)*(m.Vat/100) else  ((d.TotalAmount/(d.Quantity/((Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit)/(Select AlternateUnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit))))+ (d.TotalAmount/(d.Quantity/((Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit)/(Select AlternateUnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit)))*(m.Vat/100)))/(Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit) end as decimal(18,2)) as 'TotalAmount' ,d.Unit FROM PurchaseDetail as d inner join PurchaseMaster as m on m.Id=d.PorderNo  where  ProductName='" + proname + "' and CompanyName='" + company + "' and Unit='" + unit + "' and m.Suppliername<>'First stock' and m.CompId=" + CommonMethod.CompId + " ORDER BY d.Id DESC ", db.Connection);
                    else
                        da = new SqlDataAdapter("SELECT cast(case when d.Unit=d.PurchaseUnit or d.PurchaseUnit is null then d.PurchasePrice else (d.PurchasePrice/(Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + ")) end as Decimal(18,2)) as 'Price', d.Discount as 'Disc', m.Vat, cast(case when d.Unit=d.PurchaseUnit or d.PurchaseUnit is null then (d.TotalAmount/d.Quantity)+(d.TotalAmount/d.Quantity)*(m.Vat/100) else  ((d.TotalAmount/(d.Quantity/((Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + ")/(Select AlternateUnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + "))))+ (d.TotalAmount/(d.Quantity/((Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + ")/(Select AlternateUnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + ")))*(m.Vat/100)))/(Select UnitQty from ProductInformation where ProductName=d.ProductName and ManufactureCompany=d.CompanyName and Uniti=d.Unit and compid=" + CommonMethod.CompId + ") end as decimal(18,2)) as 'TotalAmount' ,d.Unit FROM PurchaseDetail as d inner join PurchaseMaster as m on m.Id=d.PorderNo  where  ProductName='" + proname + "' and CompanyName='" + company + "' and Unit='" + unit + "' and m.Suppliername<>'First stock' and m.CompId=" + CommonMethod.CompId + " ORDER BY d.Id DESC ", db.Connection);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    int gvrowcount = dt.Rows.Count;
                    decimal avg = Convert.ToDecimal(dt.Compute("Sum(TotalAmount)", "")) / gvrowcount;
                    gvprepurchasedata.DataSource = dt;
                    gvprepurchasedata.Refresh();
                    if (gvprepurchasedata.Rows.Count != 0)
                    {
                        gvprepurchasedata.Columns[0].Width = 80;
                        gvprepurchasedata.Columns[1].Width = 45;
                        gvprepurchasedata.Columns[2].Width = 45;
                        gvprepurchasedata.Columns[3].Width = 80;
                        gvprepurchasedata.Columns[4].Width = 80;
                    }
                    lblavgrate.Text = "AvgRate:" + Convert.ToString(Math.Round(avg, 2, MidpointRounding.AwayFromZero));
                    da.Dispose();
                    dt.Dispose();
                }
            }
            catch (Exception)
            { }
        }

        public void RoundOff(decimal netamt)
        {
            try
            {
                decimal b = Math.Round(netamt);
                if (netamt > b)
                    txtRoundOff.Text = "-" + (netamt - b).ToString();
                else
                    txtRoundOff.Text = (b - netamt).ToString();
                txtNetAmt.Text = Convert.ToString(Math.Round((Convert.ToDecimal(netamt) + Convert.ToDecimal(txtRoundOff.Text)), 2, MidpointRounding.AwayFromZero));
            }
            catch (Exception)
            { }
        }

        public void CalculateNetAmt()
        {
            try
            {
                decimal d, v, h, t, total, damt = 0, vamt = 0, netamt, prvBonus = 0, currbonus = 0, toatlBonus = 0, AlltotalAmount = 0;
                total = Convert.ToDecimal(txtTotalAmt.Text);
                if (txtDiscount.Text != "")
                {
                    d = Convert.ToDecimal(Math.Round(Convert.ToDecimal(txtDiscount.Text), 5, MidpointRounding.AwayFromZero));
                    damt = (total * d) / 100;
                    txtDiscAmt.Text = Convert.ToString(Math.Round(damt, 2, MidpointRounding.AwayFromZero));
                }
                if (vat5amt == 0 && vat12amt == 0)
                {
                    if (txtVat.Text != "")
                        v = Convert.ToDecimal(txtVat.Text);
                    else
                        v = 0;
                    vamt = ((total - damt) * v) / 100;
                    lblvat.Text = Convert.ToString(Math.Round(vamt, 2, MidpointRounding.AwayFromZero));
                }
                if (txthmchrg.Text != "")
                    h = Convert.ToDecimal(txthmchrg.Text);
                else
                    h = 0;
                if (txttrchrg.Text != "")
                    t = Convert.ToDecimal(txttrchrg.Text);
                else
                    t = 0;
                netamt = total - Math.Round(damt, 2, MidpointRounding.AwayFromZero) + Math.Round(vamt, 2, MidpointRounding.AwayFromZero) + h + t;
                txtNetAmt.Text = Convert.ToString(netamt);
                if (rdoff == 1)
                    RoundOff(netamt);
                if (bonusStatus != null)
                {
                    DataTable dt = new DataTable();
                    if (ShowBonus == true)
                    {
                        dt = (new DbClass()).GetTable("SELECT TOP(1) cb.RemainingAmt as RemainingAmt from dbo.CustomerBonus cb inner join CustomerInformation c on c.Id=cb.CustomerId where  c.CustomerID=" + Convert.ToInt32(cmbcustomername.SelectedValue) + " and cb.TransactionYear='" + CommonMethod.TransactionYear + "' and cb.compId=" + CommonMethod.CompId + " order by cb.Id desc");
                        if (dt.Rows.Count > 0)
                        {
                            try
                            {
                                if (dt.Rows[0]["RemainingAmt"] != null && dt.Rows[0]["RemainingAmt"].ToString() != "")
                                    AlltotalAmount = Convert.ToDecimal(dt.Rows[0]["RemainingAmt"].ToString());
                            }
                            catch (Exception)
                            { AlltotalAmount = 0; }
                        }
                        else
                            AlltotalAmount = 0;
                    }
                    else if (ShowBonus == false)
                    {
                        decimal currAmt = 0;
                        dt = (new DbClass()).GetTable("SELECT TOP(1) cb.RemainingAmt as RemainingAmt from dbo.CustomerBonus cb inner join CustomerInformation c on c.Id=cb.CustomerId where  c.CustomerID=" + Convert.ToInt32(cmbcustomername.SelectedValue) + " and cb.TransactionYear='" + CommonMethod.TransactionYear + "' and cb.compId=" + CommonMethod.CompId + " order by cb.Id desc");
                        if (dt.Rows.Count > 0)
                        {
                            try
                            {
                                if (dt.Rows[0]["RemainingAmt"] != null && dt.Rows[0]["RemainingAmt"].ToString() != "")
                                    AlltotalAmount = Convert.ToDecimal(dt.Rows[0]["RemainingAmt"].ToString());
                            }
                            catch (Exception)
                            { AlltotalAmount = 0; }
                        }
                        else
                            AlltotalAmount = 0;
                        DataTable dt1 = (new DbClass()).GetTable("SELECT TotalBonusAmount from dbo.CustomerBonus cb inner join CustomerInformation c on c.Id=cb.CustomerId where cb.BillId=" + BillMasterID + " and c.CustomerID=" + Convert.ToInt32(cmbcustomername.SelectedValue) + " and cb.TransactionYear='" + CommonMethod.TransactionYear + "' and cb.compId=" + CommonMethod.CompId + " order by cb.Id desc");
                        if (AlltotalAmount != 0)
                        {
                            if (dt1.Rows.Count > 0)
                            {
                                try
                                {
                                    if (dt1.Rows[0]["TotalBonusAmount"] != null && dt1.Rows[0]["TotalBonusAmount"].ToString() != "")
                                        currAmt = Convert.ToDecimal(dt1.Rows[0]["TotalBonusAmount"].ToString());
                                }
                                catch (Exception)
                                { currAmt = 0; }
                                AlltotalAmount = AlltotalAmount - currAmt;
                            }
                            else
                                currAmt = 0;
                        }
                    }
                    if (bonusStatus == "Bonus In Rs")
                        currbonus = bonusInRs;
                    else if (bonusStatus == "Bonus In Per")
                        currbonus = (Convert.ToDecimal(netamt) * bonusInPer / 100);
                    prvBonus = AlltotalAmount;
                    toatlBonus = prvBonus + currbonus;
                    lblCurrBonus.Text = Convert.ToString(Math.Round(currbonus, 2, MidpointRounding.AwayFromZero));
                    lblTotalBonus.Text = Convert.ToString(Math.Round(toatlBonus, 2, MidpointRounding.AwayFromZero));
                    lblPrvBonus.Text = Convert.ToString(Math.Round(prvBonus, 2, MidpointRounding.AwayFromZero));
                }
            }
            catch (Exception)
            { }
        }

        public void getGstCalculation(bool ThroughDc = false)
        {
            if (ThroughDc == false)
            {
                decimal d = 0, damt = 0, SGAmt = 0, CGAmt = 0, IGAmt = 0, TaxableAmt = 0, CalculatedAmt = 0, sgstpercent = 0, cgstpercent = 0, Igstpercent = 0, SpcDiscAmt = 0, Cessamt = 0;
                try
                {
                    if (txtQuantity.Text != "" && txtrate.Text != "")
                    {
                        sgstpercent = Convert.ToDecimal(cmbsgst.Text);
                        cgstpercent = Convert.ToDecimal(cmbcgst.Text);
                        Igstpercent = Convert.ToDecimal(cmbigst.Text);
                        if (taxinclude == "True")
                        {
                            decimal basicrate = 0;
                            basicrate = Convert.ToDecimal(txtrate.Text) * 100 / (100 + (cgstpercent + sgstpercent + Igstpercent));
                            if (SetDataM != null || SetDataM.RateDecimalPlaces != null)
                            {
                                lblBasicRate.Text = Convert.ToString(Math.Round(basicrate, Convert.ToInt32(SetDataM.RateDecimalPlaces), MidpointRounding.AwayFromZero));
                                if (SetDataM.RateDecimalPlaces == 2)
                                    CalculatedAmt = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(lblBasicRate.Text);
                                else
                                    CalculatedAmt = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(txtrate.Text);
                            }
                            else
                                CalculatedAmt = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(txtrate.Text);
                            txtAmount.Text = Convert.ToString(Math.Round(CalculatedAmt, 2, MidpointRounding.AwayFromZero));
                            TaxableAmt = basicrate * Convert.ToDecimal(txtQuantity.Text);
                            if (flgdiscountchange == true)
                            {
                                decimal discount = 0;
                                discount = Convert.ToDecimal(txtpdisAmt.Text) / Convert.ToDecimal(TaxableAmt) * 100;
                                damt = Convert.ToDecimal(txtpdisAmt.Text);
                                txtpdiscount.Text = Convert.ToString(Math.Round(discount, 5, MidpointRounding.AwayFromZero));
                                TaxableAmt = (TaxableAmt - Convert.ToDecimal(txtpdisAmt.Text));
                            }
                            else
                            {
                                if (txtpdiscount.Text != "")
                                {
                                    damt = (TaxableAmt * Convert.ToDecimal(txtpdiscount.Text) / 100);
                                    txtpdisAmt.Text = Convert.ToString(Math.Round(damt, 2, MidpointRounding.AwayFromZero));
                                    TaxableAmt = (TaxableAmt - damt);
                                }
                            }
                            if (txtpSpcDisc.Text != "")
                            {
                                SpcDiscAmt = (TaxableAmt * Convert.ToDecimal(txtpSpcDisc.Text) / 100);
                                lblpSpcDisc.Text = Convert.ToString(Math.Round(SpcDiscAmt, 5, MidpointRounding.AwayFromZero));
                                TaxableAmt = (TaxableAmt - SpcDiscAmt);
                            }
                            txtTaxableamt.Text = Convert.ToString(Math.Round(TaxableAmt, 2, MidpointRounding.AwayFromZero));
                            if (cmbsgst.Text != "")
                            {
                                SGAmt = (TaxableAmt * Convert.ToDecimal(cmbsgst.Text) / 100);
                                lblpvat.Text = Convert.ToString(Math.Round(SGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (cmbcgst.Text != "")
                            {
                                CGAmt = (TaxableAmt * Convert.ToDecimal(cmbcgst.Text) / 100);
                                lblCGST.Text = Convert.ToString(Math.Round(CGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (cmbigst.Text != "")
                            {
                                IGAmt = (TaxableAmt * Convert.ToDecimal(cmbigst.Text) / 100);
                                lblIGST.Text = Convert.ToString(Math.Round(IGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (txtpCess.Text != "")
                            {
                                Cessamt = (TaxableAmt * Convert.ToDecimal(txtpCess.Text) / 100);
                                lblpCessamt.Text = Convert.ToString(Math.Round(Cessamt, 2, MidpointRounding.AwayFromZero));
                            }
                            TaxableAmt = TaxableAmt + SGAmt + CGAmt + IGAmt + Cessamt;
                            txtpTotalAmt.Text = Convert.ToString(Math.Round(TaxableAmt, 2, MidpointRounding.AwayFromZero));
                        }
                        else
                        {
                            TaxableAmt = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(txtrate.Text);
                            if (flgdiscountchange == true)
                            {
                                decimal discount = 0;
                                discount = Convert.ToDecimal(txtpdisAmt.Text) / Convert.ToDecimal(TaxableAmt) * 100;
                                damt = Convert.ToDecimal(txtpdisAmt.Text);
                                txtpdiscount.Text = Convert.ToString(Math.Round(discount, 5, MidpointRounding.AwayFromZero));
                                txtpTotalAmt.Text = Convert.ToString(Math.Round(TaxableAmt - Convert.ToDecimal(txtpdisAmt.Text), 2, MidpointRounding.AwayFromZero));
                            }
                            else
                            {
                                if (txtpdiscount.Text != "")
                                {
                                    d = Convert.ToDecimal(txtpdiscount.Text);
                                    damt = (TaxableAmt * d) / 100;
                                    txtpdisAmt.Text = Convert.ToString(Math.Round(damt, 2, MidpointRounding.AwayFromZero));
                                    txtpTotalAmt.Text = Convert.ToString(Math.Round(TaxableAmt - damt, 2, MidpointRounding.AwayFromZero));
                                }
                            }
                            if (txtpSpcDisc.Text != "")
                            {
                                SpcDiscAmt = ((TaxableAmt - damt) * Convert.ToDecimal(txtpSpcDisc.Text)) / 100;
                                lblpSpcDisc.Text = Convert.ToString(Math.Round(SpcDiscAmt, 5, MidpointRounding.AwayFromZero));
                                txtpTotalAmt.Text = Convert.ToString(Math.Round(TaxableAmt - damt - SpcDiscAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            TaxableAmt = Convert.ToDecimal(txtpTotalAmt.Text);
                            txtTaxableamt.Text = txtpTotalAmt.Text;
                            lblIGST.Text = "0";
                            if (cmbsgst.Text != "")
                            {
                                SGAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(cmbsgst.Text)) / 100;
                                lblpvat.Text = Convert.ToString(Math.Round(SGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (cmbcgst.Text != "")
                            {
                                CGAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(cmbcgst.Text)) / 100;
                                lblCGST.Text = Convert.ToString(Math.Round(CGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (cmbigst.Text != "")
                            {
                                IGAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(cmbigst.Text)) / 100;
                                lblIGST.Text = Convert.ToString(Math.Round(IGAmt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (txtpCess.Text != "")
                            {
                                Cessamt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(txtpCess.Text)) / 100;
                                lblpCessamt.Text = Convert.ToString(Math.Round(Cessamt, 2, MidpointRounding.AwayFromZero));
                            }
                            TaxableAmt = TaxableAmt + SGAmt + CGAmt + IGAmt + Cessamt;
                            txtpTotalAmt.Text = Convert.ToString(Math.Round(TaxableAmt, 2, MidpointRounding.AwayFromZero));
                            decimal basicrate = 0;
                            basicrate = Convert.ToDecimal(txtrate.Text);
                            if (SetDataM != null || SetDataM.RateDecimalPlaces != null)
                                lblBasicRate.Text = Convert.ToString(Math.Round(basicrate, Convert.ToInt32(SetDataM.RateDecimalPlaces), MidpointRounding.AwayFromZero));
                            else
                                lblBasicRate.Text = Convert.ToString(Math.Round(basicrate, 3, MidpointRounding.AwayFromZero));
                        }
                    }
                }
                catch (Exception)
                { }
            }
            else
            {
                pbasicrate = 0;
                try
                {
                    decimal d = 0;
                    decimal SGAmt = 0, CGAmt = 0, IGAmt = 0, TaxableAmt = 0, CalculatedAmt = 0, spcDiscAmt = 0, CessAmt = 0;
                    if (taxinclude == "True")
                    {
                        decimal basicrate = 0;
                        basicrate = Convert.ToDecimal(pRate) * 100 / (100 + (pCgstpercent + pSgstpercent + pIgstpercent));
                        pbasicrate = Math.Round(basicrate, 2, MidpointRounding.AwayFromZero);
                        if (SetDataM != null)
                        {
                            if (SetDataM.RateDecimalPlaces == 2)
                                CalculatedAmt = Convert.ToDecimal(pQuantity) * Convert.ToDecimal(basicrate);
                            else
                                CalculatedAmt = Convert.ToDecimal(pQuantity) * Convert.ToDecimal(pRate);
                        }
                        else
                            CalculatedAmt = Convert.ToDecimal(pQuantity) * Convert.ToDecimal(pRate);
                        TaxableAmt = basicrate * Convert.ToDecimal(pQuantity);
                        if (pDisc != 0)
                        {
                            pdiscamt = (TaxableAmt * Convert.ToDecimal(pDisc) / 100);
                            pdiscamt = Math.Round(pdiscamt, 2, MidpointRounding.AwayFromZero);
                            TaxableAmt = (TaxableAmt - pdiscamt);
                        }
                        if (txtpSpcDisc.Text != "")
                        {
                            spcDiscAmt = (TaxableAmt * Convert.ToDecimal(txtpSpcDisc.Text) / 100);
                            lblpSpcDisc.Text = Convert.ToString(Math.Round(pdiscamt, 5, MidpointRounding.AwayFromZero));
                            TaxableAmt = (TaxableAmt - spcDiscAmt);
                        }
                        if (cmbsgst.Text != "")
                        {
                            SGAmt = (TaxableAmt * Convert.ToDecimal(pSgstpercent) / 100);
                            pSgstamt = Math.Round(SGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (cmbcgst.Text != "")
                        {
                            CGAmt = (TaxableAmt * Convert.ToDecimal(pCgstpercent) / 100);
                            pCgstamt = Math.Round(CGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (cmbigst.Text != "")
                        {
                            IGAmt = (TaxableAmt * Convert.ToDecimal(pIgstpercent) / 100);
                            pIgstamt = Math.Round(IGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (txtpCess.Text != "")
                        {
                            CessAmt = (TaxableAmt * Convert.ToDecimal(txtpCess.Text) / 100);
                            lblpCessamt.Text = Convert.ToString(Math.Round(IGAmt, 2, MidpointRounding.AwayFromZero));
                        }
                        TaxableAmt = TaxableAmt + SGAmt + CGAmt + IGAmt + CessAmt;
                        ptotalamt = Math.Round(TaxableAmt, 2, MidpointRounding.AwayFromZero);
                    }
                    else
                    {
                        TaxableAmt = Convert.ToDecimal(pQuantity) * Convert.ToDecimal(pRate);
                        if (pDisc != 0)
                        {
                            d = Convert.ToDecimal(pDisc);
                            pdiscamt = (TaxableAmt * d) / 100;
                            pdiscamt = Math.Round(pdiscamt, 2, MidpointRounding.AwayFromZero);
                            ptotalamt = Math.Round(TaxableAmt - pdiscamt, 2, MidpointRounding.AwayFromZero);
                            TaxableAmt = ptotalamt;
                        }
                        if (txtpSpcDisc.Text != "")
                        {
                            spcDiscAmt = (TaxableAmt * Convert.ToDecimal(txtpSpcDisc.Text)) / 100;
                            lblpSpcDisc.Text = Convert.ToString(Math.Round(spcDiscAmt, 5, MidpointRounding.AwayFromZero));
                            ptotalamt = Math.Round(TaxableAmt - spcDiscAmt, 2, MidpointRounding.AwayFromZero);
                            TaxableAmt = ptotalamt;
                        }
                        lblIGST.Text = "0";
                        if (pSgstpercent != 0)
                        {
                            SGAmt = (Convert.ToDecimal(TaxableAmt) * pSgstpercent) / 100;
                            pSgstamt = Math.Round(SGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (pCgstpercent != 0)
                        {
                            CGAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(pCgstpercent)) / 100;
                            pCgstamt = Math.Round(CGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (pIgstpercent != 0)
                        {
                            IGAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(pIgstpercent)) / 100;
                            pIgstamt = Math.Round(IGAmt, 2, MidpointRounding.AwayFromZero);
                        }
                        if (txtpCess.Text != "")
                        {
                            CessAmt = (Convert.ToDecimal(TaxableAmt) * Convert.ToDecimal(txtpCess.Text)) / 100;
                            lblpCessamt.Text = Convert.ToString(Math.Round(CessAmt, 2, MidpointRounding.AwayFromZero));
                        }
                        TaxableAmt = TaxableAmt + SGAmt + CGAmt + IGAmt + CessAmt;
                        ptotalamt = Math.Round(TaxableAmt, 2, MidpointRounding.AwayFromZero);
                        decimal basicrate = 0;
                        basicrate = Convert.ToDecimal(pRate);
                    }
                }
                catch (Exception)
                { }
            }
        }

        private void fillProductSubtitles()
        {
            string pname = txtProductname.Text.Trim().Split(',')[0];
            string cnString1 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
            using (SqlConnection con = new SqlConnection(cnString1))
            {
                SqlCommand cmd = new SqlCommand("Select distinct cb.prodsubtitle from CustomerBillDetail as cb join customerbillmaster as cm on cb.BillNo=cm.Id where customerid='" + cmbcustomername.SelectedValue + "' and ProductId ='" + pname + "' and prodsubtitle is not null", con);
                con.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                AutoCompleteStringCollection mycollection = new AutoCompleteStringCollection();
                while (reader.Read())
                {
                    try
                    {
                        mycollection.Add(reader.GetString(0));
                    }
                    catch (Exception)
                    { }
                }
                txtSubtitle.AutoCompleteCustomSource = mycollection;
                if (subtitlestring != "")
                    txtSubtitle.Text = subtitlestring;
                reader.Dispose();
                con.Close();
            }
        }

        private void SaveCustomerBill()
        {
            try
            {
                maxbillidtype(billtype);
                CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                var BillId = Custmasterrepo.GetAll().Where(t => t.BillNo == Convert.ToString(txtbillno.Text) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                Custmasterrepo.Dispose();
                if (BillId != null)
                {
                    MessageBox.Show("Already Saved This Record.", "Warning");
                    this.ActiveControl = btnnew;
                }
                else
                {
                    if (cmbcustomername.Text != "Select" && GvProductInfo.Rows.Count != 0)
                    {
                        if (txtPaidAmt.Text != "0" || (txtPaidAmt.Text == "0" && txtRemainingAmt.Text != "0"))
                        {
                            if (chkcheque.Checked == true || chkBySwipe.Checked == true)
                            {
                                if (cmbbank.Text != "Select" || txtchequeno.Text != "" || dtpchequedate.Text != currentdate || txtbankname.Text != "")
                                {
                                    if (billtype == 1 || billtype == 2 && Convert.ToDecimal(txtVat.Text) == 0 || billtype == 3)
                                        savemaster();
                                    else
                                        goto v;
                                    bool isValidProduct = true;
                                    for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                                    {
                                        try
                                        {
                                            string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value), product = "";
                                            string[] strtext = prodsubtitle.Split(',');
                                            if (strtext.Length == 2)
                                            {
                                                prodsubtitle = strtext[0];
                                                product = strtext[1];
                                            }
                                            else
                                            {
                                                prodsubtitle = "";
                                                product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            }
                                            ProductRepository ProdRepo = new ProductRepository();
                                            ProductInformation ProdData = new ProductInformation();
                                            if (CommonMethod.commProduct == true)
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value)).FirstOrDefault();
                                            else
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (ProdData != null)
                                            {
                                                if (!string.IsNullOrEmpty(ProdData.Formulae))
                                                    prodsubtitle = txtSubtitle.Text;
                                                if (ProdData.ProductType == 0 && ProdData.WithBatchAndExpiry == "N" && ProdData.WithBatch == "N")
                                                    productentrytype = 0;
                                                else if (ProdData.ProductType == 0 && ProdData.WithBatchAndExpiry == "Y") //krushi with batch and expiry
                                                    productentrytype = 1;
                                                else if (ProdData.ProductType == 0 && ProdData.WithBatch == "Y") //krushi with batch and expiry
                                                    productentrytype = 2;
                                            }
                                            ProdRepo.Dispose();
                                            if (productentrytype == 1 || productentrytype == 2)
                                            {
                                                if (Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) == "")
                                                {
                                                    MessageBox.Show("Please Enter Batch No For Product: " + product, "Warning");
                                                    isValidProduct = false;
                                                }
                                            }
                                            if (isValidProduct == true)
                                            {
                                                db.connect();
                                                SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                                command.CommandType = CommandType.StoredProcedure;

                                                command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                                command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                                command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                                command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                                command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                                command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;//Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                                command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                                command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                                command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                                command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                                command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                                command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                                command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                                command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                                command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                                command.Parameters.Add("@Vat", SqlDbType.Decimal).Value = 0;
                                                command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                                command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                                command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                                command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                                command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                                command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                                command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                                command.Parameters.Add("@HSNcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                                command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                                command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                                command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                                command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                                command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                                command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                                command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                                command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                                command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                                if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                    command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                                else
                                                    command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                                command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                                command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                                command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                                command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                                command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                                command.ExecuteNonQuery();
                                                db.CloseConnection();
                                            }
                                            else
                                            {
                                                db.CloseConnection();
                                                break;
                                            }
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }

                                    //start of DeliveryChallan table entry code
                                    if (fakebillno != null && isValidProduct == true)
                                    {
                                        CustomerBillMasterRepository custmastrepo = new CustomerBillMasterRepository();
                                        CustomerBillMaster masterdata = custmastrepo.GetAll().Where(t => t.BillNo == Convert.ToString(fakebillno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        masterdata.BillStatus = 1;
                                        custmastrepo.Edit(masterdata);
                                        custmastrepo.Save();
                                        custmastrepo.Dispose();
                                    }
                                    if (lbldcno.Text != "" && isValidProduct == true)
                                    {
                                        DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                        DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                        DeliveryChallanMaster dcmaster = DCRepo.GetById(DCId);
                                        dcmaster.Status = 0;
                                        DCRepo.Edit(dcmaster);
                                        DCRepo.Save();
                                        DCRepo.Dispose();
                                    }
                                    //end of DeliveryChallan table entry code
                                    //start of Orderbooking table entry code
                                    if (OrderNo != 0 && isValidProduct == true)
                                    {
                                        OrderbookingRepository orderrepo = new OrderbookingRepository();
                                        OrderBook orderdata = orderrepo.GetById(Convert.ToInt32(OrderNo));
                                        orderdata.status = "0";
                                        orderrepo.Edit(orderdata);
                                        orderrepo.Save();
                                        orderrepo.Dispose();
                                    }
                                    //end of Orderbooking table entry code
                                    //start of QuotationMaster table entry code
                                    if (lblqno.Text != null && isValidProduct == true)
                                    {
                                        try
                                        {
                                            QuotationMasterRepository qmasterrepo = new QuotationMasterRepository();
                                            QuotationMaster masterdata = qmasterrepo.GetById(QuotationId);
                                            masterdata.Status = 0;
                                            qmasterrepo.Edit(masterdata);
                                            qmasterrepo.Save();
                                            qmasterrepo.Dispose();
                                        }
                                        catch (Exception)
                                        { }
                                    }
                                    //end of QuotationMaster table entry code
                                    //start of DeliveryChallan table entry code
                                    if (DCNoList != null && isValidProduct == true)
                                    {
                                        try
                                        {
                                            for (int j = 0; j < DCNoList.Count; j++)
                                            {
                                                DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                                DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                                DeliveryChallanMaster dcmaster = DCRepo.GetById(DCNoList[j]);
                                                dcmaster.Status = 0;
                                                DCRepo.Edit(dcmaster);
                                                DCRepo.Save();
                                                DCRepo.Dispose();
                                            }
                                        }
                                        catch (Exception)
                                        { }
                                    }
                                    //end of DeliveryChallan table entry code
                                    //RemainingPayment table entry code
                                    string mode1 = "";
                                    if (chkBySwipe.Checked == true)
                                        mode1 = "By Swipe";
                                    else if (chkcheque.Checked == true)
                                        mode1 = "Cheque";
                                    if (isValidProduct == true)
                                    {
                                        if (billtype == 1 || billtype == 2)
                                            saveremainingpayment(mode1);
                                        else
                                            savefakebillremainingpayment(mode1);
                                        if (SetDataM != null)
                                        {
                                            if (Convert.ToString(SetDataM.TaxInvoicePrintOn) != "Thermal")
                                                MessageBox.Show("Invoice saved.", "Success");
                                        }
                                        if (lblCurrBonus.Text != "" && bonusStatus != null)
                                            SaveBonus(BillMasterID);
                                        if (SetDataM.SendSMS == "True")
                                            SendSMS(billid, Convert.ToDecimal(txtNetAmt.Text));
                                        DeleteDuplicateBatchRecords();
                                        chkcheque.Checked = false;
                                        GvProductInfo.Rows.Clear();
                                        clear();
                                        this.ActiveControl = btnnew;
                                    }
                                }
                                else
                                {
                                    if (txtbankname.Text == "")
                                    {
                                        MessageBox.Show("Enter Bank Name.", "Warning");
                                        this.ActiveControl = txtbankname;
                                    }
                                    else if (cmbbank.Text == "Select")
                                    {
                                        MessageBox.Show("Select Bank Name.", "Warning");
                                        this.ActiveControl = cmbbank;
                                    }
                                    else if (dtpchequedate.Text == currentdate)
                                    {
                                        MessageBox.Show("Enter cheque Date.", "Warning");
                                        this.ActiveControl = dtpchequedate;
                                    }
                                    else
                                    {
                                        MessageBox.Show("Enter cheque Number.", "Warning");
                                        this.ActiveControl = txtchequeno;
                                    }
                                }
                            }
                            else
                            {
                                bool isValidProduct = true;
                                if (billtype == 1 || billtype == 2 && Convert.ToDecimal(txtVat.Text) == 0 || billtype == 3)
                                    savemaster();
                                else
                                    goto v;
                                for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                                {
                                    try
                                    {
                                        string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value), product = "";
                                        string[] strtext = prodsubtitle.Split(',');
                                        if (strtext.Length == 2)
                                        {
                                            prodsubtitle = strtext[0];
                                            product = strtext[1];
                                        }
                                        else
                                        {
                                            prodsubtitle = "";
                                            product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                        }
                                        ProductRepository ProdRepo = new ProductRepository();
                                        ProductInformation ProdData = new ProductInformation();
                                        if (CommonMethod.commProduct == true)
                                            ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value)).FirstOrDefault();
                                        else
                                            ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (ProdData != null)
                                        {
                                            if (prodsubtitle == "")
                                            {
                                                if (!string.IsNullOrEmpty(ProdData.Formulae))
                                                    prodsubtitle = txtSubtitle.Text;
                                            }
                                            if (ProdData.ProductType == 0 && ProdData.WithBatchAndExpiry == "N" && ProdData.WithBatch == "N")
                                                productentrytype = 0;
                                            else if (ProdData.ProductType == 0 && ProdData.WithBatchAndExpiry == "Y") //krushi with batch and expiry
                                                productentrytype = 1;
                                            else if (ProdData.ProductType == 0 && ProdData.WithBatch == "Y") //krushi with batch and expiry
                                                productentrytype = 2;
                                            else
                                                productentrytype = 0;
                                        }
                                        if (productentrytype == 1 || productentrytype == 2)
                                        {
                                            if (Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) == "")
                                            {
                                                MessageBox.Show("Please Enter Batch No For Product: " + product, "Warning");
                                                isValidProduct = false;
                                            }
                                        }
                                        if (isValidProduct == true)
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                            command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                            command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;// Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                            command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                            command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                            command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                            command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                            command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                            command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                            command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                            command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                            command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                            command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                            command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                            command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                            command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                            command.Parameters.Add("@HSNcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                            command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                            command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                            command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                            command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                            command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                            command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                            command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                            if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                            else
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                            command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                            command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                            command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                            command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                            command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        else
                                        {
                                            db.CloseConnection();
                                            break;
                                        }
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }
                                if (fakebillno != null && isValidProduct == true)
                                {
                                    CustomerBillMasterRepository custmastrepo = new CustomerBillMasterRepository();
                                    CustomerBillMaster masterdata = custmastrepo.GetAll().Where(t => t.BillNo == Convert.ToString(fakebillno) && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    masterdata.BillStatus = 1;
                                    custmastrepo.Edit(masterdata);
                                    custmastrepo.Save();
                                    custmastrepo.Dispose();
                                }
                                //start of DeliveryChallan table entry code
                                if (lbldcno.Text != "" && isValidProduct == true)
                                {
                                    DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                    DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                    DeliveryChallanMaster dcmaster = DCRepo.GetById(DCId);
                                    dcmaster.Status = 0;
                                    DCRepo.Edit(dcmaster);
                                    DCRepo.Save();
                                    DCRepo.Dispose();
                                }
                                //end of DeliveryChallan table entry code
                                //start of Orderbooking table entry code
                                if (OrderNo != 0 && isValidProduct == true)
                                {
                                    OrderbookingRepository orderrepo = new OrderbookingRepository();
                                    OrderBook orderdata = orderrepo.GetById(Convert.ToInt32(OrderNo));
                                    orderdata.status = "0";
                                    orderrepo.Edit(orderdata);
                                    orderrepo.Save();
                                    orderrepo.Dispose();
                                }
                                //end of Orderbooking table entry code
                                //start of QuotationMaster table entry code
                                if (!string.IsNullOrEmpty(lblqno.Text) && isValidProduct == true)
                                {
                                    try
                                    {
                                        QuotationMasterRepository qmasterrepo = new QuotationMasterRepository();
                                        QuotationMaster masterdata = qmasterrepo.GetById(QuotationId);
                                        masterdata.Status = 0;
                                        qmasterrepo.Edit(masterdata);
                                        qmasterrepo.Save();
                                        qmasterrepo.Dispose();
                                    }
                                    catch (Exception)
                                    { }
                                }
                                //end of QuotationMaster table entry code
                                //start of DeliveryChallan table entry code
                                if (!string.IsNullOrEmpty(Convert.ToString(DCNoList)) && isValidProduct == true)
                                {
                                    try
                                    {
                                        for (int j = 0; j < DCNoList.Count; j++)
                                        {
                                            DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                            DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                            DeliveryChallanMaster dcmaster = DCRepo.GetById(DCNoList[j]);
                                            dcmaster.Status = 0;
                                            DCRepo.Edit(dcmaster);
                                            DCRepo.Save();
                                            DCRepo.Dispose();
                                        }
                                    }
                                    catch (Exception)
                                    { }
                                }
                                //end of DeliveryChallan table entry code
                                //RemainingPayment table entry code
                                if (isValidProduct == true)
                                {
                                    if (billtype == 1 || billtype == 2)
                                        saveremainingpayment("Cash");
                                    else
                                        savefakebillremainingpayment("Cash");
                                    //if (billtype == 1 || billtype == 2)
                                    //{
                                    //    if (Convert.ToDecimal(txtRemainingAmt.Text) != 0)
                                    //        saveremainingpayment("Cash");
                                    //}
                                    //else
                                    //{
                                    //    if (Convert.ToDecimal(txtRemainingAmt.Text) != 0)
                                    //        savefakebillremainingpayment("Cash");
                                    //}
                                    if (lblCurrBonus.Text != "" && bonusStatus != null)
                                        SaveBonus(BillMasterID);
                                    MessageBox.Show("Invoice saved.", "Success");
                                    if (SetDataM.SendSMS == "True")
                                        SendSMS(billid, Convert.ToDecimal(txtNetAmt.Text));
                                    DeleteDuplicateBatchRecords();
                                    chkcheque.Checked = false;
                                    GvProductInfo.Rows.Clear();
                                    clear();
                                    this.ActiveControl = btnprint;
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Please fill paid amount.", "Warning");
                            this.ActiveControl = txtPaidAmt;
                        }
                    }
                    else
                    {
                        if (cmbcustomername.Text == "Select")
                        {
                            MessageBox.Show("Select Customer Name.", "Warning");
                            this.ActiveControl = cmbcustomername;
                        }
                        else
                        {
                            MessageBox.Show("Add Product Information.", "Warning");
                            this.ActiveControl = txtProductname;
                        }
                    }
                    goto w;
                }
            v:
                {
                    if (txtVat.Text != "0")
                    {
                        MessageBox.Show("Vat For Estimate Bill Not Allowed.", "Warning");
                        txtVat.Text = "";
                    }
                    else
                    {
                        MessageBox.Show("Please Enter vat.", "Warning");
                        this.ActiveControl = txtVat;
                    }
                }
            w:
                { }
                Custmasterrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        private void updateCustomerBill()
        {
            string batchno = "", proName = "", CompanyName = "", unit = "";
            decimal Quantity = 0;
            try
            {
                if (cmbcustomername.Text != "Select" && GvProductInfo.Rows.Count != 0)
                {
                    if (txtPaidAmt.Text != "0" || (txtPaidAmt.Text == "0" && txtRemainingAmt.Text != "0"))
                    {
                        if (chkcheque.Checked == true || chkBySwipe.Checked == true)
                        {
                            if (cmbbank.Text != "Select" || txtchequeno.Text != "" || dtpchequedate.Text != currentdate || txtbankname.Text != "")
                            {
                                if (billtype == 1 || billtype == 2 && Convert.ToDecimal(txtVat.Text) == 0 || billtype == 3)
                                    updatemaster();
                                else
                                    goto v;
                                if (deleteid.Count != 0)
                                {
                                    for (int x = 0; x < deleteid.Count; x++)
                                    {
                                        CustomerBillDetailRepository detailrepo1 = new CustomerBillDetailRepository();
                                        CustomerBillDetail bdetaildata = detailrepo1.GetById(Convert.ToInt32(deleteid[x]));
                                        if (bdetaildata != null)
                                        {
                                            proName = bdetaildata.ProductId;
                                            CompanyName = bdetaildata.CompanyName;
                                            unit = bdetaildata.Unit;
                                            Quantity = Convert.ToDecimal(bdetaildata.Quantity);
                                            getProductType(proName, CompanyName, unit);
                                            if (productentrytype == 1 || productentrytype == 2)
                                                batchno = Convert.ToString(bdetaildata.BatchNo);
                                        }
                                        try
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillRemoveDetailWithStockUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = deleteid[x];
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }

                                        //------------------batchData 
                                        if (productentrytype == 1 || productentrytype == 2)
                                        {
                                            if (batchno.Contains(','))
                                            {
                                                string[] barray = batchno.Split(',');
                                                for (int k = 0; k < barray.Length; k++)
                                                {
                                                    decimal batchusedQty = 0, removedQty = 0;
                                                    int batchID = 0;
                                                    BatchRepository batchrepo = new BatchRepository();
                                                    Batch batch = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.BillId == x.ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    //---------- delete batch data ---
                                                    batchusedQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.Status != "0" && t.BillId == x.ToString() && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                    batchID = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.Status != "0" && t.BillId == x.ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault().ID;
                                                    if (batchID != 0)
                                                    {
                                                        removedQty = batchusedQty - Quantity;
                                                        BatchRepository b_repo = new BatchRepository();
                                                        Batch batch_data = b_repo.GetById(batchID);
                                                        if (batch_data != null)
                                                        {
                                                            if (removedQty == 0)
                                                            {
                                                                b_repo.Remove(batch);
                                                                b_repo.Save();
                                                            }
                                                            else
                                                            {
                                                                batch_data.UsedQty = batch_data.UsedQty - Quantity;
                                                                b_repo.Edit(batch_data);
                                                                b_repo.Save();
                                                            }
                                                        }
                                                        b_repo.Dispose();
                                                    }
                                                    batchrepo.Dispose();
                                                    //-------- delete batch data  ------  16052018

                                                    PurchaseDetailRepository pDetaiRepo = new PurchaseDetailRepository();
                                                    PurchaseDetail pDetailData = new PurchaseDetail();
                                                    pDetailData = pDetaiRepo.GetAll().Where(t => t.PurchaseMaster.Id == batch.PorderNo && t.ProductName == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.PorderNo == batch.PorderNo && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    decimal prqty = 0;
                                                    try
                                                    {
                                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == pDetailData.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                                    }
                                                    catch (Exception)
                                                    {
                                                        prqty = 0;
                                                    }
                                                    decimal purchaseQty = Convert.ToDecimal(pDetailData.Quantity) + Convert.ToDecimal(pDetailData.FreeQty);
                                                    decimal srqty = 0;
                                                    try
                                                    {
                                                        try
                                                        {
                                                            GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                            GoodReturnDetail SRData = new GoodReturnDetail();
                                                            SRData = SRRepo.GetAll().Where(t => t.ProductId == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BNID == deleteid[x] && t.BatchNo == batchno && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                        }
                                                        catch (Exception)
                                                        { }
                                                    }
                                                    catch (Exception)
                                                    {
                                                        srqty = 0;
                                                    }
                                                    if ((purchaseQty - prqty) == (batchusedQty - srqty))
                                                    {
                                                        PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                        PurchaseDetail pDetail = new PurchaseDetail();
                                                        pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                        pDetail.Status = "Inactive";
                                                        updatepDetaiRepo.Edit(pDetail);
                                                        updatepDetaiRepo.Save();
                                                        updatepDetaiRepo.Dispose();
                                                    }
                                                    else
                                                    {
                                                        PurchaseDetailRepository updatepDetaiRepo1 = new PurchaseDetailRepository();
                                                        PurchaseDetail pDetail1 = new PurchaseDetail();
                                                        pDetail1 = updatepDetaiRepo1.GetById(pDetailData.Id);
                                                        pDetail1.Status = "Active";
                                                        updatepDetaiRepo1.Edit(pDetail1);
                                                        updatepDetaiRepo1.Save();
                                                        updatepDetaiRepo1.Dispose();
                                                    }
                                                    pDetaiRepo.Dispose(); batchrepo.Dispose();
                                                }
                                            }
                                            else
                                            {
                                                PurchaseDetailRepository pDetaiRepo = new PurchaseDetailRepository();
                                                decimal batchusedQty = 0, removedQty = 0;
                                                int batchID = 0;
                                                BatchRepository batchrepo = new BatchRepository();
                                                //---------- delete batch data ---
                                                batchusedQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.Status != "0" && t.BillId == x.ToString() && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                batchID = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.Status != "0" && t.BillId == x.ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault().ID;
                                                if (batchID != 0)
                                                {
                                                    removedQty = batchusedQty - Quantity;
                                                    BatchRepository b_repo = new BatchRepository();
                                                    Batch batch_data = b_repo.GetById(batchID);
                                                    if (batch_data != null)
                                                    {
                                                        //-------- delete batch data  ------  16052018
                                                        if (removedQty == 0)
                                                        {
                                                            b_repo.Remove(batch_data);
                                                            b_repo.Save();
                                                        }
                                                        else
                                                        {
                                                            batch_data.UsedQty = batch_data.UsedQty - Quantity;
                                                            b_repo.Edit(batch_data);
                                                            b_repo.Save();
                                                        }
                                                        b_repo.Dispose();
                                                        batchrepo.Dispose();
                                                        pDetaiRepo = new PurchaseDetailRepository();
                                                        PurchaseDetail pDetailData = new PurchaseDetail();
                                                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                        PurchaseMaster PMasterData = new PurchaseMaster();
                                                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == batch_data.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (PMasterData != null)
                                                        {
                                                            pDetailData = pDetaiRepo.GetAll().Where(t => t.ProductName == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.PorderNo == batch_data.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        }
                                                        decimal prqty = 0;
                                                        try
                                                        {
                                                            PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                            var PurDData = PurRDRepo.GetAll().Where(t => t.POID == pDetailData.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            prqty = Convert.ToDecimal(PurDData.Quantity);
                                                        }
                                                        catch (Exception)
                                                        {
                                                            prqty = 0;
                                                        }
                                                        decimal purchaseQty = Convert.ToDecimal(pDetailData.Quantity) + Convert.ToDecimal(pDetailData.FreeQty);
                                                        decimal srqty = 0;
                                                        try
                                                        {
                                                            try
                                                            {
                                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BNID == deleteid[x] && t.BatchNo == batchno && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                            }
                                                            catch (Exception)
                                                            { }
                                                        }
                                                        catch (Exception)
                                                        {
                                                            srqty = 0;
                                                        }
                                                        if ((purchaseQty - prqty) == (batchusedQty - srqty))
                                                        {
                                                            PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                            PurchaseDetail pDetail = new PurchaseDetail();
                                                            pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                            pDetail.Status = "Inactive";
                                                            updatepDetaiRepo.Edit(pDetail);
                                                            updatepDetaiRepo.Save();
                                                            updatepDetaiRepo.Dispose();
                                                        }
                                                        else
                                                        {
                                                            PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                            PurchaseDetail pDetail = new PurchaseDetail();
                                                            pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                            pDetail.Status = "Active";
                                                            updatepDetaiRepo.Edit(pDetail);
                                                            updatepDetaiRepo.Save();
                                                            updatepDetaiRepo.Dispose();
                                                        }
                                                        pDetaiRepo.Dispose(); batchrepo.Dispose();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                                {
                                    int Rowid = Convert.ToInt32(GvProductInfo.Rows[i].Cells["Id"].Value);
                                    if (Rowid != 0)
                                    {
                                        //Stock entry
                                        if (billtype == 1 || billtype == 2)
                                        {
                                            try
                                            {
                                                db.connect();
                                                SqlCommand command = new SqlCommand("SPPOnBillUpdateStockIfNameReplace", db.Connection);
                                                command.CommandType = CommandType.StoredProcedure;

                                                command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                                command.Parameters.Add("@id", SqlDbType.Int).Value = Rowid;
                                                command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                                command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                                command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                                command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;

                                                command.ExecuteNonQuery();
                                                db.CloseConnection();
                                            }
                                            catch (Exception)
                                            { db.CloseConnection(); }
                                        }
                                        try
                                        {
                                            string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            string[] strtext = prodsubtitle.Split(',');
                                            string product = "";
                                            if (strtext.Length == 2)
                                            {
                                                prodsubtitle = strtext[0];
                                                product = strtext[1];
                                            }
                                            else
                                            {
                                                prodsubtitle = "";
                                                product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            }
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = Rowid;
                                            command.Parameters.Add("@event", SqlDbType.Int).Value = 2;
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                            command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                            command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;
                                            command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                            command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                            command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                            command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                            command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                            command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                            command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                            command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                            command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                            command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                            command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                            command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                            command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                            command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                            command.Parameters.Add("@HSNCode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                            command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                            command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                            command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                            command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                            command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                            command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                            command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                            if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                            else
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                            command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                            command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                            command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                            command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                            command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            string[] strtext = prodsubtitle.Split(',');
                                            string product = "";
                                            if (strtext.Length == 2)
                                            {
                                                prodsubtitle = strtext[0];
                                                product = strtext[1];
                                            }
                                            else
                                            {
                                                prodsubtitle = "";
                                                product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            }
                                            if (prodsubtitle == "")
                                            {
                                                ProductRepository ProdRepo = new ProductRepository();
                                                ProductInformation ProdData = new ProductInformation();
                                                if (CommonMethod.commProduct == true)
                                                    ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value)).FirstOrDefault();
                                                else
                                                    ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (ProdData != null)
                                                {
                                                    if (!string.IsNullOrEmpty(ProdData.Formulae))
                                                        prodsubtitle = txtSubtitle.Text;
                                                }
                                            }
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                            command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                            command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;
                                            command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                            command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                            command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                            command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                            command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                            command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                            command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                            command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                            command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                            command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                            command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                            command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                            command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                            command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                            command.Parameters.Add("@HSNCode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                            command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                            command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                            command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                            command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                            command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                            command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                            command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                            if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                            else
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                            command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                            command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                            command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                            command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                            command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                }
                                //start of DeliveryChallan table entry code
                                if (lbldcno.Text == "")
                                { }
                                else
                                {
                                    try
                                    {
                                        for (int j = 0; j < DCNoList.Count; j++)
                                        {
                                            DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                            DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                            DeliveryChallanMaster dcmaster = DCRepo.GetById(DCNoList[j]);
                                            dcmaster.Status = 0;
                                            DCRepo.Edit(dcmaster);
                                            DCRepo.Save();
                                            DCRepo.Dispose();
                                        }
                                    }
                                    catch (Exception)
                                    { }
                                }
                                //Remaining Payment entry
                                string mode1 = "";
                                if (chkBySwipe.Checked == true)
                                    mode1 = "By Swipe";
                                else if (chkcheque.Checked == true)
                                    mode1 = "Cheque";
                                if (billtype == 1 || billtype == 2)
                                    updateremainingpayment(mode1);
                                else
                                    updatefakeremainingpayment(mode1);
                                if (lblCurrBonus.Text != "" && bonusStatus != null)
                                    UpdateBonus(BillMasterID);
                                MessageBox.Show("Invoice Updated.", "Success");
                                DeleteDuplicateBatchRecords();
                                chkcheque.Checked = false;
                                GvProductInfo.Rows.Clear();
                                clear();
                                this.ActiveControl = btnprint;
                                goto w;
                            }
                            else
                            {
                                if (txtbankname.Text == "")
                                {
                                    MessageBox.Show("Enter Bank Name.", "Warning");
                                    this.ActiveControl = txtbankname;
                                }
                                else if (cmbbank.Text == "Select")
                                {
                                    MessageBox.Show("Select Bank Name.", "Warning");
                                    this.ActiveControl = cmbbank;
                                }
                                else if (dtpchequedate.Text == currentdate)
                                {
                                    MessageBox.Show("Enter cheque Date.", "Warning");
                                    this.ActiveControl = dtpchequedate;
                                }
                                else
                                {
                                    MessageBox.Show("Enter cheque Number.", "Warning");
                                    this.ActiveControl = txtchequeno;
                                }
                            }
                        }  //--- check checked if 
                        else
                        {
                            if (billtype == 1 || billtype == 2 && Convert.ToDecimal(txtVat.Text) == 0 || billtype == 3)
                                updatemaster();
                            else
                                goto v;
                            if (deleteid.Count != 0)
                            {
                                for (int x = 0; x < deleteid.Count; x++)
                                {
                                    CustomerBillDetailRepository detailrepo1 = new CustomerBillDetailRepository();
                                    CustomerBillDetail bdetaildata = detailrepo1.GetById(Convert.ToInt32(deleteid[x]));
                                    if (bdetaildata != null)
                                    {
                                        proName = bdetaildata.ProductId;
                                        CompanyName = bdetaildata.CompanyName;
                                        unit = bdetaildata.Unit;
                                        Quantity = Convert.ToDecimal(bdetaildata.Quantity);
                                        getProductType(proName, CompanyName, unit);
                                        if (productentrytype == 1 || productentrytype == 2)
                                            batchno = Convert.ToString(bdetaildata.BatchNo);
                                    }
                                    detailrepo1.Dispose();

                                    try
                                    {
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPPOnBillRemoveDetailWithStockUpdate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                        command.Parameters.Add("@id", SqlDbType.Int).Value = deleteid[x];
                                        command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                        command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                        command.ExecuteNonQuery();
                                        db.CloseConnection();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }

                                    //------------------batchData 
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        if (batchno.Contains(','))
                                        {
                                            string[] barray = batchno.Split(',');
                                            for (int k = 0; k < barray.Length; k++)
                                            {
                                                decimal batchusedQty = 0, removedQty = 0;
                                                int batchID = 0;
                                                BatchRepository batchrepo = new BatchRepository();
                                                Batch batch = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.BillId == deleteid[x].ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                //---------- delete batch data ---
                                                batchusedQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.Status != "0" && t.BillId == deleteid[x].ToString() && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                batchID = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.Status != "0" && t.BillId == deleteid[x].ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault().ID;
                                                if (batchID != 0)
                                                {
                                                    removedQty = batchusedQty - Quantity;
                                                    BatchRepository b_repo = new BatchRepository();
                                                    Batch batch_data = b_repo.GetById(batchID);
                                                    if (batch_data != null)
                                                    {
                                                        if (removedQty == 0)
                                                        {
                                                            b_repo.Remove(batch);
                                                            b_repo.Save();
                                                        }
                                                        else
                                                        {
                                                            batch_data.UsedQty = batch_data.UsedQty - Quantity;
                                                            b_repo.Edit(batch_data);
                                                            b_repo.Save();
                                                        }
                                                    }
                                                    b_repo.Dispose();
                                                }
                                                batchrepo.Dispose();
                                                //-------- delete batch data  ------  16052018

                                                PurchaseDetailRepository pDetaiRepo = new PurchaseDetailRepository();
                                                PurchaseDetail pDetailData = new PurchaseDetail();
                                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                PurchaseMaster PMasterData = new PurchaseMaster();
                                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == batch.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (PMasterData != null)
                                                {
                                                    pDetailData = pDetaiRepo.GetAll().Where(t => t.ProductName == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BatchNo == barray[k] && t.PorderNo == batch.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                }
                                                decimal prqty = 0;
                                                try
                                                {
                                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == pDetailData.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                                }
                                                catch (Exception)
                                                {
                                                    prqty = 0;
                                                }
                                                decimal purchaseQty = Convert.ToDecimal(pDetailData.Quantity) + Convert.ToDecimal(pDetailData.FreeQty);
                                                decimal srqty = 0;
                                                try
                                                {
                                                    try
                                                    {
                                                        GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                        GoodReturnDetail SRData = new GoodReturnDetail();
                                                        SRData = SRRepo.GetAll().Where(t => t.ProductId == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BNID == Convert.ToInt32(deleteid[x]) && t.BatchNo == batchno && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                    }
                                                    catch (Exception)
                                                    { }
                                                }
                                                catch (Exception)
                                                {
                                                    srqty = 0;
                                                }
                                                if ((purchaseQty - prqty) == (batchusedQty - srqty))
                                                {
                                                    PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                    PurchaseDetail pDetail = new PurchaseDetail();
                                                    pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                    pDetail.Status = "Inactive";
                                                    updatepDetaiRepo.Edit(pDetail);
                                                    updatepDetaiRepo.Save();
                                                    updatepDetaiRepo.Dispose();
                                                }
                                                else
                                                {
                                                    PurchaseDetailRepository updatepDetaiRepo1 = new PurchaseDetailRepository();
                                                    PurchaseDetail pDetail1 = new PurchaseDetail();
                                                    pDetail1 = updatepDetaiRepo1.GetById(pDetailData.Id);
                                                    pDetail1.Status = "Active";
                                                    updatepDetaiRepo1.Edit(pDetail1);
                                                    updatepDetaiRepo1.Save();
                                                    updatepDetaiRepo1.Dispose();
                                                }
                                                pDetaiRepo.Dispose(); batchrepo.Dispose();
                                            }
                                        }
                                        else
                                        {
                                            PurchaseDetailRepository pDetaiRepo = new PurchaseDetailRepository();
                                            decimal batchusedQty = 0, removedQty = 0;
                                            int batchID = 0;
                                            BatchRepository batchrepo = new BatchRepository();
                                            //---------- delete batch data ---
                                            try
                                            {
                                                batchusedQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.Status != "0" && t.BillId == deleteid[x].ToString() && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                batchID = batchrepo.GetAll().Where(t => t.ProductName == proName && t.ManufactureCompany == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.Status != "0" && t.BillId == deleteid[x].ToString() && t.CompId == CommonMethod.CompId).FirstOrDefault().ID;
                                                if (batchID != 0)
                                                {
                                                    removedQty = batchusedQty - Quantity;
                                                    BatchRepository b_repo = new BatchRepository();
                                                    Batch batch_data = b_repo.GetById(batchID);
                                                    if (batch_data != null)
                                                    {
                                                        //-------- delete batch data  ------  16052018
                                                        if (removedQty == 0)
                                                        {
                                                            b_repo.Remove(batch_data);
                                                            b_repo.Save();
                                                        }
                                                        else
                                                        {
                                                            batch_data.UsedQty = batch_data.UsedQty - Quantity;
                                                            b_repo.Edit(batch_data);
                                                            b_repo.Save();
                                                        }
                                                        b_repo.Dispose();
                                                        batchrepo.Dispose();
                                                        pDetaiRepo = new PurchaseDetailRepository();
                                                        PurchaseDetail pDetailData = new PurchaseDetail();
                                                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                        PurchaseMaster PMasterData = new PurchaseMaster();
                                                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == batch_data.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (PMasterData != null)
                                                        {
                                                            pDetailData = pDetaiRepo.GetAll().Where(t => t.ProductName == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BatchNo == batchno && t.PorderNo == batch_data.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        }
                                                        decimal prqty = 0;
                                                        try
                                                        {
                                                            PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                            var PurDData = PurRDRepo.GetAll().Where(t => t.POID == pDetailData.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            prqty = Convert.ToDecimal(PurDData.Quantity);
                                                        }
                                                        catch (Exception)
                                                        {
                                                            prqty = 0;
                                                        }
                                                        decimal purchaseQty = Convert.ToDecimal(pDetailData.Quantity) + Convert.ToDecimal(pDetailData.FreeQty);
                                                        decimal srqty = 0;
                                                        try
                                                        {
                                                            try
                                                            {
                                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == proName && t.CompanyName == CompanyName && t.Unit == unit && t.BNID == deleteid[x] && t.BatchNo == batchno && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                            }
                                                            catch (Exception)
                                                            { }
                                                        }
                                                        catch (Exception)
                                                        {
                                                            srqty = 0;
                                                        }
                                                        if ((purchaseQty - prqty) == (batchusedQty - srqty))
                                                        {
                                                            PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                            PurchaseDetail pDetail = new PurchaseDetail();
                                                            pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                            pDetail.Status = "Inactive";
                                                            updatepDetaiRepo.Edit(pDetail);
                                                            updatepDetaiRepo.Save();
                                                            updatepDetaiRepo.Dispose();
                                                        }
                                                        else
                                                        {
                                                            PurchaseDetailRepository updatepDetaiRepo = new PurchaseDetailRepository();
                                                            PurchaseDetail pDetail = new PurchaseDetail();
                                                            pDetail = updatepDetaiRepo.GetById(pDetailData.Id);
                                                            pDetail.Status = "Active";
                                                            updatepDetaiRepo.Edit(pDetail);
                                                            updatepDetaiRepo.Save();
                                                            updatepDetaiRepo.Dispose();
                                                        }
                                                        pDetaiRepo.Dispose(); batchrepo.Dispose();
                                                    }
                                                }
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                            }
                            for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                            {
                                int Rowid = Convert.ToInt32(GvProductInfo.Rows[i].Cells["Id"].Value);
                                if (Rowid != 0)
                                {
                                    //Stock entry
                                    if (billtype == 1 || billtype == 2)
                                    {
                                        try
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillUpdateStockIfNameReplace", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = Rowid;
                                            command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                    try
                                    {
                                        string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                        string[] strtext = prodsubtitle.Split(',');
                                        string product = "";
                                        if (strtext.Length == 2)
                                        {
                                            prodsubtitle = strtext[0];
                                            product = strtext[1];
                                        }
                                        else
                                        {
                                            prodsubtitle = "";
                                            product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                        }
                                        if (prodsubtitle == "")
                                        {
                                            ProductRepository ProdRepo = new ProductRepository();
                                            ProductInformation ProdData = new ProductInformation();
                                            if (CommonMethod.commProduct == true)
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value)).FirstOrDefault();
                                            else
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();

                                            if (ProdData != null)
                                            {
                                                if (!string.IsNullOrEmpty(ProdData.Formulae))
                                                    prodsubtitle = txtSubtitle.Text;
                                            }
                                        }
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                        command.Parameters.Add("@id", SqlDbType.Int).Value = Rowid;
                                        command.Parameters.Add("@event", SqlDbType.Int).Value = 2;
                                        command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                        command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                        command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;
                                        command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                        command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                        command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                        command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                        command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                        command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                        command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                        command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                        command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                        command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                        command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                        command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                        command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                        command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                        command.Parameters.Add("@HSNCode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                        command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                        command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                        command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                        command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                        command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                        command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                        command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                        command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                        command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                        if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                            command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                        else
                                            command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                        command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                        command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                        command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                        command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                        command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                        command.ExecuteNonQuery();
                                        db.CloseConnection();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }
                                else
                                {
                                    try
                                    {
                                        string prodsubtitle = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                        string[] strtext = prodsubtitle.Split(',');
                                        string product = "";
                                        if (strtext.Length == 2)
                                        {
                                            prodsubtitle = strtext[0];
                                            product = strtext[1];
                                        }
                                        else
                                        {
                                            prodsubtitle = "";
                                            product = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                        }
                                        if (prodsubtitle == "")
                                        {
                                            ProductRepository ProdRepo = new ProductRepository();
                                            ProductInformation ProdData = new ProductInformation();
                                            if (CommonMethod.commProduct == true)
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value)).FirstOrDefault();
                                            else
                                                ProdData = ProdRepo.GetAll().Where(t => t.ProductName == product && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (ProdData != null)
                                            {
                                                if (!string.IsNullOrEmpty(ProdData.Formulae))
                                                    prodsubtitle = txtSubtitle.Text;
                                            }
                                        }
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                        command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                        command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                        command.Parameters.Add("@billtype", SqlDbType.Int).Value = billtype;
                                        command.Parameters.Add("@BillNo", SqlDbType.Int).Value = BillMasterID;
                                        command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = product;
                                        command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                        command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SaleUnit"].Value);
                                        command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                        command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Code"].Value);
                                        command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Rate"].Value);
                                        command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Amount"].Value);
                                        command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Disc"].Value);
                                        command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGST"].Value);
                                        command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SGSTAmt"].Value);
                                        command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGST"].Value);
                                        command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                        command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGST"].Value);
                                        command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["IGSTAmt"].Value);
                                        command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["TotalAmount"].Value);
                                        command.Parameters.Add("@HSNCode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["HSNCode"].Value);
                                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                        command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                        command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["SubTitle"].Value);
                                        command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SaleRate"].Value);
                                        command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["SpDisc"].Value);
                                        command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Cess"].Value);
                                        command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["CessAmt"].Value);
                                        command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Barcodeg"].Value);
                                        command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                        command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                                        if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                            command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                        else
                                            command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);
                                        command.Parameters.Add("@Size", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Sizec"].Value);
                                        command.Parameters.Add("@DeptName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Department"].Value);
                                        command.Parameters.Add("@ColorName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["ColorNm"].Value);
                                        command.Parameters.Add("@CategoryName", SqlDbType.VarChar).Value = Convert.ToString(GvProductInfo.Rows[i].Cells["Categoryg"].Value);
                                        command.Parameters.Add("@BarcodePrice", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value);
                                        command.ExecuteNonQuery();
                                        db.CloseConnection();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }
                            }
                            //start of DeliveryChallan table entry code
                            if (lbldcno.Text == "")
                            { }
                            else
                            {
                                try
                                {
                                    for (int j = 0; j < DCNoList.Count; j++)
                                    {
                                        DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                        DeliveryChallanMaster masterdata = new DeliveryChallanMaster();
                                        DeliveryChallanMaster dcmaster = DCRepo.GetById(DCNoList[j]);
                                        dcmaster.Status = 0;
                                        DCRepo.Edit(dcmaster);
                                        DCRepo.Save();
                                        DCRepo.Dispose();
                                    }
                                }
                                catch (Exception)
                                { }
                            }
                            if (billtype == 1 || billtype == 2)
                                updateremainingpayment("Cash");
                            else
                                updatefakeremainingpayment("Cash");
                            if (lblCurrBonus.Text != "" && bonusStatus != null)
                                UpdateBonus(BillMasterID);
                            MessageBox.Show("Invoice Updated.", "Success");
                            DeleteDuplicateBatchRecords();
                            chkcheque.Checked = false;
                            GvProductInfo.Rows.Clear();
                            clear();
                            this.ActiveControl = btnprint;
                            goto w;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Please fill paid amount.", "Warning");
                        this.ActiveControl = txtPaidAmt;
                    }
                }
                else
                {
                    MessageBox.Show("Add Product Information.", "Warning");
                    this.ActiveControl = txtProductname;
                }
            v:
                {
                    if (txtVat.Text != "0")
                    {
                        MessageBox.Show("GST For Estimate Bill Not Allowed.", "Warning");
                        txtVat.Text = "";
                    }
                    else
                    {
                        MessageBox.Show("Please Enter GST.", "Warning");
                        this.ActiveControl = txtVat;
                    }
                }
            w: { }
            }
            catch (Exception)
            { db.CloseConnection(); }
        }

        private void getProductsbyPrefix(string productprefix)
        {
            try
            {
                txtProductname.Text = "";
                productprefix = productprefix.Trim();
                if (productprefix != "")
                {
                    string cnString1 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
                    using (SqlConnection con = new SqlConnection(cnString1))
                    {
                        List<string> lstproduct = new List<string>();
                        SqlCommand cmd = null;
                        if (CommonMethod.commProduct == true)
                            cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation where Prefix like '" + productprefix + "%'", con);
                        else
                            cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation where Prefix like '" + productprefix + "%' and compid=" + CommonMethod.CompId, con);
                        con.Open();
                        SqlDataReader reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            string strproduct = "";
                            strproduct = reader.GetString(0) + "," + reader.GetString(1) + "," + reader.GetString(2);
                            lstproduct.Add(strproduct);
                        }
                        if (lstproduct.Count > 0)
                        {
                            txtprefixproduct.DataSource = lstproduct;  // assigned list to listbox
                            txtprefixproduct.Visible = true;
                        }
                    }
                }
                else
                    txtprefixproduct.Visible = false;
            }
            catch (Exception)
            { }
        }

        public void additemNew() //New logic with seperate textbox for Barcode
        {
            try
            {
                decimal nwqty = 1, gridqty = 0, remqty = 0, ptotalamount = 0;
                string gridbarcode = "", strbarcode = "", code = "", BatchNo = "", ExpiryDate = "", pbsize = "", pbcolor = "";
                PurchaseDetailRepository pdetailrepo = new PurchaseDetailRepository();
                var purdtldata = pdetailrepo.GetAll().Where(t => t.Barcode == txtBarcode.Text.Trim() || t.StaticBarcode == txtBarcode.Text.Trim() && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                RepackDetailRepository Redetailrepo = new RepackDetailRepository();
                var repackDeta = Redetailrepo.GetAll().Where(t => t.Barcode == txtBarcode.Text.Trim()).FirstOrDefault();
                if (purdtldata != null || repackDeta != null)
                {
                    ProductRepository productrepo = new ProductRepository();
                    if (purdtldata != null)
                    {
                        pbsize = purdtldata.Size;
                        pbcolor = purdtldata.ColorName;
                        string id = purdtldata.PorderNo.ToString();
                        pono[0] = id;
                        if (CommonMethod.commProduct == true)
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == purdtldata.ProductName && t.ManufactureCompany == purdtldata.CompanyName && t.Uniti == purdtldata.Unit).FirstOrDefault();
                        else
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == purdtldata.ProductName && t.ManufactureCompany == purdtldata.CompanyName && t.Uniti == purdtldata.Unit && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    }
                    else if (repackDeta != null)
                    {
                        if (CommonMethod.commProduct == true)
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ID == repackDeta.ProductNo).FirstOrDefault();
                        else
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ID == repackDeta.ProductNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(ProductDataGlobal)))
                    {
                        if (cmbcustomername.Text != "Select" && cmbcustomername.Text.Trim() != "")
                        {
                            ptotalamount = 0;
                            Glbproname = ProductDataGlobal.ProductName.ToString();
                            Glbcompany = ProductDataGlobal.ManufactureCompany.ToString();
                            Glbunit = ProductDataGlobal.Uniti.ToString();
                            colorname = ProductDataGlobal.ColorName;
                            deptname = ProductDataGlobal.DeptName;
                            category = ProductDataGlobal.Category;
                            CustomerRepository custRepo = new CustomerRepository();
                            CustomerInformation cusatData = custRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CustomerName == cmbcustomername.Text).FirstOrDefault();
                            if (cusatData != null)
                                StateId = Convert.ToInt32(cusatData.Statecode);
                            if (ProductDataGlobal.TaxInclusive == "True")
                                taxinclude = "True";
                            else
                                taxinclude = "False";
                            if (billtype != 2)
                            {
                                if (SetDataM.CompositionScheme == "True")
                                { }
                                else
                                {
                                    if (ProductDataGlobal.IGstPercent != null && ProductDataGlobal.IGstPercent != 0)
                                    {
                                        if (StateId == 27)
                                        {
                                            cmbsgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                            cmbcgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                            cmbigst.Text = "0.00";
                                        }
                                        else
                                        {
                                            cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                            cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                            cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                        }
                                    }
                                    else if (ProductDataGlobal.SGstPercent != null && ProductDataGlobal.SGstPercent != 0 && ProductDataGlobal.CGstPercent != null && ProductDataGlobal.CGstPercent != 0)
                                    {
                                        if (StateId == 27)
                                        {
                                            cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                            cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                            cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                        }
                                        else
                                        {
                                            cmbsgst.Text = "0.00";
                                            cmbcgst.Text = "0.00";
                                            cmbigst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.CGstPercent) + Convert.ToDecimal(ProductDataGlobal.SGstPercent));
                                        }
                                    }
                                    else
                                    {
                                        cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                        cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                        cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                    }
                                    txtpCess.Text = Convert.ToString(ProductDataGlobal.Cess);
                                }
                            }
                            txtHSNCode.Text = ProductDataGlobal.HSNCode;
                            if (ProductDataGlobal.Usesubtitle == "Y")
                            {
                                pnlSubtitle.Visible = true;
                                txtSubtitle.Visible = true;
                            }
                            if (subtitlestring != "")
                                txtSubtitle.Text = subtitlestring;
                            cmbPrefix.Text = Convert.ToString(ProductDataGlobal.Prefix);
                            PrefixToBind = true;
                            txtQuantity.Text = "1";
                            if (purdtldata != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(purdtldata.SaleRate)))
                                {
                                    PurchaseDetailRepository PurRepo = new PurchaseDetailRepository();
                                    PurchaseDetail PurData = new PurchaseDetail();
                                    PurData = PurRepo.GetAll().Where(t => t.StaticBarcode == txtBarcode.Text.Trim() && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                                    if (PurData != null)
                                    {
                                        txtrate.Text = PurData.SaleRate.ToString();
                                        BarcodePrice = Convert.ToDecimal(PurData.SaleRate);
                                    }
                                    else
                                    {
                                        txtrate.Text = Convert.ToString(purdtldata.SaleRate);
                                        BarcodePrice = Convert.ToDecimal(purdtldata.SaleRate);
                                    }
                                }
                                else
                                {
                                    txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                    BarcodePrice = Convert.ToDecimal(ProductDataGlobal.Rate);
                                }
                            }
                            else
                                txtrate.Text = Convert.ToString(repackDeta.SaleRate);
                            if (ProductDataGlobal.StaticBarcodeDefaultInBill == "N")
                            {
                                barcode = txtBarcode.Text.Trim();
                                staticbarStatus = ProductDataGlobal.StaticBarcodeDefaultInBill;
                                txtProductname.Text = Glbproname + "," + Glbcompany + "," + Glbunit;
                                cmbUnit.Items.Clear();
                                cmbUnit.DisplayMember = "Text";
                                cmbUnit.ValueMember = "Value";
                                cmbUnit.Items.Add(new { Text = ProductDataGlobal.Uniti, Value = ProductDataGlobal.Uniti });
                                if (ProductDataGlobal.AlternateUnit != null && ProductDataGlobal.AlternateUnit != "")
                                    cmbUnit.Items.Add(new { Text = ProductDataGlobal.AlternateUnit, Value = ProductDataGlobal.AlternateUnit });
                                if (ProductDataGlobal.TripleUnit != null && ProductDataGlobal.TripleUnit != "")
                                    cmbUnit.Items.Add(new { Text = ProductDataGlobal.TripleUnit, Value = ProductDataGlobal.TripleUnit });
                                cmbUnit.SelectedIndex = 0;
                                this.ActiveControl = txtQuantity;
                                StaticBarcode = true;
                            }
                            else
                            {
                                if (purdtldata != null)
                                {
                                    code = purdtldata.Code;
                                    if (!String.IsNullOrEmpty(Convert.ToString(purdtldata.SaleRate)))
                                        txtrate.Text = Convert.ToString(purdtldata.SaleRate);
                                    if (!string.IsNullOrEmpty(purdtldata.Barcode))
                                        strbarcode = purdtldata.Barcode;
                                    else
                                    {
                                        strbarcode = purdtldata.StaticBarcode;
                                        PurchaseDetailRepository PurRepo = new PurchaseDetailRepository();
                                        PurchaseDetail PurData = new PurchaseDetail();
                                        PurData = PurRepo.GetAll().Where(t => t.StaticBarcode == txtBarcode.Text.Trim() && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                                        txtrate.Text = PurData.SaleRate.ToString();
                                    }
                                    if (ProductDataGlobal.WithBatchAndExpiry == "Y")
                                    {
                                        BatchNo = purdtldata.BatchNo;
                                        ExpiryDate = purdtldata.ExpireDate.Value.ToString("dd/MM/yyyy");
                                    }
                                    else if (ProductDataGlobal.WithBatch == "Y")
                                        BatchNo = purdtldata.BatchNo;
                                }
                                else if (repackDeta != null)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(repackDeta.SaleRate)))
                                        txtrate.Text = Convert.ToString(repackDeta.SaleRate);
                                    strbarcode = repackDeta.Barcode;
                                }
                                getGstCalculation();
                                try
                                {
                                    db.connect();
                                    SqlCommand command = new SqlCommand("SPGetRemQtyBarcode", db.Connection);
                                    command.CommandType = CommandType.StoredProcedure;
                                    command.Parameters.Add("@Barcode", SqlDbType.VarChar).Value = strbarcode;
                                    command.Parameters.Add("@remqty", SqlDbType.Decimal);
                                    command.Parameters["@remqty"].Direction = ParameterDirection.Output;
                                    command.Parameters["@remqty"].Precision = 18;
                                    command.Parameters["@remqty"].Scale = 2;
                                    command.ExecuteReader();
                                    remqty = Convert.ToDecimal(command.Parameters["@remqty"].Value.ToString());
                                    db.CloseConnection();
                                }
                                catch (Exception)
                                { db.CloseConnection(); remqty = 0; }

                                if (colIndex != -1)
                                {
                                    if (strbarcode == Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value))
                                    {
                                        int id = Convert.ToInt32(GvProductInfo.Rows[colIndex].Cells["Id"].Value);
                                        gridqty = Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value);
                                        gridqty = gridqty + 1;
                                        if (remqty >= gridqty)
                                        {
                                            ptotalamount = gridqty * Convert.ToDecimal(txtrate.Text);
                                            GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value = Glbproname;
                                            GvProductInfo.Rows[colIndex].Cells["Company"].Value = Glbcompany;
                                            GvProductInfo.Rows[colIndex].Cells["Unit"].Value = Glbunit;
                                            GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value = Glbunit;
                                            GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value = gridqty;
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = code;
                                            GvProductInfo.Rows[colIndex].Cells["Rate"].Value = lblBasicRate.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Amount"].Value = txtAmount.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Disc"].Value = txtpdiscount.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SGST"].Value = (cmbsgst.Text == "") ? "0" : cmbsgst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["CGST"].Value = (cmbcgst.Text == "") ? "0" : cmbcgst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["IGST"].Value = (cmbigst.Text == "") ? "0" : cmbigst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Cess"].Value = (txtpCess.Text == "") ? "0" : txtpCess.Text;
                                            if (gridqty > 1)
                                            {
                                                GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblpvat.Text) + Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value));
                                                GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblCGST.Text) + Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value));
                                                GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblIGST.Text) + Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value));
                                                GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblpCessamt.Text) + Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value));
                                            }
                                            else
                                            {
                                                GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : lblpvat.Text;
                                                GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : lblCGST.Text;
                                                GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : lblIGST.Text;
                                                GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : lblpCessamt.Text;
                                            }
                                            GvProductInfo.Rows[colIndex].Cells["TotalAmount"].Value = Convert.ToString(Convert.ToDecimal(txtAmount.Text) * gridqty);
                                            GvProductInfo.Rows[colIndex].Cells["HSNCode"].Value = txtHSNCode.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SaleRate"].Value = txtrate.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value = strbarcode;
                                            if (ProductDataGlobal.WithBatch == "Y")
                                                GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = BatchNo;
                                            else if (ProductDataGlobal.WithBatchAndExpiry == "Y")
                                            {
                                                GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = BatchNo;
                                                GvProductInfo.Rows[colIndex].Cells["ExpiryDate"].Value = ExpiryDate;
                                            }
                                            GvProductInfo.Rows[colIndex].Cells["Sizec"].Value = pbsize;
                                            GvProductInfo.Rows[colIndex].Cells["Department"].Value = deptname;
                                            GvProductInfo.Rows[colIndex].Cells["ColorNm"].Value = pbcolor;
                                            GvProductInfo.Rows[colIndex].Cells["Categoryg"].Value = category;
                                            GvProductInfo.Rows[colIndex].Cells["BarcodePriceg"].Value = BarcodePrice;
                                            updatebatchtableenrty(colIndex, id);
                                            totalqty = 0;
                                            totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                            lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                            GvProductInfo.FirstDisplayedScrollingRowIndex = GvProductInfo.RowCount - 1;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Product quantity not available.", "Warning");
                                            this.ActiveControl = txtBarcode;
                                        }
                                    }
                                    else
                                    {
                                        if (remqty >= nwqty)
                                        {
                                            GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value = Glbproname;
                                            GvProductInfo.Rows[colIndex].Cells["Company"].Value = Glbcompany;
                                            GvProductInfo.Rows[colIndex].Cells["Unit"].Value = Glbunit;
                                            GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value = Glbunit;
                                            GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value = txtQuantity.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = code;
                                            GvProductInfo.Rows[colIndex].Cells["Rate"].Value = lblBasicRate.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Amount"].Value = txtAmount.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Disc"].Value = txtpdiscount.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SGST"].Value = (cmbsgst.Text == "") ? "0" : cmbsgst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["CGST"].Value = (cmbcgst.Text == "") ? "0" : cmbcgst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["IGST"].Value = (cmbigst.Text == "") ? "0" : cmbigst.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Cess"].Value = (txtpCess.Text == "") ? "0" : txtpCess.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : lblpvat.Text;
                                            GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : lblCGST.Text;
                                            GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : lblIGST.Text;
                                            GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : lblpCessamt.Text;
                                            GvProductInfo.Rows[colIndex].Cells["TotalAmount"].Value = Convert.ToString(Convert.ToDecimal(txtAmount.Text) * gridqty);
                                            GvProductInfo.Rows[colIndex].Cells["HSNCode"].Value = txtHSNCode.Text;
                                            GvProductInfo.Rows[colIndex].Cells["SaleRate"].Value = txtrate.Text;
                                            GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value = strbarcode;
                                            if (ProductDataGlobal.WithBatch == "Y")
                                                GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = BatchNo;
                                            else if (ProductDataGlobal.WithBatchAndExpiry == "Y")
                                            {
                                                GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = BatchNo;
                                                GvProductInfo.Rows[colIndex].Cells["ExpiryDate"].Value = ExpiryDate;
                                            }
                                            GvProductInfo.Rows[colIndex].Cells["Sizec"].Value = pbsize;
                                            GvProductInfo.Rows[colIndex].Cells["Department"].Value = deptname;
                                            GvProductInfo.Rows[colIndex].Cells["ColorNm"].Value = pbcolor;
                                            GvProductInfo.Rows[colIndex].Cells["Categoryg"].Value = category;
                                            GvProductInfo.Rows[colIndex].Cells["BarcodePriceg"].Value = BarcodePrice;
                                            batchtableenrty(colIndex);
                                            totalqty = 0;
                                            totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                            lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                            GvProductInfo.FirstDisplayedScrollingRowIndex = GvProductInfo.RowCount - 1;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Product quantity not available.", "Warning");
                                            this.ActiveControl = txtBarcode;
                                        }
                                    }
                                    colIndex = -1;
                                }
                                else
                                {
                                    int i = GvProductInfo.RowCount;
                                    try
                                    {
                                        for (int j = 0; j < GvProductInfo.Rows.Count; j++)
                                        {
                                            gridbarcode = Convert.ToString(GvProductInfo.Rows[j].Cells["Barcodeg"].Value);
                                            if (strbarcode == gridbarcode)
                                            {
                                                chkSumQty += 1;
                                                gridqty = Convert.ToDecimal(GvProductInfo.Rows[j].Cells["Quantityg"].Value);
                                                gridqty = gridqty + 1;
                                                if (remqty >= gridqty)
                                                {
                                                    ptotalamount = gridqty * Convert.ToDecimal(txtrate.Text);
                                                    GvProductInfo.Rows[j].Cells["ProductNameg"].Value = Glbproname;
                                                    GvProductInfo.Rows[j].Cells["Company"].Value = Glbcompany;
                                                    GvProductInfo.Rows[j].Cells["Unit"].Value = Glbunit;
                                                    GvProductInfo.Rows[j].Cells["SaleUnit"].Value = Glbunit;
                                                    GvProductInfo.Rows[j].Cells["Quantityg"].Value = gridqty;
                                                    GvProductInfo.Rows[j].Cells["Code"].Value = code;
                                                    GvProductInfo.Rows[j].Cells["Rate"].Value = lblBasicRate.Text;
                                                    GvProductInfo.Rows[j].Cells["Amount"].Value = txtAmount.Text;
                                                    GvProductInfo.Rows[j].Cells["Disc"].Value = txtpdiscount.Text;
                                                    GvProductInfo.Rows[j].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                                    GvProductInfo.Rows[j].Cells["SGST"].Value = (cmbsgst.Text == "") ? "0" : cmbsgst.Text;
                                                    GvProductInfo.Rows[j].Cells["CGST"].Value = (cmbcgst.Text == "") ? "0" : cmbcgst.Text;
                                                    GvProductInfo.Rows[j].Cells["IGST"].Value = (cmbigst.Text == "") ? "0" : cmbigst.Text;
                                                    GvProductInfo.Rows[j].Cells["Cess"].Value = (txtpCess.Text == "") ? "0" : txtpCess.Text;
                                                    if (gridqty > 1)
                                                    {
                                                        GvProductInfo.Rows[j].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblpvat.Text) + Convert.ToDecimal(GvProductInfo.Rows[j].Cells["SGSTAmt"].Value));
                                                        GvProductInfo.Rows[j].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblCGST.Text) + Convert.ToDecimal(GvProductInfo.Rows[j].Cells["CGSTAmt"].Value));
                                                        GvProductInfo.Rows[j].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblIGST.Text) + Convert.ToDecimal(GvProductInfo.Rows[j].Cells["IGSTAmt"].Value));
                                                        GvProductInfo.Rows[j].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : Convert.ToString(Convert.ToDecimal(lblpCessamt.Text) + Convert.ToDecimal(GvProductInfo.Rows[j].Cells["CessAmt"].Value));
                                                    }
                                                    else
                                                    {
                                                        GvProductInfo.Rows[j].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : lblpvat.Text;
                                                        GvProductInfo.Rows[j].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : lblCGST.Text;
                                                        GvProductInfo.Rows[j].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : lblIGST.Text;
                                                        GvProductInfo.Rows[j].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : lblpCessamt.Text;
                                                    }
                                                    GvProductInfo.Rows[j].Cells["TotalAmount"].Value = Convert.ToString(Convert.ToDecimal(txtAmount.Text) * gridqty);
                                                    GvProductInfo.Rows[j].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                                                    GvProductInfo.Rows[j].Cells["HSNCode"].Value = txtHSNCode.Text;
                                                    GvProductInfo.Rows[j].Cells["SaleRate"].Value = txtrate.Text;
                                                    GvProductInfo.Rows[j].Cells["Barcodeg"].Value = strbarcode;
                                                    if (ProductDataGlobal.WithBatch == "Y")
                                                        GvProductInfo.Rows[j].Cells["BatchNo"].Value = BatchNo;
                                                    else if (ProductDataGlobal.WithBatchAndExpiry == "Y")
                                                    {
                                                        GvProductInfo.Rows[j].Cells["BatchNo"].Value = BatchNo;
                                                        GvProductInfo.Rows[j].Cells["ExpiryDate"].Value = ExpiryDate;
                                                    }
                                                    GvProductInfo.Rows[j].Cells["Sizec"].Value = pbsize;
                                                    GvProductInfo.Rows[j].Cells["Department"].Value = deptname;
                                                    GvProductInfo.Rows[j].Cells["ColorNm"].Value = pbcolor;
                                                    GvProductInfo.Rows[j].Cells["Categoryg"].Value = category;
                                                    GvProductInfo.Rows[j].Cells["BarcodePriceg"].Value = BarcodePrice;
                                                    batchtableenrty(j);
                                                    totalqty = 0;
                                                    totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                                    lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                                    GvProductInfo.FirstDisplayedScrollingRowIndex = GvProductInfo.RowCount - 1;
                                                    break;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Product quantity not available.", "Warning");
                                                    this.ActiveControl = txtBarcode;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        gridqty = 0;
                                        gridbarcode = "";
                                    }
                                    try
                                    {
                                        txtTotalAmt.Text = "0";
                                        txtPaidAmt.Text = "0";
                                        txtNetAmt.Text = "0";
                                        txtRemainingAmt.Text = "0";
                                        if (gridqty == 0)
                                        {
                                            if (remqty >= nwqty)
                                            {
                                                GvProductInfo.Rows.Add();
                                                GvProductInfo.Rows[i].Cells["ProductNameg"].Value = Glbproname;
                                                GvProductInfo.Rows[i].Cells["Company"].Value = Glbcompany;
                                                GvProductInfo.Rows[i].Cells["Unit"].Value = Glbunit;
                                                GvProductInfo.Rows[i].Cells["SaleUnit"].Value = Glbunit;
                                                GvProductInfo.Rows[i].Cells["Quantityg"].Value = txtQuantity.Text;
                                                GvProductInfo.Rows[i].Cells["Code"].Value = code;
                                                GvProductInfo.Rows[i].Cells["Rate"].Value = lblBasicRate.Text;
                                                GvProductInfo.Rows[i].Cells["Amount"].Value = txtAmount.Text;
                                                GvProductInfo.Rows[i].Cells["Disc"].Value = txtpdiscount.Text;
                                                GvProductInfo.Rows[i].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                                GvProductInfo.Rows[i].Cells["SGST"].Value = (cmbsgst.Text == "") ? "0" : cmbsgst.Text;
                                                GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = (lblpvat.Text == "") ? "0" : lblpvat.Text;
                                                GvProductInfo.Rows[i].Cells["CGST"].Value = (cmbcgst.Text == "") ? "0" : cmbcgst.Text;
                                                GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = (lblCGST.Text == "") ? "0" : lblCGST.Text;
                                                GvProductInfo.Rows[i].Cells["IGST"].Value = (cmbigst.Text == "") ? "0" : cmbigst.Text;
                                                GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = (lblIGST.Text == "") ? "0" : lblIGST.Text;
                                                GvProductInfo.Rows[i].Cells["Cess"].Value = (txtpCess.Text == "") ? "0" : txtpCess.Text;
                                                GvProductInfo.Rows[i].Cells["CessAmt"].Value = (lblpCessamt.Text == "") ? "0" : lblpCessamt.Text;
                                                GvProductInfo.Rows[i].Cells["TotalAmount"].Value = txtpTotalAmt.Text;
                                                GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                                                GvProductInfo.Rows[i].Cells["HSNCode"].Value = txtHSNCode.Text;
                                                GvProductInfo.Rows[i].Cells["SaleRate"].Value = txtrate.Text;
                                                GvProductInfo.Rows[i].Cells["Barcodeg"].Value = strbarcode;
                                                if (ProductDataGlobal.WithBatch == "Y")
                                                    GvProductInfo.Rows[i].Cells["BatchNo"].Value = BatchNo;
                                                else if (ProductDataGlobal.WithBatchAndExpiry == "Y")
                                                {
                                                    GvProductInfo.Rows[i].Cells["BatchNo"].Value = BatchNo;
                                                    GvProductInfo.Rows[i].Cells["ExpiryDate"].Value = ExpiryDate;
                                                }
                                                GvProductInfo.Rows[i].Cells["Sizec"].Value = pbsize;
                                                GvProductInfo.Rows[i].Cells["Department"].Value = deptname;
                                                GvProductInfo.Rows[i].Cells["ColorNm"].Value = pbcolor;
                                                GvProductInfo.Rows[i].Cells["Categoryg"].Value = category;
                                                GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value = BarcodePrice;
                                                batchtableenrty(i);
                                                totalqty = 0;
                                                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                                GvProductInfo.FirstDisplayedScrollingRowIndex = GvProductInfo.RowCount - 1;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Product quantity not available.", "Warning");
                                                this.ActiveControl = txtBarcode;
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    { }
                                }
                                totalamt = 0;
                                totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                                txtTotalAmt.Text = Convert.ToString(totalamt);
                                clearatadd();
                                pdetailrepo.Dispose();
                                this.ActiveControl = txtBarcode;
                                lblProductcount.Text = Convert.ToString(GvProductInfo.Rows.Count);
                            }
                            txtQuantity_TextChanged(null, null);
                            if (barcodestatus == "Static Barcode" && staticbarStatus == "N" && barcode != "" && barcode != null)
                            { }
                            else
                                this.ActiveControl = txtBarcode;
                        }
                        else if (cmbcustomername.Text == "Select" || cmbcustomername.Text.Trim() == "")
                        {
                            MessageBox.Show("Enter Customer name.", "Warning");
                            txtBarcode.Text = "";
                            this.ActiveControl = cmbcustomername;
                        }
                        productrepo.Dispose();
                    }
                    else
                        this.ActiveControl = txtBarcode;
                }
                pdetailrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void frmBarcodeChoice(string msg)
        {
            isdirect = 1;
            if (msg == "Not Available")
            {
                if (colIndex != -1)
                    txtQuantity.Text = savedQuantity.ToString();
            }
        }

        public void frmBarcodeChoice(string b, decimal rqty, decimal quantityDiff = -1)
        {
            try
            {
                isdirect = 1;
                if (!string.IsNullOrEmpty(b))
                {
                    if (rqty >= Convert.ToDecimal(txtQuantity.Text))
                    {
                        barcode = b;
                        b = "";
                        barcodeMinus = false;
                    }
                    else if (btnUpdate.Enabled == true && colIndex != -1 && quantityDiff >= 0)
                    {
                        barcode = b;
                        PurchaseDetailRepository purDetailRepo = new PurchaseDetailRepository();
                        var purDetailData = purDetailRepo.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.CompId == CommonMethod.CompId && t.Barcode == barcode).LastOrDefault();
                        txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                        b = "";
                    }
                    else
                    {
                        MessageBox.Show("This Barcode Less Quantity is Available.", "Warning");
                        txtProductname.Text = "";
                        txtQuantity.Text = "0";
                        fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                        txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                        txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                        lblpvat.Text = "0";
                        barcodeMinus = true;
                        this.ActiveControl = txtProductname;
                    }
                }
            }
            catch (Exception)
            { }
        }

        public void frmBarcodeChoice(string b, decimal rqty, string size, string color = "", decimal barcodePrice = 0, decimal quantityDiff = -1)
        {
            isdirect = 1;
            try
            {
                if (barcodestatus == "No Barcode" && productentrytype == 3)
                {
                    if (!string.IsNullOrEmpty(size))
                    {
                        if (rqty >= Convert.ToDecimal(txtQuantity.Text))
                        {
                            psize = size;
                            pcolor = color;
                        }
                        else
                        {
                            MessageBox.Show("This Size Less Quantity is  Available.", "Warning");
                            txtQuantity.Text = Convert.ToString(rqty);
                        }
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(b))
                    {
                        if (rqty >= Convert.ToDecimal(txtQuantity.Text))
                        {
                            barcode = b;
                            psize = size;
                            pcolor = color;
                            BarcodePrice = barcodePrice;
                            PurchaseDetailRepository purDetailRepo = new PurchaseDetailRepository();
                            var purDetailData = purDetailRepo.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.CompId == CommonMethod.CompId && (t.Barcode == barcode || t.StaticBarcode == barcode)).LastOrDefault();
                            txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                            b = "";
                        }
                        else if (btnUpdate.Enabled == true && colIndex != -1 && quantityDiff >= 0)
                        {
                            barcode = b;
                            psize = size;
                            pcolor = color;
                            BarcodePrice = barcodePrice;
                            PurchaseDetailRepository purDetailRepo = new PurchaseDetailRepository();
                            var purDetailData = purDetailRepo.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.CompId == CommonMethod.CompId && (t.Barcode == barcode || t.StaticBarcode == barcode)).LastOrDefault();
                            txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                            b = "";
                        }
                        else
                        {
                            MessageBox.Show("This Barcode Less Quantity is Available.", "Warning");
                            txtQuantity.Text = Convert.ToString(rqty);
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void getFormuleQuantity()
        {
            string productformulae = "";
            try
            {
                dtgvFormulae.EndEdit(DataGridViewDataErrorContexts.Commit);
                if (txtProductname.Text != "")
                {
                    if (ProductDataGlobal == null)
                    {
                        string proname = "", company = "", unit = "";
                        if ((txtProductname.Text).Contains(","))
                        {
                            try
                            {
                                proname = txtProductname.Text.Trim().Split(',')[0];
                                company = txtProductname.Text.Trim().Split(',')[1];
                                unit = txtProductname.Text.Trim().Split(',')[2];
                            }
                            catch (Exception)
                            { }

                            ProductRepository productrepo = new ProductRepository();
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                        }
                    }
                    if (ProductDataGlobal == null)
                    {
                        MessageBox.Show("This Product Name Is Not Valid.", "Warning");
                        txtProductname.Text = "";
                        this.ActiveControl = txtProductname;
                    }
                    else
                    {
                        if (ProductDataGlobal.Formulae != "" || ProductDataGlobal.Formulae != null)
                            productformulae = ProductDataGlobal.Formulae.ToString();
                    }
                }
                string x = null;
                for (int i = 0; i < productformulae.Length; i++)
                {
                    string specialChar = @"+-*/";
                    foreach (var item in specialChar)
                    {
                        if (productformulae[i].ToString().Contains(item))
                        {
                            if (x == null)
                                x = productformulae[i].ToString();
                            else
                                x = x + ',' + productformulae[i].ToString();
                        }
                    }
                }
                string[] arraystr = new string[x.Length];
                arraystr = x.ToString().Split(',');
                dtgvFormulae.Visible = false;
                string formdata = null, dtgvdata = null;
                decimal Result = 0;
                try
                {
                    int rowCount = Convert.ToInt32(dtgvFormulae.Rows.Count);
                    for (int ij = 0; ij < rowCount; ij++)
                    {
                        for (int j = 0; j < dtgvFormulae.Columns.Count; j++)
                        {
                            if (!string.IsNullOrEmpty(dtgvFormulae.Rows[ij].Cells[j].Value.ToString()))
                            {
                                String GridValue = dtgvFormulae.Rows[ij].Cells[j].Value.ToString();
                                if (!string.IsNullOrEmpty(dtgvFormulae.Rows[ij].Cells[j].Value.ToString()))  // condition added on 13042018 nilophar 
                                {
                                    dtgvdata = dtgvFormulae.Rows[ij].Cells[j].Value.ToString();
                                    if (formdata == null)
                                        formdata = dtgvdata + arraystr[j];
                                    else if (j == arraystr.Length)
                                        formdata = formdata + dtgvdata;
                                    else if (j == (arraystr.Length + 1) && j == (dtgvFormulae.Columns.Count - 4) && slabGroup == 'F')  //(Extra two columns Rate Increase and Rate Decrease)
                                    {
                                        formdata = formdata + "=" + Convert.ToString(Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero));
                                        Result = Result + Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else if (j == (arraystr.Length + 1) && j == (dtgvFormulae.Columns.Count - 2) && slabGroup == 'D')
                                    {
                                        formdata = formdata + "=" + Convert.ToString(Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero));
                                        Result = Result + Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else if (j == (dtgvFormulae.Columns.Count - 3) && slabGroup == 'F')
                                        formdata = formdata + " " + dtgvdata;
                                    else if (j == (dtgvFormulae.Columns.Count - 2) && slabGroup == 'F')
                                        formdata = formdata + " " + dtgvdata;
                                    else if (j == (arraystr.Length + 1) && Convert.ToString(dtgvFormulae.Columns[j].HeaderText) == "Result")
                                    {
                                        formdata = formdata + "=" + Convert.ToString(Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero));
                                        Result = Result + Math.Round(Convert.ToDecimal(dtgvdata), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else if (!string.IsNullOrEmpty(dtgvFormulae.Rows[ij].Cells["Name"].Value.ToString()) && Convert.ToString(dtgvFormulae.Columns[j].HeaderText) == "Name")
                                        formdata = formdata + " " + dtgvdata;
                                    else
                                        formdata = formdata + dtgvdata + arraystr[j];
                                }
                            }
                            else
                                formdata = formdata + " ";
                        }
                        if (ij != rowCount - 1)
                            formdata = formdata + ":";
                        else
                            formdata = formdata + "";
                    }
                }
                catch (Exception)
                { }
                if (formdata != null)
                    txtSubtitle.Text = formdata.ToString();
                txtQuantity.Text = Result.ToString();
                if (Result != 0)
                {
                    txtQuantity.Text = Result.ToString();
                    txtQuantity.Enabled = false;
                }
                else
                    txtQuantity.Enabled = true;
                getFormula = false;
                this.ActiveControl = txtrate;
            }
            catch (Exception)
            { }
        }

        public void batchData(string b, string exp, string[] porderno)
        {
            try
            {
                txtBatchNo.Text = b;
                txtExpiry.Text = exp;
                pono = porderno;
                if (txtProductname.Text != "")
                {
                    string proname = "", company = "", unit = "";
                    if ((txtProductname.Text).Contains(","))
                    {
                        try
                        {
                            proname = txtProductname.Text.Trim().Split(',')[0];
                            company = txtProductname.Text.Trim().Split(',')[1];
                            unit = txtProductname.Text.Trim().Split(',')[2];
                        }
                        catch (Exception)
                        { }

                        if (b.Contains(','))
                        {
                            string[] btchArray = b.Split(',');
                            string[] exArray = exp.Split(',');
                            for (int q = 0; q < btchArray.Length; q++)
                            {
                                if (pono[q] != null)
                                {
                                    if (pono[q].Contains(','))
                                    {
                                        string[] pn = pono[q].Split(',');
                                        for (int j = 0; j < pn.Length; j++)
                                        {
                                            PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                                            PurchaseDetail purdata = new PurchaseDetail();
                                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                            PurchaseMaster PMasterData = new PurchaseMaster();
                                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pn[pn.Length - 1]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (PMasterData != null)
                                                purdata = purdtlrepo.GetAll().Where(t => t.ProductName == proname && t.Unit == unit && t.CompanyName == company && t.PorderNo == Convert.ToInt32(pn[pn.Length - 1]) && t.BatchNo == btchArray[q] && t.ExpireDate.Value.ToString("dd/MM/yyyy") == exArray[q] && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (purdata != null)
                                            {
                                                if (q == 0)
                                                    lblprepurrate.Text = Convert.ToString(purdata.PurchasePrice) + "/";
                                                else
                                                    lblprepurrate.Text = lblprepurrate.Text + ", " + Convert.ToString(purdata.PurchasePrice) + "/";
                                                if (Convert.ToDecimal(purdata.Vat) > 0)
                                                {
                                                    decimal purprice = (Convert.ToDecimal(purdata.PurchasePrice) * Convert.ToDecimal(purdata.Vat) / 100);
                                                    var purpriceReound = Math.Round(purprice, 2, MidpointRounding.AwayFromZero);
                                                }
                                                if (purdata.Barcode != null)
                                                    barcode = purdata.Barcode;
                                                else if (purdata.StaticBarcode != null)
                                                    barcode = purdata.StaticBarcode;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                                        PurchaseDetail purdata = new PurchaseDetail();
                                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                        PurchaseMaster PMasterData = new PurchaseMaster();
                                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData != null)
                                            purdata = purdtlrepo.GetAll().Where(t => t.ProductName == proname && t.Unit == unit && t.CompanyName == company && t.PorderNo == Convert.ToInt32(pono[q]) && t.BatchNo == btchArray[q] && t.ExpireDate.Value.ToString("dd/MM/yyyy") == exArray[q] && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (purdata != null)
                                        {
                                            if (q == 0)
                                                lblprepurrate.Text = Convert.ToString(purdata.PurchasePrice) + "/";
                                            else
                                                lblprepurrate.Text = lblprepurrate.Text + ", " + Convert.ToString(purdata.PurchasePrice) + "/";
                                            if (Convert.ToDecimal(purdata.Vat) > 0)
                                            {
                                                decimal purprice = (Convert.ToDecimal(purdata.PurchasePrice) * Convert.ToDecimal(purdata.Vat) / 100);
                                                var purpriceReound = Math.Round(purprice, 2, MidpointRounding.AwayFromZero);
                                            }
                                            if (purdata.Barcode != null)
                                                barcode = purdata.Barcode;
                                            else if (purdata.StaticBarcode != null)
                                                barcode = purdata.StaticBarcode;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                            PurchaseDetail purdata = new PurchaseDetail();
                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                            PurchaseMaster PMasterData = new PurchaseMaster();
                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (PMasterData != null)
                                purdata = purdtlrepo.GetAll().Where(t => t.ProductName == proname && t.Unit == unit && t.CompanyName == company && t.PorderNo == Convert.ToInt32(pono[0]) && t.BatchNo == b && t.ExpireDate.Value.ToString("dd/MM/yyyy") == exp && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            decimal purprice = 0;
                            if (purdata != null)
                            {
                                lblprepurrate.Text = Convert.ToString(purdata.PurchasePrice) + " /-";
                                if (Convert.ToDecimal(purdata.Vat) > 0)
                                    purprice = (Convert.ToDecimal(purdata.PurchasePrice) * Convert.ToDecimal(purdata.Vat) / 100);
                                else
                                {
                                    PurchaseMasterRepository pMastrepo = new PurchaseMasterRepository();
                                    decimal masterVat = Convert.ToDecimal(pMastrepo.GetAll().Where(t => t.Id == purdata.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault().Vat);
                                    if (masterVat > 0)
                                    {
                                        PurchaseDetailRepository purdtlrepo1 = new PurchaseDetailRepository();
                                        List<PurchaseDetail> purlist = new List<PurchaseDetail>();
                                        purlist = purdtlrepo.GetAll().Where(t => t.PorderNo == purdata.PorderNo && t.PurchaseMaster.CompId == CommonMethod.CompId).ToList();
                                        int availablevat = 0;
                                        foreach (var item in purlist)
                                        {
                                            if (item.Vat > 0)
                                            {
                                                availablevat = 1;
                                                break;
                                            }
                                        }
                                        if (availablevat == 0)
                                            purprice = (Convert.ToDecimal(purdata.PurchasePrice) * masterVat / 100);
                                    }
                                }
                                if (purdata.Barcode != null)
                                    barcode = purdata.Barcode;
                                else if (purdata.StaticBarcode != null)
                                    barcode = purdata.StaticBarcode;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void AdjustPanelDetails(int product_entrytype)
        {
            if (product_entrytype == 1 || product_entrytype == 2)  //producttype == 0 && (WithBatchExp == "Y" || onlyBatch == "Y")
            {
                // 1 - krushi with batch and expiry
                txtBatchNo.Enabled = true;
                txtExpiry.Enabled = true;
                txtpCess.Text = "0";
                txtpCess.Enabled = false;
                txtpcommRs.Enabled = false;
                txtpcomm.Enabled = false;
                dtgvSize.Enabled = false;
                txtsizefrom.Enabled = false;
                txtsizegap.Enabled = false;
                txtsizeto.Enabled = false;
                pnlIntegratedDtls.Visible = true;
                if (product_entrytype == 2)
                    txtExpiry.Enabled = false;
                this.ActiveControl = txtBatchNo;
            }
            else if (product_entrytype == 4)// without size //matrix
            {
                txtBatchNo.Enabled = false;
                txtExpiry.Enabled = false;
                txtsizefrom.Enabled = false;
                txtsizeto.Enabled = false;
                txtsizegap.Enabled = false;
                dtgvSize.Enabled = false;
                pnlIntegratedDtls.Visible = false;
            }
            else if (product_entrytype == 3)  // With Size
            {
                txtBatchNo.Enabled = false;
                txtExpiry.Enabled = false;
                txtsizefrom.Enabled = true;
                txtsizeto.Enabled = true;
                txtsizegap.Enabled = true;
                dtgvSize.Enabled = true;
                pnlIntegratedDtls.Visible = true;
            }
        }

        public void batchtableenrty(int i)
        {
            try
            {
                PurchaseDetailRepository ppRepo = new PurchaseDetailRepository();
                Batch batchData = new Batch();
                BatchRepository batchRepo = new BatchRepository();

                decimal netQty = 0, rQty = 0;
                List<decimal> nQty = new List<decimal>();
                string proname = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                string company = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                string unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                string bStr = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                string exStr = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);

                if (bStr.Contains(','))
                {
                    string[] btchArray = bStr.Split(',');
                    string[] exArray = exStr.Split(',');
                    for (int q = 0; q < btchArray.Length; q++)
                    {
                        if (pono[q] != null)
                        {
                            if (pono[q].Contains(','))
                            {
                                string[] pn = pono[q].Split(',');
                                for (int j = 0; j < pn.Length; j++)
                                {
                                    ppRepo = new PurchaseDetailRepository();
                                    PurchaseDetail purdetail = new PurchaseDetail();
                                    PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                    PurchaseMaster PMasterData = new PurchaseMaster();
                                    PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData != null)
                                        purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pn[j]) && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    decimal prqty = 0;
                                    try
                                    {
                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                    }
                                    catch (Exception)
                                    {
                                        prqty = 0;
                                    }

                                    decimal purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                    batchData.ProductName = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                    batchData.ManufactureCompany = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                    batchData.Unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                    batchData.Quantity = purcahseQty;
                                    batchData.BatchNo = btchArray[q];
                                    batchData.ExpiryDate = Convert.ToDateTime(exArray[q]);
                                    batchData.BillId = txtbillno.Text;
                                    batchData.MasterBillNo = txtbillno.Text; //nilophar 07032018
                                    batchData.PorderNo = Convert.ToInt32(pn[j]);
                                    var bData = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).FirstOrDefault();

                                    //new code strat
                                    if (bData != null)
                                    {
                                        BatchRepository bbrepo = new BatchRepository();
                                        decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.Status != "0" && t.PorderNo == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                        decimal srqty1 = 0;
                                        try
                                        {
                                            BatchRepository batchrpstr = new BatchRepository();
                                            List<Batch> BData = new List<Batch>();
                                            BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).ToList();
                                            if (BData != null)
                                            {
                                                foreach (var item1 in BData)
                                                {
                                                    try
                                                    {
                                                        GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                        GoodReturnDetail SRData = new GoodReturnDetail();
                                                        SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (SRData != null)
                                                            srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                    }
                                                    catch (Exception)
                                                    { }
                                                }
                                            }
                                        }
                                        catch (Exception)
                                        {
                                            srqty1 = 0;
                                        }
                                        netQty = (purcahseQty - prqty) - (batchQty - srqty1);
                                        bbrepo.Dispose();
                                    }
                                    else
                                        netQty = purcahseQty - prqty;
                                    if (q == 0 && j == 0)
                                    {
                                        if (netQty == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                            batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        else if (netQty > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                        {
                                            batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            netQty = netQty - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        }
                                        else
                                        {
                                            batchData.UsedQty = netQty;
                                            rQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) - netQty;
                                        }
                                    }
                                    else
                                    {
                                        if (netQty == rQty)
                                            batchData.UsedQty = rQty;
                                        else if (netQty > rQty)
                                        {
                                            batchData.UsedQty = rQty;
                                            netQty = netQty - rQty;
                                        }
                                        else
                                        {
                                            batchData.UsedQty = netQty;
                                            rQty = rQty - netQty;
                                        }
                                    }
                                    batchData.Status = "0";
                                    batchData.CompId = CommonMethod.CompId;
                                    batchData.TransactionYear = CommonMethod.TransactionYear;
                                    batchRepo.Add(batchData);
                                    batchRepo.Save();
                                    try
                                    {
                                        PurchaseDetail pData = new PurchaseDetail();
                                        BatchRepository brepo = new BatchRepository();
                                        string bNo = btchArray[q];
                                        decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                        decimal srqty = 0;
                                        try
                                        {
                                            BatchRepository batchrpstr = new BatchRepository();
                                            List<Batch> BData = new List<Batch>();
                                            BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).ToList();
                                            if (BData != null)
                                            {
                                                foreach (var item1 in BData)
                                                {
                                                    try
                                                    {
                                                        GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                        GoodReturnDetail SRData = new GoodReturnDetail();
                                                        SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (SRData != null)
                                                            srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                    }
                                                    catch (Exception)
                                                    { }
                                                }
                                            }
                                        }
                                        catch (Exception)
                                        {
                                            srqty = 0;
                                        }
                                        if ((purcahseQty - prqty) == (uQty - srqty))
                                        {
                                            pMastRepo = new PurchaseMasterRepository();
                                            PurchaseDetail purdetail11 = new PurchaseDetail();
                                            PurchaseMaster PMasterData1 = new PurchaseMaster();
                                            PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (PMasterData1 != null)
                                                purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(pn[j]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            pData = ppRepo.GetById(purdetail11.Id);
                                            pData.Status = "Inactive";
                                            ppRepo.Edit(pData);
                                            ppRepo.Save();
                                        }
                                        else
                                        {
                                            pMastRepo = new PurchaseMasterRepository();
                                            PurchaseDetail purdetail11 = new PurchaseDetail();
                                            PurchaseMaster PMasterData1 = new PurchaseMaster();
                                            PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pn[j]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (PMasterData1 != null)
                                                purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(pn[j]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            pData = ppRepo.GetById(purdetail11.Id);
                                            pData.Status = "Active";
                                            ppRepo.Edit(pData);
                                            ppRepo.Save();
                                        }
                                        brepo.Dispose();
                                    }
                                    catch (Exception)
                                    { }
                                }
                            }
                            else
                            {
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pono[q]) && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }

                                decimal purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                batchData.ProductName = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                batchData.ManufactureCompany = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                batchData.Unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                batchData.Quantity = purcahseQty;
                                batchData.BatchNo = btchArray[q];
                                batchData.ExpiryDate = Convert.ToDateTime(exArray[q]);
                                batchData.BillId = txtbillno.Text;
                                batchData.MasterBillNo = txtbillno.Text;
                                batchData.PorderNo = Convert.ToInt32(pono[q]);
                                var bData = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).FirstOrDefault();

                                //new code strat
                                if (bData != null)
                                {
                                    BatchRepository bbrepo = new BatchRepository();
                                    decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.Status != "0" && t.PorderNo == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty1 = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty1 = 0;
                                    }
                                    netQty = (purcahseQty - prqty) - (batchQty - srqty1);
                                    bbrepo.Dispose();
                                }
                                else
                                    netQty = purcahseQty - prqty;
                                if (q == 0)
                                {
                                    if (netQty == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                        batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                    else if (netQty > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                    {
                                        batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        netQty = netQty - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                    }
                                    else
                                    {
                                        batchData.UsedQty = netQty;
                                        rQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) - netQty;
                                    }
                                }
                                else
                                {
                                    if (netQty == rQty)
                                        batchData.UsedQty = rQty;
                                    else if (netQty > rQty)
                                    {
                                        batchData.UsedQty = rQty;
                                        netQty = netQty - rQty;
                                    }
                                    else
                                    {
                                        batchData.UsedQty = netQty;
                                        rQty = rQty - netQty;
                                    }
                                }
                                batchData.Status = "0";
                                batchData.CompId = CommonMethod.CompId;
                                batchData.TransactionYear = CommonMethod.TransactionYear;
                                batchRepo.Add(batchData);
                                batchRepo.Save();
                                try
                                {
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = btchArray[q];
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(pono[q]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[q]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(pono[q]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        //end of PurchaseDetail status change code
                    }
                }
                else
                {
                    List<PurchaseDetail> purdetail = new List<PurchaseDetail>();
                    decimal purcahseQty = 0, netQty1 = 0;
                    if (pono[0] != null)
                    {
                        if (pono[0].Contains(','))
                        {
                            string[] porderno = pono[0].Split(',');
                            for (int l = 0; l < porderno.Length; l++)
                            {
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail1 = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail1 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(porderno[l]) && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                purcahseQty = Convert.ToDecimal(purdetail1.Quantity) + Convert.ToDecimal(purdetail1.FreeQty);
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail1.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }
                                var bData = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).FirstOrDefault();

                                if (bData != null)
                                {
                                    BatchRepository bbrepo = new BatchRepository();
                                    decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.Status != "0" && t.PorderNo == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty1 = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty1 = 0;
                                    }
                                    netQty1 = (purcahseQty - prqty) - (batchQty - srqty1);
                                    bbrepo.Dispose();
                                }
                                else
                                    netQty1 = purcahseQty - prqty;

                                batchData.ProductName = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                batchData.ManufactureCompany = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                                batchData.Unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                                batchData.Quantity = purcahseQty;
                                batchData.BatchNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                batchData.ExpiryDate = DateTime.ParseExact(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                batchData.BillId = txtbillno.Text;
                                batchData.MasterBillNo = txtbillno.Text;
                                batchData.PorderNo = Convert.ToInt32(porderno[l]);
                                //new code strat
                                if (l == 0)
                                {
                                    if (netQty1 == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                        batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                    else if (netQty1 > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                    {
                                        batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        netQty1 = netQty1 - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                    }
                                    else
                                    {
                                        batchData.UsedQty = netQty1;
                                        rQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) - netQty1;
                                    }
                                }
                                else
                                {
                                    if (netQty1 == rQty)
                                        batchData.UsedQty = rQty;
                                    else if (netQty1 > rQty)
                                    {
                                        batchData.UsedQty = rQty;
                                        netQty1 = netQty1 - rQty;
                                    }
                                    else
                                    {
                                        batchData.UsedQty = netQty1;
                                        rQty = rQty - netQty1;
                                    }
                                }
                                batchData.Status = "0";
                                batchData.CompId = CommonMethod.CompId;
                                batchData.TransactionYear = CommonMethod.TransactionYear;
                                batchRepo.Add(batchData);
                                batchRepo.Save();
                                try
                                {
                                    //start of PurchaseDetail status change code
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(porderno[l]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(porderno[l]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(porderno[l]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        else
                        {
                            ppRepo = new PurchaseDetailRepository();
                            PurchaseDetail purdetail1 = new PurchaseDetail();
                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                            PurchaseMaster PMasterData = new PurchaseMaster();
                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (PMasterData != null)
                                purdetail1 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(pono[0]) && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            decimal prqty = 0;
                            try
                            {
                                PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail1.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                prqty = Convert.ToDecimal(PurDData.Quantity);
                            }
                            catch (Exception)
                            {
                                prqty = 0;
                            }
                            purcahseQty = Convert.ToDecimal(purdetail1.Quantity) + Convert.ToDecimal(purdetail1.FreeQty);
                            batchData.ProductName = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                            batchData.ManufactureCompany = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                            batchData.Unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                            batchData.Quantity = purcahseQty;
                            batchData.BatchNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                            if (GvProductInfo.Rows[i].Cells["ExpiryDate"].Value != null)
                                batchData.ExpiryDate = DateTime.ParseExact(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            else
                                batchData.ExpiryDate = null;
                            batchData.BillId = txtbillno.Text;
                            batchData.MasterBillNo = txtbillno.Text;
                            batchData.PorderNo = Convert.ToInt32(pono[0]);
                            var bData = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            //new code strat
                            if (bData != null)
                            {
                                BatchRepository bbrepo = new BatchRepository();
                                decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.Status != "0" && t.PorderNo == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty1 = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (SRData != null)
                                                    srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty1 = 0;
                                }
                                netQty1 = (purcahseQty - prqty) - (batchQty - srqty1);
                                bbrepo.Dispose();
                            }
                            else
                                netQty1 = purcahseQty - prqty;
                            if (netQty1 == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                            else if (netQty1 > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                batchData.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                            batchData.Status = "0";
                            batchData.CompId = CommonMethod.CompId;
                            batchData.TransactionYear = CommonMethod.TransactionYear;
                            batchRepo.Add(batchData);
                            batchRepo.Save();
                            try
                            {
                                //start of PurchaseDetail status change code
                                PurchaseDetail pData = new PurchaseDetail();
                                BatchRepository brepo = new BatchRepository();
                                string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty = 0;
                                }
                                if ((purcahseQty - prqty) == (uQty - srqty))
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == Convert.ToInt32(pono[0]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Inactive";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                else
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == Convert.ToInt32(pono[0]) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == Convert.ToInt32(pono[0]) && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Active";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                brepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                    }
                    //end of PurchaseDetail status change code
                }
                ppRepo.Dispose(); batchRepo.Dispose();
            }
            catch (Exception)
            { }
            //end of Batch table entry code
        }

        public void changestatusto_purchase(int i, int custdtid)
        {
            //start Batch table entry code
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                PurchaseDetailRepository ppRepo = new PurchaseDetailRepository();
                BatchRepository batchRepo = new BatchRepository();
                List<decimal> nQty = new List<decimal>();
                string proname = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                string company = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                string unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                string bStr = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                string exStr = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                if (bStr.Contains(','))
                {
                    string[] btchArray = bStr.Split(',');
                    string[] exArray = exStr.Split(',');
                    for (int q = 0; q < btchArray.Length; q++)
                    {
                        decimal purcahseQty = 0;
                        BatchRepository batchrepo = new BatchRepository();
                        List<Batch> batchdata2 = batchrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.CompId == CommonMethod.CompId).ToList();
                        if (batchdata2 != null)
                        {
                            foreach (var item in batchdata2)
                            {
                                batchRepo = new BatchRepository();
                                var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                                if (batchdata1 != null)
                                {
                                    batchdata1.BillId = custdtid.ToString();
                                    batchdata1.Status = "0";
                                    batchRepo.Edit(batchdata1);
                                    batchRepo.Save();
                                }
                                try
                                {
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = btchArray[q];
                                    ppRepo = new PurchaseDetailRepository();
                                    PurchaseDetail purdetail = new PurchaseDetail();
                                    PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                    PurchaseMaster PMasterData = new PurchaseMaster();
                                    PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData != null)
                                        purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    decimal prqty = 0;
                                    try
                                    {
                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                    }
                                    catch (Exception)
                                    {
                                        prqty = 0;
                                    }
                                    purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        batchrepo.Dispose();
                    }
                }
                else
                {
                    decimal purcahseQty = 0;
                    List<Batch> batchdata2 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == custdtid.ToString() && t.CompId == CommonMethod.CompId).ToList();
                    if (batchdata2 != null)
                    {
                        foreach (var item in batchdata2)
                        {
                            batchRepo = new BatchRepository();
                            var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == custdtid.ToString() && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                            if (batchdata1 != null)
                            {
                                batchdata1.BillId = custdtid.ToString();
                                batchdata1.Status = "0";
                                batchRepo.Edit(batchdata1);
                                batchRepo.Save();
                            }
                            try
                            {
                                //start of PurchaseDetail status change code
                                PurchaseDetail pData = new PurchaseDetail();
                                BatchRepository brepo = new BatchRepository();
                                string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }
                                purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (SRData != null)
                                                    srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty = 0;
                                }
                                if ((purcahseQty - prqty) == (uQty - srqty))
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Inactive";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                else
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Active";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                brepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                    }
                }
                custmrepo.Dispose(); ppRepo.Dispose(); batchRepo.Dispose();
            }
            catch (Exception)
            { }
            //end of Batch table entry code
        }

        public void changestatusto_purchase1(int i, int custdtid)
        {
            //start Batch table entry code
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                PurchaseDetailRepository ppRepo = new PurchaseDetailRepository();
                BatchRepository batchRepo = new BatchRepository();
                List<decimal> nQty = new List<decimal>();
                string proname = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                string company = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                string unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                string bStr = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                string exStr = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                if (bStr.Contains(','))
                {
                    string[] btchArray = bStr.Split(',');
                    string[] exArray = exStr.Split(',');
                    for (int q = 0; q < btchArray.Length; q++)
                    {
                        decimal purcahseQty = 0;
                        BatchRepository batchrepo = new BatchRepository();
                        List<Batch> batchdata2 = batchrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.CompId == CommonMethod.CompId).ToList();
                        if (batchdata2 != null)
                        {
                            foreach (var item in batchdata2)
                            {
                                batchRepo = new BatchRepository();
                                var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                                if (batchdata1 != null)
                                {
                                    if (custdtid == Convert.ToInt32(txtbillno.Text))
                                    {
                                        var custmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                        if (custmdata != null)
                                        {
                                            CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                                            var detaildata = custdtlrepo.GetAll().Where(t => t.ProductId == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bStr && t.BillNo == custmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (detaildata != null)
                                            {
                                                custdtid = detaildata.Id;
                                                batchdata1.BillId = custdtid.ToString();
                                            }
                                        }
                                        custdtid = Convert.ToInt32(txtbillno.Text);
                                    }
                                    else
                                        batchdata1.BillId = custdtid.ToString();
                                    batchdata1.Status = "0";
                                    batchRepo.Edit(batchdata1);
                                    batchRepo.Save();
                                }
                                try
                                {
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = btchArray[q];
                                    ppRepo = new PurchaseDetailRepository();
                                    PurchaseDetail purdetail = new PurchaseDetail();
                                    PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                    PurchaseMaster PMasterData = new PurchaseMaster();
                                    PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData != null)
                                        purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    decimal prqty = 0;
                                    try
                                    {
                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                    }
                                    catch (Exception)
                                    {
                                        prqty = 0;
                                    }
                                    purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        batchrepo.Dispose();
                    }
                }
                else
                {
                    decimal purcahseQty = 0;
                    List<Batch> batchdata2 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == custdtid.ToString() && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                    if (batchdata2 != null)
                    {
                        foreach (var item in batchdata2)
                        {
                            batchRepo = new BatchRepository();
                            var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == custdtid.ToString() && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                            if (batchdata1 != null)
                            {
                                int newcustdtid = 0;
                                if (custdtid == Convert.ToInt32(txtbillno.Text))
                                {
                                    var custmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                    if (custmdata != null)
                                    {
                                        CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                                        var detaildata = custdtlrepo.GetAll().Where(t => t.ProductId == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bStr && t.BillNo == custmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (detaildata != null)
                                            newcustdtid = detaildata.Id;
                                        custdtlrepo.Dispose();
                                    }
                                }
                                batchdata1.BillId = newcustdtid.ToString();
                                batchdata1.Status = "0";
                                batchRepo.Edit(batchdata1);
                                batchRepo.Save();
                            }
                            try
                            {
                                //start of PurchaseDetail status change code
                                PurchaseDetail pData = new PurchaseDetail();
                                BatchRepository brepo = new BatchRepository();
                                string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }
                                purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);

                                decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (SRData != null)
                                                    srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty = 0;
                                }
                                if ((purcahseQty - prqty) == (uQty - srqty))
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Inactive";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                else
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Active";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                brepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                    }
                }
                custmrepo.Dispose(); ppRepo.Dispose(); batchRepo.Dispose();
            }
            catch (Exception)
            { }
            //end of Batch table entry code
        }

        public void updatebatchtableenrty(int i, int custdtid)
        {
            //start Batch table entry code
            try
            {
                PurchaseDetailRepository ppRepo = new PurchaseDetailRepository();
                BatchRepository batchRepo = new BatchRepository();
                decimal netQty = 0, rQty = 0;
                List<decimal> nQty = new List<decimal>();
                string proname = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                string company = Convert.ToString(GvProductInfo.Rows[i].Cells["Company"].Value);
                string unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                string bStr = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                string exStr = Convert.ToString(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value);
                if (bStr.Contains(','))
                {
                    string[] btchArray = bStr.Split(',');
                    string[] exArray = exStr.Split(',');
                    for (int q = 0; q < btchArray.Length; q++)
                    {
                        decimal purcahseQty = 0;
                        BatchRepository batchrepo = new BatchRepository();
                        List<Batch> batchdata2 = batchrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.MasterBillNo == txtbillno.Text && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                        if (batchdata2 != null)
                        {
                            foreach (var item in batchdata2)
                            {
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }
                                purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                batchRepo = new BatchRepository();
                                batchrepo = new BatchRepository();
                                var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.MasterBillNo == Convert.ToString(txtbillno.Text) && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                                if (batchdata1 != null)
                                {
                                    BatchRepository bbrepo = new BatchRepository();
                                    decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty1 = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (SRData != null)
                                                        srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty1 = 0;
                                    }
                                    netQty = (purcahseQty - prqty) - (batchQty - srqty1);
                                    batchdata1.Quantity = purcahseQty;
                                    batchdata1.BatchNo = btchArray[q];
                                    batchdata1.ExpiryDate = Convert.ToDateTime(exArray[q]);
                                    batchdata1.BillId = txtbillno.Text;
                                    if (q == 0)
                                    {
                                        if (netQty == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                            batchdata1.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        else if (netQty > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                        {
                                            batchdata1.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            netQty = netQty - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        }
                                        else
                                        {
                                            batchdata1.UsedQty = netQty;
                                            rQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) - netQty;
                                        }
                                    }
                                    else
                                    {
                                        if (netQty == rQty)
                                            batchdata1.UsedQty = rQty;
                                        else if (netQty > rQty)
                                        {
                                            batchdata1.UsedQty = rQty;
                                            netQty = netQty - rQty;
                                        }
                                        else
                                        {
                                            batchdata1.UsedQty = netQty;
                                            rQty = rQty - netQty;
                                        }
                                    }
                                    batchdata1.Status = "0";
                                    batchRepo.Edit(batchdata1);
                                    batchRepo.Save();
                                    bbrepo.Dispose();
                                }
                                try
                                {
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = btchArray[q];
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        int id = purdetail11.Id;
                                        pData = ppRepo.GetById(id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        int id = purdetail11.Id;
                                        pData = ppRepo.GetById(id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        else
                            batchtableenrty(i);
                        batchrepo.Dispose();
                        //end of PurchaseDetail status change code
                    }
                }
                else
                {
                    decimal purcahseQty = 0, netQty1 = 0;
                    BatchRepository batchrepo = new BatchRepository();
                    List<Batch> batchdata2 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.MasterBillNo == Convert.ToString(txtbillno.Text) && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                    if (batchdata2 != null)
                    {
                        foreach (var item in batchdata2)
                        {
                            ppRepo = new PurchaseDetailRepository();
                            PurchaseDetail purdetail = new PurchaseDetail();
                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                            PurchaseMaster PMasterData = new PurchaseMaster();
                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (PMasterData != null)
                                purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            decimal prqty = 0;
                            try
                            {
                                PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                prqty = Convert.ToDecimal(PurDData.Quantity);
                            }
                            catch (Exception)
                            {
                                prqty = 0;
                            }
                            purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                            batchRepo = new BatchRepository();
                            var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.MasterBillNo == txtbillno.Text && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                            if (batchdata1 != null)
                            {
                                BatchRepository bbrepo = new BatchRepository();
                                decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty1 = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty1 = 0;
                                }
                                netQty1 = (purcahseQty - prqty) - (batchQty - srqty1);
                                batchdata1.Quantity = purcahseQty;
                                batchdata1.BatchNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                batchdata1.ExpiryDate = DateTime.ParseExact(GvProductInfo.Rows[i].Cells["ExpiryDate"].Value.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                batchdata1.BillId = txtbillno.Text;
                                if (netQty1 == Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                    batchdata1.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                else if (netQty1 > Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value))
                                    batchdata1.UsedQty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                batchdata1.Status = "0";
                                batchRepo.Edit(batchdata1);
                                batchRepo.Save();
                                bbrepo.Dispose();
                            }
                            try
                            {
                                //start of PurchaseDetail status change code
                                PurchaseDetail pData = new PurchaseDetail();
                                BatchRepository brepo = new BatchRepository();
                                string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                                decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty = 0;
                                }
                                if ((purcahseQty - prqty) == (uQty - srqty))
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    int id = purdetail11.Id;
                                    pData = ppRepo.GetById(id);
                                    pData.Status = "Inactive";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                else
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    int id = purdetail11.Id;
                                    pData = ppRepo.GetById(id);
                                    pData.Status = "Active";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                brepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                        batchrepo.Dispose();
                    }
                    else
                        batchtableenrty(i);
                }
                ppRepo.Dispose(); batchRepo.Dispose();
            }
            catch (Exception)
            { }
            //end of Batch table entry code
        }

        public void checkcustdtlnbatch()
        {
            try
            {
                for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                {
                    changestatusto0(i, Convert.ToInt32(txtbillno.Text));
                }
                statuschangebillrecords();
                removeduplicate();
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> custdtllist = new List<CustomerBillDetail>();
                var custdtmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (custdtmdata != null)
                {
                    custdtllist = custdtlrepo.GetAll().Where(t => t.BillNo == custdtmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                    if (custdtllist.Count > 0)
                    {
                        foreach (var item in custdtllist)
                        {
                            GoodDetailRepository SRRepo1 = new GoodDetailRepository();
                            GoodReturnDetail SRData1 = new GoodReturnDetail();
                            SRData1 = SRRepo1.GetAll().Where(t => t.BNID == item.Id && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (SRData1 == null)
                            {
                                string billid = "", batchno = "";
                                decimal qty = 0;
                                billid = Convert.ToString(item.Id);
                                batchno = item.BatchNo;
                                qty = Convert.ToDecimal(item.Quantity);

                                if (batchno.Contains(','))
                                {
                                    string[] btchArray = batchno.Split(',');
                                    string[] exArray = item.Expiry.Split(',');
                                    for (int q = 0; q < btchArray.Length; q++)
                                    {
                                        BatchRepository batchrepo1 = new BatchRepository();
                                        List<Batch> batchlist = new List<Batch>();
                                        batchlist = batchrepo1.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(item.Id) && t.CompId == CommonMethod.CompId).ToList();
                                        if (batchlist.Count > 0)
                                        {
                                            int p = 0;
                                            foreach (var batchitem in batchlist)
                                            {
                                                decimal netQty = 0;
                                                PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                                                PurchaseDetail purdetail = new PurchaseDetail();
                                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                PurchaseMaster PMasterData = new PurchaseMaster();
                                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (PMasterData != null)
                                                    purdetail = purdtlrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.CompanyName == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.PorderNo == batchitem.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                decimal purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                                decimal prqty = 0;
                                                try
                                                {
                                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                                }
                                                catch (Exception)
                                                {
                                                    prqty = 0;
                                                }
                                                BatchRepository batchRepo = new BatchRepository();
                                                var bData = batchRepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(item.Id) && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (bData != null)
                                                {
                                                    BatchRepository bbrepo = new BatchRepository();
                                                    decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.PorderNo == batchitem.PorderNo && t.Status == "1" && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                    decimal srqty1 = 0;
                                                    try
                                                    {
                                                        BatchRepository batchrpstr = new BatchRepository();
                                                        List<Batch> BData = new List<Batch>();
                                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                        if (BData != null)
                                                        {
                                                            foreach (var item1 in BData)
                                                            {
                                                                try
                                                                {
                                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                    srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                                }
                                                                catch (Exception)
                                                                { }
                                                            }
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                        srqty1 = 0;
                                                    }
                                                    netQty = (purcahseQty - prqty) - (batchQty - srqty1);
                                                    bbrepo.Dispose();
                                                }
                                                else
                                                    netQty = purcahseQty - prqty;
                                                if (qty >= netQty)
                                                {
                                                    bData.UsedQty = netQty;
                                                    qty = qty - netQty;
                                                }
                                                else
                                                    bData.UsedQty = qty;
                                                bData.Status = "1";
                                                batchRepo.Edit(bData);
                                                batchRepo.Save();
                                                BatchRepository brepo = new BatchRepository();
                                                decimal tudqty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.Status == "1" && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                decimal srqty = 0;
                                                try
                                                {
                                                    BatchRepository batchrpstr = new BatchRepository();
                                                    List<Batch> BData = new List<Batch>();
                                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.Status == "1" && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                    if (BData != null)
                                                    {
                                                        foreach (var item1 in BData)
                                                        {
                                                            try
                                                            {
                                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                            }
                                                            catch (Exception)
                                                            { }
                                                        }
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                    srqty = 0;
                                                }
                                                PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                                                PurchaseDetail purdata = new PurchaseDetail();
                                                pMastRepo = new PurchaseMasterRepository();
                                                PurchaseMaster PMasterData1 = new PurchaseMaster();
                                                PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (PMasterData != null)
                                                    purdata = purchaserepo.GetAll().Where(t => t.ProductName == item.ProductId && t.CompanyName == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.PorderNo == batchitem.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                decimal pqty = 0, prqty1 = 0;
                                                pqty = Convert.ToDecimal(purdata.Quantity);
                                                try
                                                {
                                                    PReturnDetailRepository PurRDRepo1 = new PReturnDetailRepository();
                                                    var PurDData1 = PurRDRepo1.GetAll().Where(t => t.POID == purdata.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    prqty1 = Convert.ToDecimal(PurDData1.Quantity);
                                                }
                                                catch (Exception)
                                                {
                                                    prqty1 = 0;
                                                }
                                                if ((tudqty - srqty) == (pqty - prqty1))
                                                {
                                                    purdata.Status = "Inactive";
                                                    purchaserepo.Edit(purdata);
                                                    purchaserepo.Save();
                                                }
                                                else
                                                {
                                                    purdata.Status = "Active";
                                                    purchaserepo.Edit(purdata);
                                                    purchaserepo.Save();
                                                }
                                                purchaserepo.Dispose(); brepo.Dispose(); batchRepo.Dispose(); purdtlrepo.Dispose();
                                                p++;
                                            }
                                        }
                                        batchrepo1.Dispose();
                                    }
                                }
                                else
                                {
                                    BatchRepository batchrepo1 = new BatchRepository();
                                    List<Batch> batchlist = new List<Batch>();
                                    batchlist = batchrepo1.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.BillId == Convert.ToString(item.Id) && t.CompId == CommonMethod.CompId).ToList();
                                    if (batchlist.Count > 0)
                                    {
                                        int p = 0;
                                        foreach (var batchitem in batchlist)
                                        {
                                            decimal netQty = 0;
                                            PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();

                                            PurchaseDetail purdetail = new PurchaseDetail();
                                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                            PurchaseMaster PMasterData = new PurchaseMaster();
                                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (PMasterData != null)
                                            {
                                                purdetail = purdtlrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.CompanyName == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.PorderNo == batchitem.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            }
                                            decimal purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                            decimal prqty = 0;
                                            try
                                            {
                                                PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                prqty = Convert.ToDecimal(PurDData.Quantity);
                                            }
                                            catch (Exception)
                                            {
                                                prqty = 0;
                                            }
                                            BatchRepository batchRepo = new BatchRepository();
                                            var bData = batchRepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.BillId == Convert.ToString(item.Id) && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (bData != null)
                                            {
                                                BatchRepository bbrepo = new BatchRepository();
                                                decimal batchQty = Convert.ToDecimal(bbrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.PorderNo == batchitem.PorderNo && t.Status == "1" && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                decimal srqty1 = 0;
                                                try
                                                {
                                                    BatchRepository batchrpstr = new BatchRepository();
                                                    List<Batch> BData = new List<Batch>();
                                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                    if (BData != null)
                                                    {
                                                        foreach (var item1 in BData)
                                                        {
                                                            try
                                                            {
                                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                srqty1 = srqty1 + Convert.ToDecimal(SRData.Quantity);
                                                            }
                                                            catch (Exception)
                                                            { }
                                                        }
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                    srqty1 = 0;
                                                }
                                                netQty = (purcahseQty - prqty) - (batchQty - srqty1);
                                                bbrepo.Dispose();
                                            }
                                            else
                                                netQty = purcahseQty - prqty;
                                            if (qty != 0)
                                            {
                                                if (qty >= netQty)
                                                {
                                                    bData.UsedQty = netQty;
                                                    qty = qty - netQty;
                                                }
                                                else
                                                    bData.UsedQty = qty;
                                                bData.Status = "1";
                                                batchRepo.Edit(bData);
                                                batchRepo.Save();
                                                BatchRepository brepo = new BatchRepository();
                                                decimal tudqty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.Status == "1" && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                decimal srqty = 0;
                                                try
                                                {
                                                    BatchRepository batchrpstr = new BatchRepository();
                                                    List<Batch> BData = new List<Batch>();
                                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.Status == "1" && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                    if (BData != null)
                                                    {
                                                        foreach (var item1 in BData)
                                                        {
                                                            try
                                                            {
                                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                            }
                                                            catch (Exception)
                                                            { }
                                                        }
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                    srqty = 0;
                                                }
                                                PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                                                PurchaseDetail purdata = new PurchaseDetail();
                                                pMastRepo = new PurchaseMasterRepository();
                                                PurchaseMaster PMasterData1 = new PurchaseMaster();
                                                PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (PMasterData != null)
                                                    purdata = purchaserepo.GetAll().Where(t => t.ProductName == item.ProductId && t.CompanyName == item.CompanyName && t.Unit == item.Unit && t.BatchNo == batchno && t.PorderNo == batchitem.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                decimal pqty = 0, prqty1 = 0;
                                                pqty = Convert.ToDecimal(purdata.Quantity);
                                                try
                                                {
                                                    PReturnDetailRepository PurRDRepo1 = new PReturnDetailRepository();
                                                    var PurDData1 = PurRDRepo1.GetAll().Where(t => t.POID == purdata.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    prqty1 = Convert.ToDecimal(PurDData1.Quantity);
                                                }
                                                catch (Exception)
                                                {
                                                    prqty1 = 0;
                                                }
                                                if ((tudqty - srqty) == (pqty - prqty1))
                                                {
                                                    purdata.Status = "Inactive";
                                                    purchaserepo.Edit(purdata);
                                                    purchaserepo.Save();
                                                }
                                                else
                                                {
                                                    purdata.Status = "Active";
                                                    purchaserepo.Edit(purdata);
                                                    purchaserepo.Save();
                                                }
                                                purchaserepo.Dispose(); brepo.Dispose(); batchRepo.Dispose(); purdtlrepo.Dispose();
                                            }
                                            p++;
                                        }
                                    }
                                    batchrepo1.Dispose();
                                }
                            }
                        }
                    }
                }
                custmrepo.Dispose(); custdtlrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void remove0statusrecord()
        {
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> custdtllist = new List<CustomerBillDetail>();
                var custdtmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (custdtmdata != null)
                {
                    custdtllist = custdtlrepo.GetAll().Where(t => t.BillNo == custdtmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                    if (custdtllist.Count > 0)
                    {
                        foreach (var item in custdtllist)
                        {
                            string billid = "";
                            billid = Convert.ToString(item.Id);
                            BatchRepository batchrepo1 = new BatchRepository();
                            List<Batch> batchlist = new List<Batch>();
                            batchlist = batchrepo1.GetAll().Where(t => t.BillId == Convert.ToString(item.Id) && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                            if (batchlist.Count > 0)
                            {
                                foreach (var batchitem in batchlist)
                                {
                                    BatchRepository batchRepo = new BatchRepository();
                                    var bData = batchRepo.GetById(batchitem.ID);
                                    BatchRepository brepo = new BatchRepository();
                                    decimal tudqty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == bData.ProductName && t.ManufactureCompany == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.PorderNo == bData.PorderNo && t.Status == "1" && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == bData.ProductName && t.ManufactureCompany == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.Status == "1" && t.PorderNo == bData.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                                    PurchaseDetail purdata = new PurchaseDetail();
                                    PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                    PurchaseMaster PMasterData = new PurchaseMaster();
                                    PMasterData = pMastRepo.GetAll().Where(t => t.Id == bData.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData != null)
                                        purdata = purchaserepo.GetAll().Where(t => t.ProductName == bData.ProductName && t.CompanyName == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.PorderNo == bData.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    decimal pqty = 0, prqty = 0;
                                    pqty = Convert.ToDecimal(purdata.Quantity);
                                    try
                                    {
                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdata.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                    }
                                    catch (Exception)
                                    {
                                        prqty = 0;
                                    }
                                    if ((tudqty - srqty) == (pqty - prqty))
                                    {
                                        purdata.Status = "Inactive";
                                        purchaserepo.Edit(purdata);
                                        purchaserepo.Save();
                                    }
                                    else
                                    {
                                        purdata.Status = "Active";
                                        purchaserepo.Edit(purdata);
                                        purchaserepo.Save();
                                    }
                                    batchRepo.Remove(bData);
                                    batchRepo.Save();
                                    purchaserepo.Dispose(); batchRepo.Dispose(); brepo.Dispose();
                                }
                            }
                            batchrepo1.Dispose();
                        }
                    }
                }
                custmrepo.Dispose(); custdtlrepo.Dispose();
            }
            catch (Exception)
            { }

            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> custdtllist = new List<CustomerBillDetail>();
                BatchRepository batchrepo1 = new BatchRepository();
                List<Batch> batchlist = new List<Batch>();
                batchlist = batchrepo1.GetAll().Where(t => t.BillId == txtbillno.Text && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                if (batchlist.Count > 0)
                {
                    foreach (var batchitem in batchlist)
                    {
                        BatchRepository batchRepo = new BatchRepository();
                        var bData = batchRepo.GetById(batchitem.ID);
                        BatchRepository brepo = new BatchRepository();
                        decimal tudqty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == bData.ProductName && t.ManufactureCompany == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.PorderNo == bData.PorderNo && t.Status == "1" && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                        decimal srqty = 0;
                        try
                        {
                            BatchRepository batchrpstr = new BatchRepository();
                            List<Batch> BData = new List<Batch>();
                            BData = batchrpstr.GetAll().Where(t => t.ProductName == bData.ProductName && t.ManufactureCompany == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.Status == "1" && t.PorderNo == bData.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                            if (BData != null)
                            {
                                foreach (var item1 in BData)
                                {
                                    try
                                    {
                                        GoodDetailRepository SRRepo = new GoodDetailRepository();
                                        GoodReturnDetail SRData = new GoodReturnDetail();
                                        SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                    }
                                    catch (Exception)
                                    { }
                                }
                            }
                        }
                        catch (Exception)
                        {
                            srqty = 0;
                        }
                        PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                        PurchaseDetail purdata = new PurchaseDetail();
                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                        PurchaseMaster PMasterData = new PurchaseMaster();
                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == bData.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                        if (PMasterData != null)
                            purdata = purchaserepo.GetAll().Where(t => t.ProductName == bData.ProductName && t.CompanyName == bData.ManufactureCompany && t.Unit == bData.Unit && t.BatchNo == bData.BatchNo && t.PorderNo == bData.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                        decimal pqty = 0, prqty = 0;
                        pqty = Convert.ToDecimal(purdata.Quantity);
                        try
                        {
                            PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                            var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdata.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            prqty = Convert.ToDecimal(PurDData.Quantity);
                        }
                        catch (Exception)
                        {
                            prqty = 0;
                        }
                        if ((tudqty - srqty) == (pqty - prqty))
                        {
                            purdata.Status = "Inactive";
                            purchaserepo.Edit(purdata);
                            purchaserepo.Save();
                        }
                        else
                        {
                            purdata.Status = "Active";
                            purchaserepo.Edit(purdata);
                            purchaserepo.Save();
                        }
                        batchRepo.Remove(bData);
                        batchRepo.Save();
                        purchaserepo.Dispose(); batchRepo.Dispose(); brepo.Dispose();
                    }
                }
                batchrepo1.Dispose(); custdtlrepo.Dispose(); custmrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void changestatusto0(int i, int custdtid)
        {
            //start Batch table entry code
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                PurchaseDetailRepository ppRepo = new PurchaseDetailRepository();
                BatchRepository batchRepo = new BatchRepository();
                List<decimal> nQty = new List<decimal>();
                string proname = Convert.ToString(GvProductInfo.Rows[i].Cells["Id"].Value);
                string company = Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                string unit = Convert.ToString(GvProductInfo.Rows[i].Cells["Unit"].Value);
                string bStr = Convert.ToString(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                string exStr = Convert.ToString(GvProductInfo.Rows[i].Cells["IGST"].Value);
                if (bStr.Contains(','))
                {
                    string[] btchArray = bStr.Split(',');
                    string[] exArray = exStr.Split(',');
                    for (int q = 0; q < btchArray.Length; q++)
                    {
                        decimal purcahseQty = 0;
                        BatchRepository batchrepo = new BatchRepository();
                        List<Batch> batchdata2 = batchrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.CompId == CommonMethod.CompId).ToList();
                        if (batchdata2 != null)
                        {
                            foreach (var item in batchdata2)
                            {
                                batchRepo = new BatchRepository();
                                var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(custdtid) && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                                if (batchdata1 != null)
                                {
                                    if (custdtid == Convert.ToInt32(txtbillno.Text))
                                    {
                                        var custmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (custmdata != null)
                                        {
                                            CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                                            var detaildata = custdtlrepo.GetAll().Where(t => t.ProductId == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bStr && t.BillNo == custmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                            if (detaildata != null)
                                            {
                                                custdtid = detaildata.Id;
                                                batchdata1.BillId = Convert.ToString(custdtid);
                                            }
                                        }
                                        custdtid = Convert.ToInt32(txtbillno.Text);
                                    }
                                    else
                                        batchdata1.BillId = Convert.ToString(custdtid);
                                    batchdata1.Status = "0";
                                    batchRepo.Edit(batchdata1);
                                    batchRepo.Save();
                                }
                                try
                                {
                                    PurchaseDetail pData = new PurchaseDetail();
                                    BatchRepository brepo = new BatchRepository();
                                    string bNo = btchArray[q];
                                    ppRepo = new PurchaseDetailRepository();
                                    PurchaseDetail purdetail = new PurchaseDetail();
                                    PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                    PurchaseMaster PMasterData = new PurchaseMaster();
                                    PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData != null)
                                        purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    decimal prqty = 0;
                                    try
                                    {
                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                    }
                                    catch (Exception)
                                    {
                                        prqty = 0;
                                    }
                                    purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                    decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                    decimal srqty = 0;
                                    try
                                    {
                                        BatchRepository batchrpstr = new BatchRepository();
                                        List<Batch> BData = new List<Batch>();
                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                        if (BData != null)
                                        {
                                            foreach (var item1 in BData)
                                            {
                                                try
                                                {
                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        srqty = 0;
                                    }
                                    if ((purcahseQty - prqty) == (uQty - srqty))
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Inactive";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    else
                                    {
                                        pMastRepo = new PurchaseMasterRepository();
                                        PurchaseDetail purdetail11 = new PurchaseDetail();
                                        PurchaseMaster PMasterData1 = new PurchaseMaster();
                                        PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (PMasterData1 != null)
                                            purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        pData = ppRepo.GetById(purdetail11.Id);
                                        pData.Status = "Active";
                                        ppRepo.Edit(pData);
                                        ppRepo.Save();
                                    }
                                    brepo.Dispose();
                                }
                                catch (Exception)
                                { }
                            }
                        }
                        batchrepo.Dispose();
                    }
                }
                else
                {
                    decimal purcahseQty = 0;
                    List<Batch> batchdata2 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == Convert.ToString(custdtid) && t.Status == "0" && t.CompId == CommonMethod.CompId).ToList();
                    if (batchdata2 != null)
                    {
                        foreach (var item in batchdata2)
                        {
                            batchRepo = new BatchRepository();
                            var batchdata1 = batchRepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value) && t.BillId == Convert.ToString(custdtid) && t.Status == "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).LastOrDefault();
                            if (batchdata1 != null)
                            {
                                int newcustdtid = 0;
                                if (custdtid == Convert.ToInt32(txtbillno.Text))
                                {
                                    var custmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (custmdata != null)
                                    {
                                        CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                                        var detaildata = custdtlrepo.GetAll().Where(t => t.ProductId == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bStr && t.BillNo == custmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (detaildata != null)
                                            newcustdtid = detaildata.Id;
                                        custdtlrepo.Dispose();
                                    }
                                }
                                batchdata1.BillId = Convert.ToString(newcustdtid);
                                batchdata1.Status = "0";
                                batchRepo.Edit(batchdata1);
                                batchRepo.Save();
                            }

                            try
                            {
                                //start of PurchaseDetail status change code
                                PurchaseDetail pData = new PurchaseDetail();
                                BatchRepository brepo = new BatchRepository();
                                string bNo = Convert.ToString(GvProductInfo.Rows[i].Cells["CGSTAmt"].Value);
                                ppRepo = new PurchaseDetailRepository();
                                PurchaseDetail purdetail = new PurchaseDetail();
                                PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                PurchaseMaster PMasterData = new PurchaseMaster();
                                PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (PMasterData != null)
                                    purdetail = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                decimal prqty = 0;
                                try
                                {
                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == purdetail.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                }
                                catch (Exception)
                                {
                                    prqty = 0;
                                }
                                purcahseQty = Convert.ToDecimal(purdetail.Quantity) + Convert.ToDecimal(purdetail.FreeQty);
                                decimal uQty = Convert.ToDecimal(brepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                decimal srqty = 0;
                                try
                                {
                                    BatchRepository batchrpstr = new BatchRepository();
                                    List<Batch> BData = new List<Batch>();
                                    BData = batchrpstr.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == bNo && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                    if (BData != null)
                                    {
                                        foreach (var item1 in BData)
                                        {
                                            try
                                            {
                                                GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                GoodReturnDetail SRData = new GoodReturnDetail();
                                                SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    srqty = 0;
                                }
                                if ((purcahseQty - prqty) == (uQty - srqty))
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Inactive";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                else
                                {
                                    pMastRepo = new PurchaseMasterRepository();
                                    PurchaseDetail purdetail11 = new PurchaseDetail();
                                    PurchaseMaster PMasterData1 = new PurchaseMaster();
                                    PMasterData1 = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (PMasterData1 != null)
                                        purdetail11 = ppRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == bNo && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData1.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                    pData = ppRepo.GetById(purdetail11.Id);
                                    pData.Status = "Active";
                                    ppRepo.Edit(pData);
                                    ppRepo.Save();
                                }
                                brepo.Dispose();
                            }
                            catch (Exception)
                            { }
                        }
                    }
                }
                custmrepo.Dispose(); ppRepo.Dispose(); batchRepo.Dispose();
            }
            catch (Exception)
            { }
            //end of Batch table entry code
        }

        public void statuschangebillrecords()
        {
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> custdtllist = new List<CustomerBillDetail>();

                var custdtmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (custdtmdata != null)
                {
                    custdtllist = custdtlrepo.GetAll().Where(t => t.BillNo == custdtmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                    if (custdtllist.Count > 0)
                    {
                        foreach (var item in custdtllist)
                        {
                            GoodDetailRepository SRRepo = new GoodDetailRepository();
                            GoodReturnDetail SRData = new GoodReturnDetail();
                            SRData = SRRepo.GetAll().Where(t => t.BNID == item.Id && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (SRData == null)
                            {
                                string billid = "";
                                billid = Convert.ToString(item.Id);
                                BatchRepository batchrepo1 = new BatchRepository();
                                List<Batch> batchlist = new List<Batch>();
                                batchlist = batchrepo1.GetAll().Where(t => t.BillId == Convert.ToString(item.Id) && t.CompId == CommonMethod.CompId).ToList();
                                if (batchlist.Count > 0)
                                {
                                    foreach (var batchitem in batchlist)
                                    {
                                        BatchRepository batchRepo = new BatchRepository();
                                        var bData = batchRepo.GetById(batchitem.ID);
                                        bData.Status = "0";
                                        batchRepo.Edit(bData);
                                        batchRepo.Save();
                                        batchRepo.Dispose();
                                    }
                                }
                                batchrepo1.Dispose();
                            }
                        }
                    }
                }
                custdtlrepo.Dispose(); custmrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void removeduplicate()
        {
            try
            {
                CustomerBillMasterRepository custmrepo = new CustomerBillMasterRepository();
                CustomerBillDetailRepository custdtlrepo = new CustomerBillDetailRepository();
                List<CustomerBillDetail> custdtllist = new List<CustomerBillDetail>();

                var custdtmdata = custmrepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (custdtmdata != null)
                {
                    custdtllist = custdtlrepo.GetAll().Where(t => t.BillNo == custdtmdata.Id && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear && t.CustomerBillMaster.CompId == CommonMethod.CompId).ToList();
                    if (custdtllist.Count > 0)
                    {
                        foreach (var item in custdtllist)
                        {
                            GoodDetailRepository SRDRepo = new GoodDetailRepository();
                            GoodReturnDetail SRDData = new GoodReturnDetail();
                            SRDData = SRDRepo.GetAll().Where(t => t.BNID == item.Id && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (SRDData == null)
                            {
                                string billid = "", batchno = "";
                                decimal qty = 0;
                                billid = Convert.ToString(item.Id);
                                batchno = item.BatchNo;
                                qty = Convert.ToDecimal(item.Quantity);

                                if (batchno.Contains(','))
                                {
                                    string[] btchArray = batchno.Split(',');
                                    string[] exArray = item.Expiry.Split(',');
                                    for (int q = 0; q < btchArray.Length; q++)
                                    {
                                        BatchRepository batchrepo1 = new BatchRepository();
                                        List<Batch> batchlist = new List<Batch>();
                                        batchlist = batchrepo1.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(item.Id) && t.CompId == CommonMethod.CompId).ToList();
                                        if (batchlist.Count > 0)
                                        {
                                            int p = 0;
                                            foreach (var batchitem in batchlist)
                                            {
                                                BatchRepository batchRepo = new BatchRepository();
                                                var bData = batchRepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(item.Id) && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (bData != null)
                                                {
                                                    int count = Convert.ToInt32(batchRepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Unit == item.Unit && t.BatchNo == btchArray[q] && t.BillId == Convert.ToString(item.Id) && t.PorderNo == batchitem.PorderNo && t.CompId == CommonMethod.CompId).Count());
                                                    if (count > 1)
                                                    {
                                                        for (int i = 0; i < count - 1; i++)
                                                        {
                                                            batchRepo.Remove(bData);
                                                            batchRepo.Save();
                                                        }
                                                    }
                                                }
                                                batchRepo.Dispose();
                                                p++;
                                            }
                                        }
                                        batchrepo1.Dispose();
                                    }
                                }
                            }
                        }
                    }
                }
                custdtlrepo.Dispose(); custmrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        private decimal getProperSlab(int rowIndex, string[] arraystr, decimal rateDe = 0, decimal rateIn = 0)
        {
            int slabAppliedCount = 0;  // Slab applied to how many values of formula
            string tempSizedata = "";
            SizeSpecString = "";
            decimal calcQty = 0, GridQty = 0, unitQty = 0, productSlab = 0;
            bool boolrateDe = false, boolrateIn = false;
            ///============== Slab unit and rate increase and decrease unit considered same ===========
            for (int j = 0; j < dtgvFormulae.Columns.Count - 1; j++)
            {
                try
                {
                    if (dtgvFormulae.Rows[rowIndex].Cells[j].Value != null)  //e.RowIndex
                    {
                        if (dtgvFormulae.Columns[j].HeaderText != "Result")
                            GridQty = Math.Round(Convert.ToDecimal(dtgvFormulae.Rows[rowIndex].Cells[j].Value.ToString()), 2, MidpointRounding.AwayFromZero);
                        else
                            GridQty = 0;
                        if (dtgvFormulae.Columns[j].HeaderText != "Constant" && dtgvFormulae.Columns[j].HeaderText != "Result" && dtgvFormulae.Columns[j].HeaderText != "Name" && slabAppliedCount < FormulaConstCount)
                        {
                            decimal maxQtySlab = 0;
                            if (slabGroup == 'F')  //----- Fixed Size
                            {
                                for (int m = 0; m < 100; m++)
                                {
                                    if (getSlabUnit == "In")
                                    {
                                        maxQtySlab += qtySlab;
                                        productSlab = qtySlab;
                                    }
                                    else //feet
                                    {
                                        maxQtySlab += (qtySlab * 12);
                                        productSlab = (qtySlab * 12);
                                    }

                                    if (GridQty <= maxQtySlab && GridQty != 0)
                                    {
                                        if (rateDe != 0)
                                        {
                                            if (getSlabUnit == "Ft")
                                                unitQty = rateDe;
                                            if (getSlabUnit == "In")
                                                unitQty = rateDe / qtySlab;  // total slabs to decrease
                                            int arrcount = 0;
                                            for (int jj = arrSlab.Length - 1; jj >= 0; jj--)
                                            {
                                                if (arrSlab[jj] != 0 && arrSlab[jj] < GridQty)
                                                {
                                                    arrcount++;
                                                    if (arrcount == unitQty)
                                                    {
                                                        GridQty = arrSlab[jj];
                                                        boolrateDe = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (rateIn != 0)
                                        {
                                            if (getSlabUnit == "Ft")
                                                unitQty = rateIn;
                                            if (getSlabUnit == "In")
                                                unitQty = rateIn / qtySlab;  // total slabs to increase
                                            int arrcount = 0;
                                            for (int jj = 0; jj <= arrSlab.Length - 1; jj++)
                                            {
                                                if (arrSlab[jj] != 0 && arrSlab[jj] > GridQty)
                                                {
                                                    arrcount++;
                                                    if (arrcount == unitQty)
                                                    {
                                                        GridQty = arrSlab[jj];
                                                        boolrateIn = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (boolrateDe == false && boolrateIn == false)
                                            GridQty = maxQtySlab;
                                        slabAppliedCount += 1;
                                        if (slabAppliedCount <= FormulaConstCount)
                                        {
                                            tempSizedata = SizeQty.ToString();
                                            if (SizeSpecString.Trim() == "")
                                                SizeSpecString = tempSizedata;
                                            else
                                                SizeSpecString = SizeSpecString + "*" + tempSizedata;
                                        }
                                        break;
                                    }
                                    else
                                        SizeQty = GridQty;
                                } //----------------- Fixed Size
                            }
                            else //-------------- Dynamic size
                            {
                                if (DynamicDtlSlabId != 0)
                                {
                                    decimal nearbyQty = 0;
                                    SlabDetailRepository slabdtlrepo = new SlabDetailRepository();
                                    List<SlabDetail> slablist = slabdtlrepo.GetAll().Where(t => t.SlabId == DynamicDtlSlabId).ToList();
                                    if (slablist != null)
                                    {
                                        decimal minDiff = 0, prevDiff = 100;
                                        foreach (var item in slablist)
                                        {
                                            if (slabAppliedCount == 0)
                                            {
                                                minDiff = Convert.ToDecimal(item.FromRange - GridQty);
                                                if (prevDiff > minDiff && minDiff >= 0)
                                                {
                                                    prevDiff = minDiff;
                                                    nearbyQty = Convert.ToDecimal(item.FromRange);
                                                }
                                            }
                                            else if (slabAppliedCount == 1)
                                            {
                                                minDiff = Convert.ToDecimal(item.ToRange - GridQty);
                                                if (prevDiff > minDiff && minDiff >= 0)
                                                {
                                                    prevDiff = minDiff;
                                                    nearbyQty = Convert.ToDecimal(item.ToRange);
                                                }
                                            }
                                        }
                                        SizeQty = GridQty;
                                        GridQty = nearbyQty;
                                        slabAppliedCount += 1;

                                        if (slabAppliedCount <= FormulaConstCount)
                                        {
                                            tempSizedata = SizeQty.ToString();
                                            if (SizeSpecString.Trim() == "")
                                                SizeSpecString = tempSizedata;
                                            else
                                                SizeSpecString = SizeSpecString + "*" + tempSizedata;
                                        }
                                    }
                                }
                            }
                        }
                        else if (dtgvFormulae.Columns[j].HeaderText != "Constant" && dtgvFormulae.Columns[j].HeaderText != "Result" && dtgvFormulae.Columns[j].HeaderText != "Name" && slabAppliedCount == FormulaConstCount)
                        {
                            if (FormulaConstCount == 0) // changes 21/5/2018
                            {
                                SizeQty = GridQty;
                                tempSizedata = SizeQty.ToString();
                                if (SizeSpecString.Trim() == "")
                                    SizeSpecString = tempSizedata;
                                else
                                    SizeSpecString = SizeSpecString + "*" + tempSizedata;
                                SizeQty = 0;
                            }
                            else
                            {
                                SizeQty = GridQty;
                                NewSizeQty = NewSizeQty + SizeQty;
                                SizeQty = NewSizeQty;
                            }
                        }

                        if (j == 0)
                            calcQty = GridQty;
                        else
                        {
                            if ((j - 1) < arraystr.Length)
                            {
                                if (arraystr[j - 1].ToString() == "*")
                                    calcQty = Math.Round(Convert.ToDecimal(calcQty * GridQty), 2, MidpointRounding.AwayFromZero);//Convert.ToDecimal(dtgvFormulae.Rows[e.RowIndex].Cells[j].Value.ToString())), 2, MidpointRounding.AwayFromZero);
                                else if (arraystr[j - 1].ToString() == "/")
                                    calcQty = Math.Round(Convert.ToDecimal(calcQty / GridQty), 2, MidpointRounding.AwayFromZero);//Convert.ToDecimal(dtgvFormulae.Rows[e.RowIndex].Cells[j].Value.ToString())), 2, MidpointRounding.AwayFromZero);
                                else if (arraystr[j - 1].ToString() == "+")
                                    calcQty = Math.Round(Convert.ToDecimal(calcQty + GridQty), 2, MidpointRounding.AwayFromZero);//Convert.ToDecimal(dtgvFormulae.Rows[e.RowIndex].Cells[j].Value.ToString())), 2, MidpointRounding.AwayFromZero);
                                else if (arraystr[j - 1].ToString() == "-")
                                    calcQty = Math.Round(Convert.ToDecimal(calcQty - GridQty), 2, MidpointRounding.AwayFromZero);//Convert.ToDecimal(dtgvFormulae.Rows[e.RowIndex].Cells[j].Value.ToString())), 2, MidpointRounding.AwayFromZero);
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    return calcQty;
                }
            }
            return calcQty;
        }

        private void getProductType(string proname, string company, string unit)
        {
            try
            {
                if (ProductDataGlobal == null)
                {
                    ProductRepository prodrepo = new ProductRepository();
                    ProductDataGlobal = new ProductInformation();
                    if (CommonMethod.commProduct == true)
                        ProductDataGlobal = prodrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                    else
                        ProductDataGlobal = prodrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit && t.CompId == CommonMethod.CompId).FirstOrDefault();
                }
                else
                {
                    productentrytype = Convert.ToInt32(ProductDataGlobal.ProductType);  // allinone standard
                    if (ProductDataGlobal.ProductType == 0 && ProductDataGlobal.WithBatchAndExpiry == "N" && ProductDataGlobal.WithBatch == "N")
                        productentrytype = 0;
                    else if (ProductDataGlobal.ProductType == 0 && ProductDataGlobal.WithBatchAndExpiry == "Y")
                        productentrytype = 1;
                    else if (ProductDataGlobal.ProductType == 0 && ProductDataGlobal.WithBatch == "Y") //krushi
                        productentrytype = 2;
                    else if (ProductDataGlobal.ProductType == 3 && ProductDataGlobal.WithoutSize == "N")  //clothing
                        productentrytype = 3;
                    else if (ProductDataGlobal.ProductType == 3 && ProductDataGlobal.WithoutSize == "Y")  //clothing
                        productentrytype = 4;
                    else if (ProductDataGlobal.ProductType == 1) // serialized
                        productentrytype = 5;
                    else if (ProductDataGlobal.ProductType == 2) // Assembly
                        productentrytype = 6;
                    else if (ProductDataGlobal.ProductType == 4) //kit
                        productentrytype = 7;
                    else if (ProductDataGlobal.ProductType == 5) //scrap
                        productentrytype = 8;
                    else if (ProductDataGlobal.ProductType == 6) //Work type
                        productentrytype = 9;
                    else
                        productentrytype = 0;
                }
            }
            catch (Exception)
            { }
        }

        private void deleteUnwantedBatchData()
        {
            try
            {
                for (int i = 0; i < GvProductInfo.Rows.Count; i++)
                {
                    string pname1 = GvProductInfo.Rows[i].Cells["ProductNameg"].Value.ToString();
                    string cname1 = GvProductInfo.Rows[i].Cells["Company"].Value.ToString();
                    string uname1 = GvProductInfo.Rows[i].Cells["Unit"].Value.ToString();

                    string batch_no = "";
                    decimal usedQty = 0, removedQty = 0;
                    int batchID = 0;
                    BatchRepository batchrepo = new BatchRepository();
                    batch_no = Convert.ToString(GvProductInfo.Rows[i].Cells["BatchNo"].Value);
                    usedQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == pname1 && t.ManufactureCompany == cname1 && t.Unit == uname1 && t.BatchNo == batch_no && t.Status == "0" && (t.BillId == txtbillno.Text) && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                    batchID = batchrepo.GetAll().Where(t => t.ProductName == pname1 && t.ManufactureCompany == cname1 && t.Unit == uname1 && t.BatchNo == batch_no && (t.BillId == txtbillno.Text) && t.CompId == CommonMethod.CompId).FirstOrDefault().ID;
                    if (batchID != 0)
                    {
                        removedQty = usedQty - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                        BatchRepository b_repo = new BatchRepository();
                        Batch batch_data = b_repo.GetById(batchID);
                        if (batch_data != null)
                        {
                            batch_data.UsedQty = batch_data.UsedQty - Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                            if (removedQty == 0)
                            {
                                b_repo.Remove(batch_data);
                                b_repo.Save();
                            }
                        }
                        b_repo.Dispose();
                    }
                    batchrepo.Dispose();
                }
            }
            catch (Exception)
            { }
        }

        private void fillInvoiceSeries()
        {
            try
            {
                UserSeriesRepository seriesRepo = new UserSeriesRepository();
                List<UserSeriesOfVoucher> seriesData = new List<UserSeriesOfVoucher>();
                seriesData.Clear();
                seriesData = seriesRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).ToList();
                cmbInvoiceSeries.DataSource = seriesData;
                cmbInvoiceSeries.ValueMember = "ID";
                cmbInvoiceSeries.DisplayMember = "StartCharacter";
                seriesRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        private void getMaxSeries()
        {
            if (userDefinedSeries == true && cmbInvoiceSeries.Text != "")
            {
                if (userDefinedSeries == true && cmbInvoiceSeries.Text != "")
                {
                    try
                    {
                        UserSeriesRepository userseriesRepo = new UserSeriesRepository();
                        UserSeriesOfVoucher seriesData = userseriesRepo.GetAll().Where(t => t.StartCharacter == cmbInvoiceSeries.Text && t.CompId == CommonMethod.CompId).FirstOrDefault();
                        if (seriesData != null)
                        {
                            SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (SetDataM != null)
                            {
                                if (SetDataM.ContinueUserSeries == true)
                                {
                                    db.connect();
                                        SqlCommand cmd = new SqlCommand("SELECT  MAX(CONVERT(int,(REPLACE(UserSeries, '" + cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + "' ,'')))) AS UserMax FROM CustomerBillMaster where userseries like '" + cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + "%' and CompId=" + CommonMethod.CompId + "", db.Connection);
                                    var mid = cmd.ExecuteScalar();
                                    db.CloseConnection();
                                    if (mid.ToString() == null || mid.ToString() == "")
                                        txtSeriesNext.Text = cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + Convert.ToString(seriesData.StartNumber);
                                    else
                                        txtSeriesNext.Text = cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + Convert.ToString(Convert.ToInt32(mid) + 1);
                                }
                                else
                                {
                                    db.connect();
                                    SqlCommand cmd = new SqlCommand("SELECT  MAX(CONVERT(int,(REPLACE(UserSeries, '" + cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + "' ,'')))) AS UserMax FROM CustomerBillMaster where userseries like '" + cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + "%' and CompId=" + CommonMethod.CompId + " and TransactionYear='" + CommonMethod.TransactionYear + "'", db.Connection);
                                    var mid = cmd.ExecuteScalar();
                                    db.CloseConnection();
                                    if (mid.ToString() == null || mid.ToString() == "")
                                        txtSeriesNext.Text = cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + Convert.ToString(seriesData.StartNumber);
                                    else
                                        txtSeriesNext.Text = cmbInvoiceSeries.Text + Convert.ToString(seriesData.UseSeparator) + Convert.ToString(Convert.ToInt32(mid) + 1);
                                }
                            }
                        }
                    }
                    catch { db.CloseConnection(); }
                }
            }
        }

        public DataTable readExcelBulkCopy(string fileName, string fileExt)
        {
            DataTable dtexcel = new DataTable();
            DataTable dt = new DataTable();
            string conn = string.Empty;
            if (fileExt.CompareTo(".xls") == 0)
                conn = @"provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + fileName + ";Extended Properties='Excel 8.0;HRD=Yes;IMEX=1';"; //for below excel 2007  
            else
                conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + ";Extended Properties='Excel 12.0;HDR=NO';"; //for above excel 2007  
            using (OleDbConnection con = new OleDbConnection(conn))
            {
                con.Open();
                var sheets = con.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                try
                {
                    OleDbDataAdapter oleAdpt = new OleDbDataAdapter("SELECT * FROM [" + sheets.Rows[0]["TABLE_NAME"].ToString() + "]", con); //here we read data from sheet1  
                    oleAdpt.Fill(dtexcel); //fill excel data into dataTable  F10,F11,F14,F17,F18,F19,F20,F21 
                    dt = dtexcel.Clone();
                    dt.Columns[0].DataType = typeof(SqlDbType);
                    dt.Columns[1].DataType = typeof(SqlDbType);
                    dt.Columns[2].DataType = typeof(SqlDbType);
                    dt.Columns[3].DataType = typeof(SqlDbType);
                    dt.Columns[4].DataType = typeof(SqlDbType);
                    dt.Columns[5].DataType = typeof(SqlDbType);
                    dt.Columns[6].DataType = typeof(SqlDbType);
                    dt.Columns[7].DataType = typeof(SqlDbType);
                    dt.Columns[8].DataType = typeof(SqlDbType);
                    dt.Columns[9].DataType = typeof(SqlDbType);
                    dt.Columns[10].DataType = typeof(SqlDbType);
                    dt.Columns[11].DataType = typeof(SqlDbType);
                    dt.Columns[12].DataType = typeof(SqlDbType);
                    dt.Columns[13].DataType = typeof(SqlDbType);
                    dt.Columns[14].DataType = typeof(SqlDbType);
                    dt.Columns[15].DataType = typeof(SqlDbType);
                    dt.Columns[16].DataType = typeof(SqlDbType);
                    dt.Columns[17].DataType = typeof(SqlDbType);
                    dt.Columns[18].DataType = typeof(SqlDbType);
                    dt.Columns[19].DataType = typeof(SqlDbType);
                    dt.Columns[20].DataType = typeof(SqlDbType);
                    dt.Columns[21].DataType = typeof(SqlDbType);
                    dt.Columns[22].DataType = typeof(SqlDbType);
                    dt.Columns[23].DataType = typeof(SqlDbType);
                    dt.Columns[24].DataType = typeof(SqlDbType);
                    dt.Columns[25].DataType = typeof(SqlDbType);
                    dt.Columns[26].DataType = typeof(SqlDbType);
                    dt.Columns[27].DataType = typeof(SqlDbType);
                    dt.Columns[28].DataType = typeof(SqlDbType);
                    dt.Columns[29].DataType = typeof(SqlDbType);
                    dt.Columns[30].DataType = typeof(SqlDbType);
                    dt.Columns[31].DataType = typeof(SqlDbType);
                    dt.Columns[32].DataType = typeof(SqlDbType);
                    dt.Columns[33].DataType = typeof(SqlDbType);
                    dt.Columns[34].DataType = typeof(SqlDbType);
                    dt.Columns[35].DataType = typeof(SqlDbType);
                    dt.Columns[36].DataType = typeof(SqlDbType);
                    dt.Columns[37].DataType = typeof(SqlDbType);
                    dt.Columns[38].DataType = typeof(SqlDbType);
                    dt.Columns[39].DataType = typeof(SqlDbType);
                    dt.Columns[40].DataType = typeof(SqlDbType);
                    dt.Columns[41].DataType = typeof(SqlDbType);
                    dt.Columns[42].DataType = typeof(SqlDbType);
                    dt.Columns[43].DataType = typeof(SqlDbType);
                    dt.Columns[44].DataType = typeof(SqlDbType);
                    dt.Columns[45].DataType = typeof(SqlDbType);
                    dt.Columns[46].DataType = typeof(SqlDbType);
                    dt.Columns[47].DataType = typeof(SqlDbType);
                    dt.Columns[48].DataType = typeof(SqlDbType);
                    dt.Columns[49].DataType = typeof(SqlDbType);
                    dt.Columns[50].DataType = typeof(SqlDbType);
                    dt.Columns[51].DataType = typeof(SqlDbType);
                    dt.Columns[52].DataType = typeof(SqlDbType);
                    dt = dtexcel.Copy();
                    progressBar1.Minimum = 0;
                    progressBar1.Maximum = dtexcel.Rows.Count;
                    progressBar1.Visible = true;
                }
                catch { }
            }
            string constring = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString; ;
            using (SqlConnection con = new SqlConnection(constring))
            {
                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(con))
                {
                    //Set the database table name
                    sqlBulkCopy.DestinationTableName = "dtexcel";
                    con.Open();
                    sqlBulkCopy.WriteToServer(dt);
                    con.Close();
                }
            }
            return dtexcel;
        }

        public DataTable ReadExcelMonthly(string fileName, string fileExt)
        {
            string masterNetAmt = "net Ammonut";
            string conn = string.Empty;
            DataTable dtexcel = new DataTable();
            if (fileExt.CompareTo(".xls") == 0)
                conn = @"provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + fileName + ";Extended Properties='Excel 8.0;HRD=Yes;IMEX=1';"; //for below excel 2007  
            else
                conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + ";Extended Properties=\"Excel 12.0;IMEX=1;HDR=NO;TypeGuessRows=0;ImportMixedTypes=Text\""; ; //for above excel 2007  
            using (OleDbConnection con = new OleDbConnection(conn))
            {
                con.Open();
                var sheets = con.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                try
                {
                    int count = 0;
                    OleDbDataAdapter oleAdpt = new OleDbDataAdapter("SELECT * FROM [" + sheets.Rows[0]["TABLE_NAME"].ToString() + "]", con); //here we read data from sheet1  
                    oleAdpt.Fill(dtexcel); //fill excel data into dataTable  F10,F11,F14,F17,F18,F19,F20,F21
                    if (dtexcel.Rows[0][0].ToString() == "Bill No")
                    {
                        count = 1;
                        masterNetAmt = "F21";
                    }
                    int i = 1;
                    progressBar1.Minimum = 0;
                    progressBar1.Maximum = dtexcel.Rows.Count;
                    progressBar1.Visible = true;
                    DataTable dt = new DataTable();
                    dt = dtexcel.Clone();
                    dt.Columns[16].DataType = typeof(decimal);
                    dt.Columns[20].DataType = typeof(decimal);
                    string BarCStatus, Batch, BatchnExpiry;
                    int colno = 1;
                    string BillNum;
                    if (Convert.ToString(dtexcel.Rows[count][1].ToString()) == "")
                    {
                        BillNum = Convert.ToString(dtexcel.Rows[count][0].ToString());
                        colno = 0;
                    }
                    else
                    {
                        BillNum = Convert.ToString(dtexcel.Rows[count][1].ToString());
                        colno = 1;
                    }
                    for (i = count; i <= (dtexcel.Rows.Count); i++)
                    {
                        System.Windows.Forms.Application.DoEvents();
                        progressBar1.Value = i;
                        try
                        {
                            if (i == dtexcel.Rows.Count)
                            {
                                if (dt.Rows.Count > 0)
                                {
                                    CustomerBillMaster custMaster = new CustomerBillMaster();
                                    CustomerBillMasterRepository masterrepo = new CustomerBillMasterRepository();
                                    CustomerInformation newcust = new CustomerInformation();
                                    CustomerRepository newcustRepo = new CustomerRepository();
                                    try
                                    {
                                        if (dt.Rows.Count > 0)
                                        {
                                            newcust = newcustRepo.GetAll().Where(t => t.CustomerName == dt.Rows[0][7].ToString()).FirstOrDefault();
                                            if (newcust == null)
                                            {
                                                CustomerInformation newcust1 = new CustomerInformation();
                                                CustomerRepository newcustRepo1 = new CustomerRepository();
                                                newcust1.CustomerCode = dt.Rows[0][8].ToString();
                                                newcust1.CustomerName = dt.Rows[0][7].ToString();
                                                newcust1.CustomerID = maxCustid();
                                                newcust1.CustomerType = dt.Rows[0][9].ToString();
                                                newcust1.State = "Maharashtra";
                                                newcust1.CompId = CommonMethod.CompId;
                                                newcust1.Statecode = 27;
                                                newcust1.BuyerTinNo = dt.Rows[0][32].ToString();
                                                newcustRepo1.Add(newcust1);
                                                newcustRepo1.Save();
                                                newcust = newcust1;
                                            }
                                            string billinvoiceseries, billseriesnext;
                                            billinvoiceseries = (dt.Rows[0][colno].ToString());//"SHRL1";
                                            billseriesnext = "";
                                            cmbInvoiceSeries.Text = billinvoiceseries;
                                            txtSeriesNext.Text = billseriesnext;
                                            string billn = Convert.ToString(dt.Rows[0][1].ToString());
                                            maxbillidtype(1);
                                            custMaster.Billdate = Convert.ToDateTime(dt.Rows[0][2].ToString());
                                            custMaster.UserSeries = billinvoiceseries /*+ 'S'*/ + billseriesnext;
                                            custMaster.BillNo = txtbillno.Text;
                                            custMaster.CustomerName = Convert.ToString(dt.Rows[0][7].ToString());
                                            custMaster.TransactionYear = CommonMethod.TransactionYear;
                                            custMaster.CompId = CommonMethod.CompId;
                                            custMaster.BillType = "Cash";
                                            try
                                            {
                                                custMaster.TransportCharges = Convert.ToDecimal(dt.Rows[0][24].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.TransportCharges = 0;
                                            }
                                            try
                                            {
                                                custMaster.HamaliCharges = Convert.ToDecimal(dt.Rows[0][25].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.HamaliCharges = 0;
                                            }
                                            try
                                            {
                                                custMaster.Discount = Math.Round(Convert.ToDecimal((Convert.ToDecimal(dt.Rows[0][22].ToString()) * 100) / Convert.ToDecimal(dt.Compute("Sum([" + masterNetAmt + "])", string.Empty))), 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.Discount = 0;
                                            }
                                            custMaster.CustomerId = newcust.CustomerID;
                                            custMaster.CustomerType = dt.Rows[0][9].ToString();
                                            custMaster.PaymentDate = Convert.ToDateTime(dt.Rows[0][2].ToString());
                                            custMaster.YN = "0";
                                            custMaster.ShipCustomerId = newcust.CustomerID;
                                            custMaster.SupplyPlace = newcust.State;
                                            custMaster.TotalAmount = Convert.ToDecimal(dt.Compute("Sum([" + masterNetAmt + "])", string.Empty));//Convert.ToDecimal(dtexcel.Rows[8][0].ToString());
                                            decimal ntamt;
                                            if ((dt.Rows[0][22].ToString()) != "" && (dt.Rows[0][22]) != null)
                                                ntamt = Convert.ToDecimal(custMaster.TotalAmount - Convert.ToDecimal(dt.Rows[0][22].ToString()));
                                            else
                                                ntamt = Convert.ToDecimal(custMaster.TotalAmount - 0);
                                            custMaster.NetAmount = ntamt;
                                            try
                                            {
                                                custMaster.PaidAmount = Convert.ToDecimal(dt.Rows[0][26].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.PaidAmount = 0;
                                            }
                                            try
                                            {
                                                custMaster.RemainingAmount = Convert.ToDecimal(dt.Rows[0][27].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.RemainingAmount = 0;
                                            }
                                            masterrepo.Add(custMaster);
                                            masterrepo.Save();
                                        }
                                    }
                                    catch (Exception) { }

                                    for (int j = 0; j < dt.Rows.Count; j++)
                                    {
                                        ProductRepository productrepo1 = new ProductRepository();
                                        ProductInformation pinfo1 = new ProductInformation();
                                        try
                                        {
                                            string p = Convert.ToString(dt.Rows[j][3].ToString());
                                            string u = "Pieces";
                                            string c = Convert.ToString(dt.Rows[j][14].ToString());
                                            if (string.IsNullOrEmpty(p) || string.IsNullOrEmpty(u) || string.IsNullOrEmpty(c))
                                            {
                                                MessageBox.Show("Please Fill all MasterInformation first Some MasterInformation is not found in database");
                                                goto A;
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    if (CommonMethod.commProduct == true)
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower()).FirstOrDefault();
                                                    else
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (pinfo1 == null)
                                                    {
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.Prefix == Convert.ToString(dt.Rows[j][28].ToString()) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (pinfo1 != null)
                                                        {
                                                            p = pinfo1.ProductName;
                                                            u = pinfo1.Uniti;
                                                            c = pinfo1.ManufactureCompany;
                                                        }
                                                        else
                                                        {
                                                            Unit un = new Unit();
                                                            UnitRepository unRepo = new UnitRepository();
                                                            ManuCompanyInfo newcom = new ManuCompanyInfo();
                                                            ManufactureCInfoRepository newcrepo = new ManufactureCInfoRepository();
                                                            GroupMaster grmaste = new GroupMaster();
                                                            GroupMasterRepository grmasterrepo = new GroupMasterRepository();
                                                            pinfo1 = new ProductInformation();
                                                            productrepo1 = new ProductRepository();
                                                            grmaste = grmasterrepo.GetAll().Where(t => t.GroupMasterName == Convert.ToString(dt.Rows[j][12].ToString())).FirstOrDefault();
                                                            un = unRepo.GetAll().Where(t => t.UnitName == u).FirstOrDefault();
                                                            if (dt.Rows[j][4].ToString() != "")
                                                                pinfo1.BarcodeStatus = "Static Barcode";
                                                            else
                                                                pinfo1.BarcodeStatus = "No Barcode";
                                                            if (dt.Rows[j][5].ToString() != "" && dt.Rows[j][6].ToString() == "")
                                                                pinfo1.WithBatch = "Y";
                                                            else
                                                                pinfo1.WithBatch = "N";
                                                            if (dt.Rows[j][5].ToString() != "" && dt.Rows[j][6].ToString() != "")
                                                                pinfo1.WithBatchAndExpiry = "Y";
                                                            else
                                                                pinfo1.WithBatchAndExpiry = "N";
                                                            newcom = newcrepo.GetAll().Where(t => t.CompanyName == c).FirstOrDefault();
                                                            if (un == null)
                                                                SaveUnit(u);
                                                            if (newcom == null)
                                                                SaveCompany(c);
                                                            if (grmaste == null)
                                                                SaveGroup(dt.Rows[j][12].ToString());
                                                            pinfo1.ManufactureCompany = c;
                                                            pinfo1.Uniti = u;
                                                            pinfo1.ProductName = p;
                                                            grmaste = grmasterrepo.GetAll().Where(t => t.GroupMasterName == Convert.ToString(dt.Rows[j][12].ToString())).FirstOrDefault();
                                                            pinfo1.Prefix = Convert.ToString(dt.Rows[j][28].ToString());
                                                            pinfo1.GroupMasterId = grmaste.GroupMasterId;
                                                            pinfo1.Rate = 0;
                                                            pinfo1.DealerRate = 0;
                                                            pinfo1.Category = "N/A";
                                                            pinfo1.ProductCode = maxproductid();
                                                            pinfo1.PurchaseRate = 0;
                                                            pinfo1.ProductDiscount = 0;
                                                            pinfo1.TaxInclusive = "True";
                                                            pinfo1.HSNCode = Convert.ToString(dt.Rows[j][11].ToString());
                                                            pinfo1.IGstPercent = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                                            pinfo1.CGstPercent = Convert.ToDecimal(dt.Rows[j][30].ToString());
                                                            pinfo1.SGstPercent = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                                            pinfo1.Pigstpercent = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                                            pinfo1.Pcgstpercent = Convert.ToDecimal(dt.Rows[j][30].ToString());
                                                            pinfo1.Psgstpercent = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                                            pinfo1.ProductType = 0;
                                                            pinfo1.PurchaseRate = 0;
                                                            pinfo1.ProductDiscount = 0;
                                                            pinfo1.Usesubtitle = "N";
                                                            pinfo1.decription = "";
                                                            pinfo1.StockAlert = 0;
                                                            pinfo1.HasWarranty = "N";
                                                            pinfo1.TaxSlab = "N";
                                                            pinfo1.WithoutSize = "N";
                                                            pinfo1.CategoryId = 0;
                                                            pinfo1.SubCatId = 0;
                                                            pinfo1.SubCatName = "";
                                                            pinfo1.AlternateDealerRate = Convert.ToDecimal(0);
                                                            pinfo1.Warranty = "";
                                                            pinfo1.PPOnMRP = "False";
                                                            pinfo1.RackNO = "";
                                                            pinfo1.AlternateUnitPurchaseRate = Convert.ToDecimal(0);
                                                            pinfo1.Vat = Convert.ToDecimal(0.00);
                                                            pinfo1.DealerRate = Convert.ToDecimal(0.00);
                                                            pinfo1.CompId = CommonMethod.CompId;
                                                            productrepo1.Add(pinfo1);
                                                            productrepo1.Save();
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    MessageBox.Show(ex.Message);
                                                }
                                            }
                                            BarCStatus = pinfo1.BarcodeStatus;
                                            Batch = pinfo1.WithBatch;
                                            BatchnExpiry = pinfo1.WithBatchAndExpiry;
                                        }
                                        catch (Exception ex)
                                        {
                                            MessageBox.Show(ex.Message);
                                        }
                                        try
                                        {
                                            decimal sinrate = 0, sindisc = 0, sindiscper = 0, sinspcldisc = 0, sinspcldiscper = 0, SaleRate = 0, SgstAmt = 0, CgstAmt = 0, Amount = 0, TaxableAmt = 0, IgstAmt = 0, TotalAmount = 0, Quantity = 0;
                                            try
                                            {
                                                Quantity = Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                Quantity = 0;
                                            }
                                            try
                                            {
                                                sinrate = Convert.ToDecimal(dt.Rows[j][16].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sinrate = 0;
                                            }
                                            try
                                            {
                                                sindisc = Convert.ToDecimal(dt.Rows[j][17].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sindisc = 0;
                                            }
                                            try
                                            {
                                                sindiscper = Math.Round(sindisc * 100 / sinrate, 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                sindiscper = 0;
                                            }
                                            try
                                            {
                                                sinspcldisc = Convert.ToDecimal(dt.Rows[j][21].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sinspcldisc = 0;
                                            }
                                            try
                                            {
                                                sinspcldiscper = Math.Round(sinspcldisc * 100 / (sinrate - sindisc), 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                sinspcldiscper = 0;
                                            }
                                            try
                                            {
                                                Amount = Convert.ToDecimal(dt.Rows[j][16].ToString());
                                                TaxableAmt = Convert.ToDecimal(dt.Rows[j][16].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                Amount = 0;
                                                TaxableAmt = 0;
                                            }
                                            try
                                            {
                                                if (Convert.ToDecimal(dt.Rows[j][17].ToString()) != 0 && dt.Rows[j][17].ToString() != "")
                                                    TaxableAmt = TaxableAmt - (Convert.ToDecimal(dt.Rows[j][17].ToString()));
                                            }
                                            catch (Exception)
                                            {
                                                TaxableAmt = 0;
                                            }

                                            try
                                            {
                                                if (Convert.ToDecimal(dt.Rows[j][29].ToString()) != 0 && dt.Rows[j][29].ToString() != "")
                                                {
                                                    CgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    SgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    IgstAmt = 0;
                                                    TotalAmount = TaxableAmt + CgstAmt + SgstAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                                else if (Convert.ToDecimal(dt.Rows[j][31].ToString()) != 0 && dt.Rows[j][31].ToString() != "")
                                                {
                                                    CgstAmt = 0;
                                                    SgstAmt = 0;
                                                    IgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    TotalAmount = TaxableAmt + IgstAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                                else
                                                {
                                                    CgstAmt = 0;
                                                    SgstAmt = 0;
                                                    IgstAmt = 0;
                                                    TotalAmount = TaxableAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                            }
                                            catch (Exception)
                                            {
                                                CgstAmt = 0;
                                                SgstAmt = 0;
                                                IgstAmt = 0;
                                            }

                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@BillNo", SqlDbType.Int).Value = custMaster.Id;
                                            command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = pinfo1.ProductName;//Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = pinfo1.ManufactureCompany;
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = pinfo1.Uniti;
                                            command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = pinfo1.Uniti;
                                            command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Quantity;
                                            command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                            command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = DBNull.Value;
                                            command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = sinrate;
                                            command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Amount;
                                            command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = sindiscper;
                                            command.Parameters.Add("@Vat", SqlDbType.Decimal).Value = 0;
                                            command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                            command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = SgstAmt;
                                            command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                            command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = CgstAmt;
                                            command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                            command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = IgstAmt;
                                            command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = TotalAmount;
                                            command.Parameters.Add("@HSNcode", SqlDbType.NVarChar).Value = Convert.ToString(dt.Rows[j][11].ToString());
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(dt.Rows[j][3].ToString());
                                            command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = SaleRate;
                                            command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = sinspcldiscper;// Convert.ToString(dt.Rows[i][3].ToString());
                                            command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = DBNull.Value; //Convert.ToString(dt.Rows[i][3].ToString());
                                            command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                            if (pinfo1.BarcodeStatus == "Static Barcode" || pinfo1.BarcodeStatus == "Our Barcode")
                                                command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = dt.Rows[j][4].ToString();// Convert.ToString(dt.Rows[i][3].ToString());
                                            else
                                                command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = DBNull.Value;// Convert.ToString(dt.Rows[i][3].ToString());
                                            if (pinfo1.WithBatch == "Y")
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = dt.Rows[j][5].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = DBNull.Value;
                                            }
                                            else if (pinfo1.WithBatchAndExpiry == "Y")
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = dt.Rows[j][5].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = dt.Rows[j][6].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                            }
                                            else
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                            }
                                            if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                            else
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);

                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        {
                                            db.CloseConnection();
                                        }
                                    }
                                }
                            }
                            else
                                if (Convert.ToString(dtexcel.Rows[i][colno].ToString()) == BillNum)
                                {
                                    try
                                    {
                                        DataRow dr = dt.NewRow();
                                        dr.ItemArray = dtexcel.Rows[i].ItemArray;
                                        dt.Rows.Add(dr);
                                    }
                                    catch { }
                                }
                                else
                                {
                                    CustomerBillMaster custMaster = new CustomerBillMaster();
                                    CustomerBillMasterRepository masterrepo = new CustomerBillMasterRepository();
                                    CustomerInformation newcust = new CustomerInformation();
                                    CustomerRepository newcustRepo = new CustomerRepository();
                                    try
                                    {
                                        if (dt.Rows.Count > 0)
                                        {
                                            newcust = newcustRepo.GetAll().Where(t => t.CustomerName == dt.Rows[0][7].ToString()).FirstOrDefault();
                                            if (newcust == null)
                                            {
                                                CustomerInformation newcust1 = new CustomerInformation();
                                                CustomerRepository newcustRepo1 = new CustomerRepository();
                                                newcust1.CustomerCode = dt.Rows[0][8].ToString();
                                                newcust1.CustomerName = dt.Rows[0][7].ToString();
                                                newcust1.CustomerID = maxCustid();
                                                newcust1.CustomerType = dt.Rows[0][9].ToString();
                                                newcust1.State = "Maharashtra";
                                                newcust1.CompId = CommonMethod.CompId;
                                                newcust1.Statecode = 27;
                                                newcust1.BuyerTinNo = dt.Rows[0][32].ToString();
                                                newcustRepo1.Add(newcust1);
                                                newcustRepo1.Save();
                                                newcust = newcust1;

                                            }
                                            string billinvoiceseries, billseriesnext;
                                            billinvoiceseries = (dt.Rows[0][colno].ToString());//"SHRL1";
                                            billseriesnext = "";
                                            cmbInvoiceSeries.Text = billinvoiceseries;
                                            txtSeriesNext.Text = billseriesnext;
                                            string billn = Convert.ToString(dt.Rows[0][1].ToString());
                                            maxbillidtype(1);
                                            custMaster.Billdate = Convert.ToDateTime(dt.Rows[0][2].ToString());
                                            custMaster.UserSeries = billinvoiceseries /*+ 'S'*/ + billseriesnext;
                                            custMaster.BillNo = txtbillno.Text;
                                            custMaster.CustomerName = Convert.ToString(dt.Rows[0][7].ToString());
                                            custMaster.TransactionYear = CommonMethod.TransactionYear;
                                            custMaster.CompId = CommonMethod.CompId;
                                            custMaster.BillType = "Cash";
                                            try
                                            {
                                                custMaster.TransportCharges = Convert.ToDecimal(dt.Rows[0][24].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.TransportCharges = 0;
                                            }
                                            try
                                            {
                                                custMaster.HamaliCharges = Convert.ToDecimal(dt.Rows[0][25].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.HamaliCharges = 0;
                                            }
                                            try
                                            {
                                                custMaster.Discount = Math.Round(Convert.ToDecimal((Convert.ToDecimal(dt.Rows[0][22].ToString()) * 100) / Convert.ToDecimal(dt.Compute("Sum([" + masterNetAmt + "])", string.Empty))), 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.Discount = 0;
                                            }
                                            custMaster.CustomerId = newcust.CustomerID;
                                            custMaster.CustomerType = dt.Rows[0][9].ToString();
                                            custMaster.PaymentDate = Convert.ToDateTime(dt.Rows[0][2].ToString());
                                            custMaster.YN = "0";
                                            custMaster.ShipCustomerId = newcust.CustomerID;
                                            custMaster.SupplyPlace = newcust.State;
                                            custMaster.TotalAmount = Convert.ToDecimal(dt.Compute("Sum([" + masterNetAmt + "])", string.Empty));//Convert.ToDecimal(dtexcel.Rows[8][0].ToString());
                                            decimal ntamt;
                                            if ((dt.Rows[0][22].ToString()) != "" && (dt.Rows[0][22]) != null)
                                                ntamt = Convert.ToDecimal(custMaster.TotalAmount - Convert.ToDecimal(dt.Rows[0][22].ToString()));
                                            else
                                                ntamt = Convert.ToDecimal(custMaster.TotalAmount - 0);
                                            custMaster.NetAmount = ntamt;
                                            try
                                            {
                                                custMaster.PaidAmount = Convert.ToDecimal(dt.Rows[0][26].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.PaidAmount = 0;
                                            }
                                            try
                                            {
                                                custMaster.RemainingAmount = Convert.ToDecimal(dt.Rows[0][27].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                custMaster.RemainingAmount = 0;
                                            }
                                            masterrepo.Add(custMaster);
                                            masterrepo.Save();
                                        }
                                    }
                                    catch (Exception) { }

                                    for (int j = 0; j < dt.Rows.Count; j++)
                                    {
                                        ProductRepository productrepo1 = new ProductRepository();
                                        ProductInformation pinfo1 = new ProductInformation();
                                        try
                                        {
                                            string p = Convert.ToString(dt.Rows[j][3].ToString());
                                            string u = "Pieces";
                                            string c = Convert.ToString(dt.Rows[j][14].ToString());
                                            if (string.IsNullOrEmpty(p) || string.IsNullOrEmpty(u) || string.IsNullOrEmpty(c))
                                            {
                                                MessageBox.Show("Please Fill all MasterInformation first Some MasterInformation is not found in database");
                                                goto A;
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    if (CommonMethod.commProduct == true)
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower()).FirstOrDefault();
                                                    else
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (pinfo1 == null)
                                                    {
                                                        pinfo1 = productrepo1.GetAll().Where(t => t.Prefix == Convert.ToString(dt.Rows[j][28].ToString()) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (pinfo1 != null)
                                                        {
                                                            p = pinfo1.ProductName;
                                                            u = pinfo1.Uniti;
                                                            c = pinfo1.ManufactureCompany;
                                                        }
                                                        else
                                                        {
                                                            Unit un = new Unit();
                                                            productrepo1 = new ProductRepository();
                                                            UnitRepository unRepo = new UnitRepository();
                                                            ManuCompanyInfo newcom = new ManuCompanyInfo();
                                                            ManufactureCInfoRepository newcrepo = new ManufactureCInfoRepository();
                                                            GroupMaster grmaste = new GroupMaster();
                                                            GroupMasterRepository grmasterrepo = new GroupMasterRepository();
                                                            pinfo1 = new ProductInformation();
                                                            grmaste = grmasterrepo.GetAll().Where(t => t.GroupMasterName == Convert.ToString(dt.Rows[j][12].ToString())).FirstOrDefault();
                                                            un = unRepo.GetAll().Where(t => t.UnitName == u).FirstOrDefault();
                                                            if (dt.Rows[j][4].ToString() != "")
                                                                pinfo1.BarcodeStatus = "Static Barcode";
                                                            else
                                                                pinfo1.BarcodeStatus = "No Barcode";
                                                            if (dt.Rows[j][5].ToString() != "" && dt.Rows[j][6].ToString() == "")
                                                                pinfo1.WithBatch = "Y";
                                                            else
                                                                pinfo1.WithBatch = "N";
                                                            if (dt.Rows[j][5].ToString() != "" && dt.Rows[j][6].ToString() != "")
                                                                pinfo1.WithBatchAndExpiry = "Y";
                                                            else
                                                                pinfo1.WithBatchAndExpiry = "N";
                                                            newcom = newcrepo.GetAll().Where(t => t.CompanyName == c).FirstOrDefault();
                                                            if (un == null)
                                                                SaveUnit(u);
                                                            if (newcom == null)
                                                                SaveCompany(c);
                                                            if (grmaste == null)
                                                                SaveGroup(dt.Rows[j][12].ToString());
                                                            pinfo1.ManufactureCompany = c;
                                                            pinfo1.Uniti = u;
                                                            pinfo1.ProductName = p;
                                                            grmaste = grmasterrepo.GetAll().Where(t => t.GroupMasterName == Convert.ToString(dt.Rows[j][12].ToString())).FirstOrDefault();
                                                            pinfo1.Prefix = Convert.ToString(dt.Rows[j][28].ToString());
                                                            pinfo1.GroupMasterId = grmaste.GroupMasterId;
                                                            pinfo1.Rate = 0;
                                                            pinfo1.DealerRate = 0;
                                                            pinfo1.Category = "N/A";
                                                            pinfo1.ProductCode = maxproductid();
                                                            pinfo1.PurchaseRate = 0;
                                                            pinfo1.ProductDiscount = 0;
                                                            pinfo1.TaxInclusive = "True";
                                                            pinfo1.HSNCode = Convert.ToString(dt.Rows[j][11].ToString());
                                                            pinfo1.IGstPercent = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                                            pinfo1.CGstPercent = Convert.ToDecimal(dt.Rows[j][30].ToString());
                                                            pinfo1.SGstPercent = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                                            pinfo1.Pigstpercent = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                                            pinfo1.Pcgstpercent = Convert.ToDecimal(dt.Rows[j][30].ToString());
                                                            pinfo1.Psgstpercent = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                                            pinfo1.ProductType = 0;
                                                            pinfo1.PurchaseRate = 0;
                                                            pinfo1.ProductDiscount = 0;
                                                            pinfo1.Usesubtitle = "N";
                                                            pinfo1.decription = "";
                                                            pinfo1.StockAlert = 0;
                                                            pinfo1.HasWarranty = "N";
                                                            pinfo1.TaxSlab = "N";
                                                            pinfo1.WithoutSize = "N";
                                                            pinfo1.CategoryId = 0;
                                                            pinfo1.SubCatId = 0;
                                                            pinfo1.SubCatName = "";
                                                            pinfo1.AlternateDealerRate = Convert.ToDecimal(0);
                                                            pinfo1.Warranty = "";
                                                            pinfo1.PPOnMRP = "False";
                                                            pinfo1.RackNO = "";
                                                            pinfo1.AlternateUnitPurchaseRate = Convert.ToDecimal(0);
                                                            pinfo1.Vat = Convert.ToDecimal(0.00);
                                                            pinfo1.DealerRate = Convert.ToDecimal(0.00);
                                                            pinfo1.CompId = CommonMethod.CompId;
                                                            productrepo1.Add(pinfo1);
                                                            productrepo1.Save();
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    MessageBox.Show(ex.Message);
                                                }
                                            }
                                            BarCStatus = pinfo1.BarcodeStatus;
                                            Batch = pinfo1.WithBatch;
                                            BatchnExpiry = pinfo1.WithBatchAndExpiry;
                                        }
                                        catch (Exception ex)
                                        {
                                            MessageBox.Show(ex.Message);
                                        }
                                        try
                                        {
                                            decimal sinrate = 0, sindisc = 0, sindiscper = 0, sinspcldisc = 0, sinspcldiscper = 0, SaleRate = 0, SgstAmt = 0, CgstAmt = 0, Amount = 0, TaxableAmt = 0, IgstAmt = 0, TotalAmount = 0, Quantity = 0;
                                            try
                                            {
                                                Quantity = Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                Quantity = 0;
                                            }
                                            try
                                            {
                                                sinrate = Convert.ToDecimal(dt.Rows[j][16].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sinrate = 0;
                                            }
                                            try
                                            {
                                                sindisc = Convert.ToDecimal(dt.Rows[j][17].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sindisc = 0;
                                            }
                                            try
                                            {
                                                sindiscper = Math.Round(sindisc * 100 / sinrate, 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                sindiscper = 0;
                                            }
                                            try
                                            {
                                                sinspcldisc = Convert.ToDecimal(dt.Rows[j][21].ToString()) / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                sinspcldisc = 0;
                                            }
                                            try
                                            {
                                                sinspcldiscper = Math.Round(sinspcldisc * 100 / (sinrate - sindisc), 2, MidpointRounding.AwayFromZero);
                                            }
                                            catch (Exception)
                                            {
                                                sinspcldiscper = 0;
                                            }
                                            try
                                            {
                                                Amount = Convert.ToDecimal(dt.Rows[j][16].ToString());
                                                TaxableAmt = Convert.ToDecimal(dt.Rows[j][16].ToString());
                                            }
                                            catch (Exception)
                                            {
                                                Amount = 0;
                                                TaxableAmt = 0;
                                            }

                                            try
                                            {
                                                if (Convert.ToDecimal(dt.Rows[j][17].ToString()) != 0 && dt.Rows[j][17].ToString() != "")
                                                    TaxableAmt = TaxableAmt - (Convert.ToDecimal(dt.Rows[j][17].ToString()));
                                            }
                                            catch (Exception)
                                            {
                                                TaxableAmt = 0;
                                            }
                                            try
                                            {
                                                if (Convert.ToDecimal(dt.Rows[j][29].ToString()) != 0 && dt.Rows[j][29].ToString() != "")
                                                {
                                                    CgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    SgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    IgstAmt = 0;
                                                    TotalAmount = TaxableAmt + CgstAmt + SgstAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                                else if (Convert.ToDecimal(dt.Rows[j][31].ToString()) != 0 && dt.Rows[j][31].ToString() != "")
                                                {
                                                    CgstAmt = 0;
                                                    SgstAmt = 0;
                                                    IgstAmt = (TaxableAmt * Convert.ToDecimal(dt.Rows[j][29].ToString())) / 100;
                                                    TotalAmount = TaxableAmt + IgstAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                                else
                                                {
                                                    CgstAmt = 0;
                                                    SgstAmt = 0;
                                                    IgstAmt = 0;
                                                    TotalAmount = TaxableAmt;
                                                    SaleRate = TotalAmount / Convert.ToDecimal(dt.Rows[j][15].ToString());
                                                }
                                            }
                                            catch (Exception)
                                            {
                                                CgstAmt = 0;
                                                SgstAmt = 0;
                                                IgstAmt = 0;
                                            }

                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPPOnBillSaveUpdate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@type", SqlDbType.VarChar).Value = 'B';
                                            command.Parameters.Add("@id", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@event", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@billtype", SqlDbType.Int).Value = 1;
                                            command.Parameters.Add("@BillNo", SqlDbType.Int).Value = custMaster.Id;
                                            command.Parameters.Add("@ProductId", SqlDbType.VarChar).Value = pinfo1.ProductName;//Convert.ToString(GvProductInfo.Rows[i].Cells["ProductNameg"].Value);
                                            command.Parameters.Add("@CompanyName", SqlDbType.VarChar).Value = pinfo1.ManufactureCompany;
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = pinfo1.Uniti;
                                            command.Parameters.Add("@AlternateUnit", SqlDbType.NVarChar).Value = pinfo1.Uniti;
                                            command.Parameters.Add("@Quantity", SqlDbType.Decimal).Value = Quantity;
                                            command.Parameters.Add("@FreeQty", SqlDbType.Decimal).Value = Convert.ToDecimal(0);
                                            command.Parameters.Add("@Code", SqlDbType.NVarChar).Value = DBNull.Value;
                                            command.Parameters.Add("@Rate", SqlDbType.Decimal).Value = sinrate;
                                            command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = Amount;
                                            command.Parameters.Add("@Discount", SqlDbType.Decimal).Value = sindiscper;
                                            command.Parameters.Add("@Vat", SqlDbType.Decimal).Value = 0;
                                            command.Parameters.Add("@SGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                            command.Parameters.Add("@SGstAmt", SqlDbType.Decimal).Value = SgstAmt;
                                            command.Parameters.Add("@CGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][29].ToString());
                                            command.Parameters.Add("@CGstAmt", SqlDbType.Decimal).Value = CgstAmt;
                                            command.Parameters.Add("@IGstPercent", SqlDbType.Decimal).Value = Convert.ToDecimal(dt.Rows[j][31].ToString());
                                            command.Parameters.Add("@IGstAmt", SqlDbType.Decimal).Value = IgstAmt;
                                            command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = TotalAmount;
                                            command.Parameters.Add("@HSNcode", SqlDbType.NVarChar).Value = Convert.ToString(dt.Rows[j][11].ToString());
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = Convert.ToString(CommonMethod.TransactionYear);
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@StockIn", SqlDbType.Int).Value = 0;
                                            command.Parameters.Add("@ProdSubtitle", SqlDbType.NVarChar).Value = Convert.ToString(dt.Rows[j][3].ToString());
                                            command.Parameters.Add("@SaleRate", SqlDbType.Decimal).Value = SaleRate;
                                            command.Parameters.Add("@SpcDisc", SqlDbType.Decimal).Value = sinspcldiscper;// Convert.ToString(dt.Rows[i][3].ToString());
                                            command.Parameters.Add("@Cess", SqlDbType.Decimal).Value = DBNull.Value; //Convert.ToString(dt.Rows[i][3].ToString());
                                            command.Parameters.Add("@CessAmt", SqlDbType.Decimal).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                            if (pinfo1.BarcodeStatus == "Static Barcode" || pinfo1.BarcodeStatus == "Our Barcode")
                                                command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = dt.Rows[j][4].ToString();// Convert.ToString(dt.Rows[i][3].ToString());
                                            else
                                                command.Parameters.Add("@Barcode", SqlDbType.NVarChar).Value = DBNull.Value;// Convert.ToString(dt.Rows[i][3].ToString());
                                            if (pinfo1.WithBatch == "Y")
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = dt.Rows[j][5].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = DBNull.Value;
                                            }
                                            else if (pinfo1.WithBatchAndExpiry == "Y")
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = dt.Rows[j][5].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = dt.Rows[j][6].ToString();//Convert.ToString(dt.Rows[i][3].ToString());
                                            }
                                            else
                                            {
                                                command.Parameters.Add("@BatchNo", SqlDbType.VarChar).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                                command.Parameters.Add("@Expiry", SqlDbType.VarChar).Value = DBNull.Value;//Convert.ToString(dt.Rows[i][3].ToString());
                                            }
                                            if (GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value == null)
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = 0;
                                            else
                                                command.Parameters.Add("@QtySubtitle", SqlDbType.Decimal).Value = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value);

                                            command.ExecuteNonQuery();
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        {
                                            db.CloseConnection();
                                        }
                                    }

                                    BillNum = Convert.ToString(dtexcel.Rows[i][colno].ToString());
                                    dt = new DataTable();
                                    dt = dtexcel.Clone();
                                    dt.Columns[16].DataType = typeof(decimal);
                                    dt.Columns[20].DataType = typeof(decimal);
                                    if (Convert.ToString(dtexcel.Rows[i][colno].ToString()) == BillNum)
                                    {
                                        try
                                        {
                                            DataRow dr = dt.NewRow();
                                            dr.ItemArray = dtexcel.Rows[i].ItemArray;
                                            dt.Rows.Add(dr);
                                        }
                                        catch { }
                                    }
                                }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
        A:
            {
            }
            return dtexcel;
        }

        public void SaveCompany(string companyName)
        {
            try
            {
                ManufactureCInfoRepository manufactureinforepo = new ManufactureCInfoRepository();
                ManuCompanyInfo BillId = new ManuCompanyInfo();
                if (CommonMethod.commProduct == true)
                    BillId = manufactureinforepo.GetAll().Where(t => t.CompanyName.Trim().ToLower() == companyName.Trim().ToLower()).FirstOrDefault();
                else
                    BillId = manufactureinforepo.GetAll().Where(t => t.CompanyName.Trim().ToLower() == companyName.Trim().ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (BillId != null)
                { }
                else
                {
                    ManufactureCInfoRepository manufactureinforepo1 = new ManufactureCInfoRepository();
                    ManuCompanyInfo companyinfo = new ManuCompanyInfo();
                    int n = companymaxid();
                    companyinfo.CompanyId = n;
                    companyinfo.CompanyName = companyName.Trim();
                    companyinfo.CompanyAddress = null;
                    companyinfo.ContactNo = null;
                    companyinfo.StockAlert = 0;
                    companyinfo.CompId = CommonMethod.CompId;
                    manufactureinforepo1.Add(companyinfo);
                    manufactureinforepo1.Save();
                    manufactureinforepo1.Dispose();
                }
                manufactureinforepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public void SaveGroup(string gName)
        {
            try
            {
                GroupMasterRepository unitrepo = new GroupMasterRepository();
                var supp = unitrepo.GetAll().Where(t => t.GroupMasterName.ToLower() == gName.ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (supp != null)
                { }
                else
                {
                    GroupMaster unitinfo = new GroupMaster();
                    unitinfo.GroupMasterName = gName;
                    unitinfo.Description = null;
                    unitinfo.CompId = CommonMethod.CompId;
                    unitrepo.Add(unitinfo);
                    unitrepo.Save();
                    unitrepo.Dispose();
                }
            }
            catch (Exception)
            { }
        }

        public void SaveUnit(string unit)
        {
            try
            {
                UnitRepository unitrepo = new UnitRepository();
                Unit supp = new Unit();
                if (CommonMethod.commProduct == true)
                    supp = unitrepo.GetAll().Where(t => t.UnitName.ToLower() == unit.ToLower()).FirstOrDefault();
                else
                    supp = unitrepo.GetAll().Where(t => t.UnitName.ToLower() == unit.ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                if (supp != null)
                { }
                else
                {
                    if (unit != "")
                    {
                        Unit unitinfo = new Unit();
                        int n = maxUnitid();
                        unitinfo.UnitID = n;
                        unitinfo.UnitName = unit;
                        unitinfo.Description = null;
                        unitinfo.UnitMarathi = null;
                        unitinfo.GSTUnitName = null;
                        unitinfo.CompId = CommonMethod.CompId;
                        unitinfo.StockAlertValue = 0;
                        unitrepo.Add(unitinfo);
                        unitrepo.Save();
                    }
                }
                unitrepo.Dispose();
            }
            catch (Exception)
            { }
        }

        public int maxUnitid()
        {
            try
            {
                int n;
                UnitRepository unitrepo = new UnitRepository();
                var mid = 0;
                if (CommonMethod.commProduct == true)
                    mid = Convert.ToInt32(unitrepo.GetAll().Max(t => t.UnitID));
                else
                    mid = Convert.ToInt32(unitrepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).Max(t => t.UnitID));
                if (mid == null)
                    n = 1;
                else
                    n = Convert.ToInt32(mid) + 1;
                unitrepo.Dispose();
                return n;
            }
            catch (Exception)
            { return 0; }
        }

        public int maxCustid()
        {
            try
            {
                int n;
                CustomerRepository custrepo = new CustomerRepository();
                var mid = 0;
                if (CommonMethod.commProduct == true)
                    mid = Convert.ToInt32(custrepo.GetAll().Max(t => t.CustomerID));
                else
                    mid = Convert.ToInt32(custrepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).Max(t => t.CustomerID));
                if (mid == null)
                    n = 1;
                else
                    n = Convert.ToInt32(mid) + 1;
                custrepo.Dispose();
                return n;
            }
            catch (Exception)
            { return 0; }
        }

        public int companymaxid()
        {
            try
            {
                int n;
                var mid = 0;
                ManufactureCInfoRepository manufactureinforepo = new ManufactureCInfoRepository();
                if (CommonMethod.commProduct == true)
                    mid = Convert.ToInt32(manufactureinforepo.GetAll().Max(t => t.CompanyId));
                else
                    mid = Convert.ToInt32(manufactureinforepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).Max(t => t.CompanyId));
                if (mid == null)
                    n = 1;
                else
                    n = Convert.ToInt32(mid) + 1;
                manufactureinforepo.Dispose();
                return n;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public DataTable ReadExcel(string fileName, string fileExt)
        {
            string conn = string.Empty;
            DataTable dtexcel = new DataTable();
            if (fileExt.CompareTo(".xls") == 0)
                conn = @"provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + fileName + ";Extended Properties='Excel 8.0;HRD=Yes;IMEX=1';"; //for below excel 2007  
            else
                conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + ";Extended Properties='Excel 12.0;HDR=NO';"; //for above excel 2007  
            using (OleDbConnection con = new OleDbConnection(conn))
            {
                con.Open();
                var sheets = con.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                try
                {
                    OleDbDataAdapter oleAdpt = new OleDbDataAdapter("SELECT * FROM [" + sheets.Rows[0]["TABLE_NAME"].ToString() + "]", con); //here we read data from sheet1  
                    oleAdpt.Fill(dtexcel); //fill excel data into dataTable  F10,F11,F14,F17,F18,F19,F20,F21 
                    int i;
                    progressBar1.Minimum = 0;
                    progressBar1.Maximum = dtexcel.Rows.Count;
                    progressBar1.Visible = true;
                    for (i = 5; i < (dtexcel.Rows.Count - 3); i++)
                    {
                        try
                        {
                            System.Windows.Forms.Application.DoEvents();
                            progressBar1.Value = i;
                            string p = Convert.ToString(dtexcel.Rows[i][0].ToString());
                            string u = Convert.ToString(dtexcel.Rows[i][5].ToString());
                            string c = Convert.ToString(dtexcel.Rows[i][1].ToString());
                            if (string.IsNullOrEmpty(p) || string.IsNullOrEmpty(u) || string.IsNullOrEmpty(c))
                            {
                                MessageBox.Show("Please Fill all MasterInformation first Some MasterInformation is not found in database");
                                goto A;
                            }
                            else
                            {
                                ProductRepository productrepo1 = new ProductRepository();
                                ProductInformation pinfo1 = new ProductInformation();
                                if (CommonMethod.commProduct == true)
                                    pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower()).FirstOrDefault();
                                else
                                    pinfo1 = productrepo1.GetAll().Where(t => t.ProductName.Trim().ToLower() == p.Trim().ToLower() && t.ManufactureCompany.ToLower() == c.ToLower() && t.Uniti.ToLower() == u.ToLower() && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (pinfo1 == null)
                                {
                                    MessageBox.Show("Please Fill all MasterInformation first Some MasterInformation is not found in database");
                                    goto A;
                                }
                            }
                        }
                        catch { }
                    }
                    CustomerBillMaster custMaster = new CustomerBillMaster();
                    CustomerBillMasterRepository masterrepo = new CustomerBillMasterRepository();
                    string billn = Convert.ToString(dtexcel.Rows[0][3].ToString());
                    if ((billn).Contains('T'))
                        maxbillidtype(1);
                    else
                        if ((billn).Contains('E'))
                            maxbillidtype(2);
                        else
                            maxbillidtype(3);
                    custMaster.Billdate = Convert.ToDateTime(dtexcel.Rows[1][3].ToString());
                    custMaster.BillNo = txtbillno.Text;
                    custMaster.TotalAmount = Convert.ToDecimal(dtexcel.Rows[8][0].ToString());
                    custMaster.NetAmount = Convert.ToDecimal(dtexcel.Rows[8][1].ToString());
                    custMaster.PaidAmount = Convert.ToDecimal(dtexcel.Rows[8][2].ToString());
                    custMaster.RemainingAmount = Convert.ToDecimal(dtexcel.Rows[8][3].ToString());
                    masterrepo.Add(custMaster);
                    masterrepo.Save();
                    for (i = 5; i < (dtexcel.Rows.Count - 3); i++)
                    {
                        try
                        {
                            System.Windows.Forms.Application.DoEvents();
                            progressBar1.Value = i;
                            string p = Convert.ToString(dtexcel.Rows[i][0].ToString());
                            string u = Convert.ToString(dtexcel.Rows[i][5].ToString());
                            string c = Convert.ToString(dtexcel.Rows[i][1].ToString());
                            if (!string.IsNullOrEmpty(p) && !string.IsNullOrEmpty(u) && !string.IsNullOrEmpty(c))
                            {
                                string Proname1 = p;
                                string Proname = "";
                                if ((Proname1).Contains("'"))
                                    Proname = Proname1.Replace("'", "");
                                else
                                    Proname = Proname1;

                                string Proname2 = Proname;
                                string Proname3 = "";
                                if ((Proname2).Contains(","))
                                    Proname3 = Proname2.Replace(",", "");
                                else
                                    Proname3 = Proname2;
                                CustomerBillDetail custDetail = new CustomerBillDetail();
                                CustomerBillDetailRepository custDetailRepo = new CustomerBillDetailRepository();
                                CustomerBillDetail custDetail1 = new CustomerBillDetail();
                            }
                        }
                        catch (Exception)
                        { }
                    }
                    progressBar1.Visible = false;
                }
                catch { }
            A: { }
            }
            return dtexcel;
        }

        public int maxproductid()
        {
            try
            {
                ProductRepository productrepo = new ProductRepository();
                var mid = 0;
                if (CommonMethod.commProduct == true)
                    mid = Convert.ToInt32(productrepo.GetAll().Max(t => t.ProductCode));
                else
                    mid = Convert.ToInt32(productrepo.GetAll().Where(t => t.CompId == CommonMethod.CompId).Max(t => t.ProductCode));
                if (mid == null)
                    maxProductCode = 1;
                else
                    maxProductCode = Convert.ToInt32(mid) + 1;
                productrepo.Dispose();
            }
            catch (Exception)
            { }
            return maxProductCode;
        }

        public void ExportToExcel(DataSet ds, string filename)
        {
            try
            {
                Microsoft.Office.Interop.Excel.Application excel;
                Microsoft.Office.Interop.Excel.Workbook excelworkBook;
                Microsoft.Office.Interop.Excel.Worksheet excelSheet;
                object misValue = System.Reflection.Missing.Value;
                excel = new Microsoft.Office.Interop.Excel.Application();
                excel.Visible = false;
                excel.DisplayAlerts = false;
                excelworkBook = excel.Workbooks.Add(Type.Missing);
                excelSheet = (Microsoft.Office.Interop.Excel.Worksheet)excelworkBook.ActiveSheet;
                excelSheet.Application.ActiveWindow.ScrollRow = 1;
                excelSheet.Application.ActiveWindow.SplitRow = 1;
                excelSheet.Application.ActiveWindow.FreezePanes = true;

                string data = null;
                progressBar1.Visible = true;
                progressBar1.Minimum = 0;
                progressBar1.Maximum = ds.Tables["CustomerBillDetail"].Rows.Count;
                progressBar1.Visible = true;
                int m = 1;
                int k = 0;
                int i = 0;
                k = i;
                excelSheet.get_Range("A1", "AH1").Font.Bold = true;
                excelSheet.get_Range("A1", "AH1").Font.Color = System.Drawing.Color.Red;
                excelSheet.Cells[m, 1] = "Bill No";
                excelSheet.Cells[m, 2] = "Document No";
                excelSheet.Cells[m, 3] = "Document Date";
                excelSheet.Cells[m, 4] = "Product Name";
                excelSheet.Cells[m, 5] = "BarCode Status";
                excelSheet.Cells[m, 6] = " BatchNo";
                excelSheet.Cells[m, 7] = " ExpiryDate";
                excelSheet.Cells[m, 8] = "Customer Name";
                excelSheet.Cells[m, 9] = " Customer Code";
                excelSheet.Cells[m, 10] = " Customer Type";
                excelSheet.Cells[m, 11] = "BatchCode";
                excelSheet.Cells[m, 12] = "HSN Code";
                excelSheet.Cells[m, 13] = "Category";
                excelSheet.Cells[m, 14] = "GST%";
                excelSheet.Cells[m, 15] = "Brand";
                excelSheet.Cells[m, 16] = "Quantity";
                excelSheet.Cells[m, 17] = "GrossValue";
                excelSheet.Cells[m, 18] = "Disc.";
                excelSheet.Cells[m, 19] = "sale";
                excelSheet.Cells[m, 20] = "tax";
                excelSheet.Cells[m, 21] = "net Ammonut";
                excelSheet.Cells[m, 22] = "Special Disc.";
                excelSheet.Cells[m, 23] = "Master Disc.";
                excelSheet.Cells[m, 24] = "cess";
                excelSheet.Cells[m, 25] = "TransportCharges";
                excelSheet.Cells[m, 26] = "Hamali Charges";
                excelSheet.Cells[m, 27] = " master Paid Amt";
                excelSheet.Cells[m, 28] = " master remaining Amt";
                excelSheet.Cells[m, 29] = "PCode";
                excelSheet.Cells[m, 30] = "CGST%";
                excelSheet.Cells[m, 31] = "SGST%";
                excelSheet.Cells[m, 32] = "IGST%";
                excelSheet.Cells[m, 33] = "GST NO";
                m++;

                for (i = 0; i <= ds.Tables["CustomerBillDetail"].Rows.Count - 1; i++)
                {
                    progressBar1.Value = k;
                    int l = 0;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[31].ToString();//hsn 1 billno
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[69].ToString();//hsn 2 documentno
                    excelSheet.Cells[m, ++l] = data;
                    data = Convert.ToDateTime(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[32]).ToString();//qty 3 ducdate
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[2].ToString();//rate 4 productname
                    excelSheet.Cells[m, ++l] = data;
                    if (ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[73].ToString() == "Our Barcode" || ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[73].ToString() == "Static Barcode")
                    {
                        data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[27].ToString();//rate 5 barcode
                        excelSheet.Cells[m, ++l] = data;
                    }
                    else
                    {
                        data = "";//rate 5
                        excelSheet.Cells[m, ++l] = data;
                    }
                    if (ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[71].ToString() == "Y")
                    {
                        data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[29].ToString();//rate 6 batch
                        excelSheet.Cells[m, ++l] = data;
                    }
                    else
                    {
                        data = "";//rate 6
                        excelSheet.Cells[m, ++l] = data;
                    }
                    if (ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[72].ToString() == "Y")
                    {
                        data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[29].ToString();//rate 6 batch
                        excelSheet.Cells[m, l] = data;
                        data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[28].ToString();//rate 7 ex date
                        excelSheet.Cells[m, ++l] = data;
                    }
                    else
                    {
                        data = "";//rate 4
                        excelSheet.Cells[m, ++l] = data;
                    }
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[34].ToString();//total 8 cust name
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[74].ToString();//disc 9 cust code
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[75].ToString();//taxamt 10 cust type
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[29].ToString();//gst 11 batch code
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[21].ToString();//total 12 hsn 
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[79].ToString();//productName 13 catag
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[17].ToString();//hsn 14 gst
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[3].ToString();//qty 15 brand
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4].ToString();//rate 16 quantity
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[5])).ToString();//total 17 gross v
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[8])).ToString();//disc 18 disc
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[5]) - Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[8])).ToString();//taxamt 19 sale
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[26])).ToString();//gst 20 tax
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = ((Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[5]) - Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[8])) - (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[23])) + (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[26]))).ToString();//total 21 total amt
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[4]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[23])).ToString();//disc 22 spcl disc
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = (Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[36]) * Convert.ToDecimal(ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[35]) / 100).ToString();//productName 23
                    data = Math.Round(Convert.ToDecimal(data), 2, MidpointRounding.AwayFromZero).ToString();
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[24].ToString();//hsn 24
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[47].ToString();//qty 25
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[48].ToString();//rate 26
                    excelSheet.Cells[m, ++l] = 0;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[39].ToString();//total 27
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[40].ToString();//productName 28
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[77].ToString();//total 29
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[16].ToString();//productName 30
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[14].ToString();//hsn 31
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[19].ToString();//qty 32
                    excelSheet.Cells[m, ++l] = data;
                    data = ds.Tables["CustomerBillDetail"].Rows[i].ItemArray[78].ToString();//rate 33
                    excelSheet.Cells[m, ++l] = 0;
                    m++;
                    k++;
                }
                m++;
                excelSheet.Columns.AutoFit();
                excelworkBook.SaveAs(filename, Excel1.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel1.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue);
                excelworkBook.Close(true, misValue, misValue);
                excel.Quit();
                releaseObject(excelSheet);
                releaseObject(excelworkBook);
                releaseObject(excel);
                MessageBox.Show("Excel file created , you can find the file " + filename);
                progressBar1.Visible = false;
            }
            catch (Exception)
            { }
        }

        private void Excel()
        {
            try
            {
                saveFileDialog.InitialDirectory = Environment.SpecialFolder.MyDocuments.ToString();
                saveFileDialog.Filter = "Execl files (*.xls or .xlsx)|.xls;*.xlsx";
                saveFileDialog.FilterIndex = 0;
                saveFileDialog.RestoreDirectory = true;
                saveFileDialog.CreatePrompt = true;
                saveFileDialog.Title = "Export Excel File To";
            }
            catch (Exception)
            { MessageBox.Show("Error occurred while converting into Exel file."); }
        }

        private void releaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                MessageBox.Show("Exception Occured while releasing object " + ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        }

        private void CalculateAfterStopTyping()
        {
            delay += 1;
            if (delayedCalculationThread != null && delayedCalculationThread.IsAlive)
                return;

            delayedCalculationThread = new Thread(() =>
            {
                while (delay >= 1)
                {
                    delay = delay - 1;
                    try
                    {
                        Thread.Sleep(1);
                    }
                    catch (Exception) { }
                }
                Invoke(new Action(() =>
                {
                    if (txtBarcode.Text != "" && (txtQuantity.Text == "" || txtQuantity.Text == "0"))
                    {
                        additemNew();
                        if (barcodestatus == "Static Barcode" && staticbarStatus == "N" && barcode != "" && barcode != null)
                        {
                            this.ActiveControl = txtQuantity;
                            StaticBarcode = true;
                        }
                    }
                }));
            });
            delayedCalculationThread.Start();
        }

        protected override bool ProcessDialogKey(Keys keyData)
        {
            if (Form.ModifierKeys == Keys.None && keyData == Keys.Escape)
            {
                if ((MessageBox.Show("Are you sure to Close this Form?", "Close", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK))
                {
                    deleteUnwantedBatchData();
                    this.Close();
                    return true;
                }
            }
            return base.ProcessDialogKey(keyData);
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.F11))
            {
                if (txtProductname.Text != "")
                {
                    string Proname = txtProductname.Text.Trim().Split(',')[0];
                    string company = txtProductname.Text.Trim().Split(',')[1];
                    string unit = txtProductname.Text.Trim().Split(',')[2];
                    ProductRepository productrepo = new ProductRepository();
                    ProductInformation pData = new ProductInformation();
                    if (CommonMethod.commProduct == true)
                        pData = productrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                    else
                        pData = productrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Uniti == unit && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    if (pData != null)
                    {
                        if (pData.Image != null)
                        {
                            pictureBox1.Visible = true;
                            pictureBox1.Height = 225;
                            pictureBox1.Width = 295;
                            byte[] @photoProduct;
                            @photoProduct = (byte[])pData.Image;
                            System.IO.MemoryStream ms = new System.IO.MemoryStream(@photoProduct);
                            pictureBox1.Image = System.Drawing.Image.FromStream(ms);
                            this.ActiveControl = txtProductname;
                        }
                        else
                        {
                            pictureBox1.Image = null;
                            MessageBox.Show("Image Not Available.", "Warning");
                            this.ActiveControl = txtProductname;
                        }
                    }
                    return true;
                }
                else
                {
                    MessageBox.Show("Enter Product Name First.", "Warning");
                    this.ActiveControl = txtProductname;
                    return true;
                }
            }
            if (keyData == Keys.F12)
            {
                pnlOtherDetails.Visible = true;
                this.ActiveControl = txtBillReceiptNo;
                return true;
            }
            if (keyData == Keys.F3)
            {
                if (btnsave.Enabled == true)
                    SaveCustomerBill();
                else if (btnsave.Enabled == false)
                    updateCustomerBill();
                return true;
            }
            return base.ProcessCmdKey(ref msg, keyData);
        }

        #endregion

        #region Events
        private void frmCustomerBill_Load(object sender, EventArgs e)
        {
            pnlSubtitle.Visible = false;
            txtSubtitle.Visible = false;
            pnlCopies.Visible = false;
            try
            {
                if (this.Height > Screen.PrimaryScreen.WorkingArea.Height)
                    this.Height = Screen.PrimaryScreen.WorkingArea.Height;
                if (this.Width > Screen.PrimaryScreen.WorkingArea.Width)
                    this.Width = Screen.PrimaryScreen.WorkingArea.Width;
                tooltipbtn.SetToolTip(this.rbtnaddproduct, "Click To Add Product");
                tooltipbtn.SetToolTip(this.btnCustForm, "Click To Add Customer");
                tooltipbtn.SetToolTip(this.rbtnaddstock, "Click To Add Stock");
                grpSaleReturnDetail.Visible = false;
                SetDataM = SettingRepoM.GetAll().Where(t => t.CompId == CommonMethod.CompId).FirstOrDefault();
                loadProductName();
                if (DCId == 0 && custbillno == null)
                {
                    txtVehicleNo.Text = "";
                    string cnString2 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
                    using (SqlConnection con = new SqlConnection(cnString2))
                    {
                        SqlCommand cmd = new SqlCommand("select Distinct(VehicleNo) from CustomerBillMaster where VehicleNo<>'' and CompId='" + CommonMethod.CompId + "' and TransactionYear='" + CommonMethod.TransactionYear + "'", con);
                        con.Open();
                        SqlDataReader reader = cmd.ExecuteReader();
                        AutoCompleteStringCollection MyCollection = new AutoCompleteStringCollection();
                        while (reader.Read())
                        {
                            try
                            {
                                MyCollection.Add(reader.GetString(0));
                            }
                            catch (Exception)
                            { }
                        }
                        txtVehicleNo.AutoCompleteCustomSource = MyCollection;
                        con.Close();
                        reader.Dispose();
                    }
                }
            }
            catch (Exception)
            { }
            gvProductRemStock.Visible = false;
            txtprefixproduct.Visible = false;
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            deleteUnwantedBatchData();
            if ((MessageBox.Show("Are you sure to Close this Form?", "Close", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK))
                this.Close();
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            decimal totalSGst = 0, totalCGst = 0, totalIGst = 0;
            bool isvalid = true;
            txtQuantity.Enabled = true;
            try
            {
                if (btnUpdate.Enabled == false && btnsave.Enabled == false)
                { }
                else
                {
                    if (cmbcustomername.Text != "Select")
                    {
                        if (productentrytype == 1 || productentrytype == 2)
                        {
                            if (txtBatchNo.Text.Trim() == "")
                            {
                                MessageBox.Show("Enter Batch  Number.", "Warning");
                                this.ActiveControl = txtBatchNo;
                                isvalid = false;
                            }
                            else if (productentrytype != 2)
                            {
                                if (txtExpiry.Text.Trim() == "")
                                {
                                    MessageBox.Show("Select Expiry Date.", "Warning");
                                    this.ActiveControl = txtExpiry;
                                    isvalid = false;
                                }
                                //else if (Convert.ToDateTime(txtExpiry.Text) < Convert.ToDateTime(System.DateTime.Now.Date.ToString("dd/MM/yyyy")))
                                //{
                                //    MessageBox.Show("Product is Expired", "Warning");
                                //    isvalid = false;
                                //}
                            }
                        }
                        if (barcodestatus == "Our Barcode" || barcodestatus == "Static Barcode")
                        {
                            if (barcode == "" || barcode == null)
                            {
                                MessageBox.Show("Select Barcode.", "Warning");
                                this.ActiveControl = txtQuantity;
                                isvalid = false;
                            }
                        }
                        if (barcodestatus == "No Barcode" && productentrytype == 3)
                        {
                            if (psize == "" || psize == null)
                            {
                                MessageBox.Show("Select Size", "Warning");
                                txtQuantity.Focus();
                                isvalid = false;
                            }
                        }
                        if (txtProductname.Text.Trim() != "" && txtQuantity.Text != "" && txtrate.Text != "" && txtrate.Text != "0" && isvalid == true)
                        {
                            if (SetDataM.VatOption == "Exclusive")
                            {
                                setvat1 = Convert.ToDecimal(SetDataM.Vat1);
                                setvat2 = Convert.ToDecimal(SetDataM.Vat2);
                            }
                            for (int i = 0; i < dtgvcode.RowCount; i++)
                            {
                                if (dtgvcode.Rows[i].Cells[0].Value.ToString() == "")
                                {
                                    MessageBox.Show("All Quantity must have Serial No or Code.", "Warning");
                                    dtgvcode.Visible = true;
                                    this.ActiveControl = dtgvcode;
                                    dtgvcode.CurrentCell = dtgvcode[0, i];
                                    dtgvcode.CurrentCell.Selected = true;
                                    goto a;
                                }
                            }
                            string Proname = txtProductname.Text.Trim().Split(',')[0];
                            string company = txtProductname.Text.Trim().Split(',')[1];
                            string unit = txtProductname.Text.Trim().Split(',')[2];
                            string colorname = AIOInventorySystem.Desk.Forms.frmBarcodeChoice.glcolorname;
                            string glsize = "";
                            if (isdirect == 1)
                            {
                                try
                                {
                                    glsize = Convert.ToString(AIOInventorySystem.Desk.Forms.frmBarcodeChoice.glsize);
                                }
                                catch (Exception)
                                { glsize = ""; }
                            }
                            else
                            {
                                try
                                {
                                    if (colIndex != -1)
                                        glsize = Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Sizec"].Value);
                                    else
                                        glsize = "";
                                }
                                catch (Exception)
                                { glsize = ""; }
                            }
                            string batch = txtBatchNo.Text;
                            decimal lblbrate = Convert.ToDecimal(lblBasicRate.Text);
                            //-----------------Batch Data validation 06032018
                            for (int x = 0; x < GvProductInfo.Rows.Count; x++)
                            {
                                if (colIndex != x)
                                {
                                    string prdtname = "", cname = "", unitname = "", batchno = "", bcolor = "", bsize = "";
                                    decimal brate = 0;
                                    prdtname = Convert.ToString(GvProductInfo.Rows[x].Cells["ProductNameg"].Value);
                                    cname = Convert.ToString(GvProductInfo.Rows[x].Cells["Company"].Value);
                                    unitname = Convert.ToString(GvProductInfo.Rows[x].Cells["Unit"].Value);
                                    brate = Convert.ToDecimal(GvProductInfo.Rows[x].Cells["Rate"].Value);
                                    bcolor = Convert.ToString(GvProductInfo.Rows[x].Cells["ColorNm"].Value);
                                    try
                                    {
                                        bsize = Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Sizec"].Value);
                                    }
                                    catch (Exception)
                                    { }
                                    psize = glsize.ToString();
                                    batchno = Convert.ToString(GvProductInfo.Rows[x].Cells["BatchNo"].Value);
                                    string[] gridbarray = { };
                                    string[] txtbarray = { };
                                    if (batchno != "" && batch != "")
                                    {
                                        if (batchno.Contains(','))
                                        {
                                            gridbarray = batchno.Split(',');
                                            if (txtBatchNo.Text.Contains(','))
                                            {
                                                txtbarray = txtBatchNo.Text.Split(',');
                                                for (int s = 0; s < txtbarray.Length; s++)
                                                {
                                                    for (int k = 0; k < gridbarray.Length; k++)
                                                    {
                                                        if (prdtname == Proname && cname == company && unitname == unit && gridbarray[k] == txtbarray[s])
                                                        {
                                                            isvalid = false;
                                                            MessageBox.Show("You already used this batch." + Environment.NewLine + "You can update that batch quantity.", "Warning");
                                                            goto a;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (int k = 0; k < gridbarray.Length; k++)
                                                {
                                                    if (prdtname == Proname && cname == company && unitname == unit && gridbarray[k] == txtBatchNo.Text)
                                                    {
                                                        isvalid = false;
                                                        MessageBox.Show("You already used this batch." + Environment.NewLine + "You can update that batch quantity.", "Warning");
                                                        goto a;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (txtBatchNo.Text.Contains(','))
                                            {
                                                txtbarray = txtBatchNo.Text.Split(',');
                                                for (int s = 0; s < txtbarray.Length; s++)
                                                {
                                                    if (prdtname == Proname && cname == company && unitname == unit && batchno == txtbarray[s])
                                                    {
                                                        isvalid = false;
                                                        MessageBox.Show("You already used this batch." + Environment.NewLine + "You can update that batch quantity.", "Warning");
                                                        goto a;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (prdtname == Proname && cname == company && unitname == unit && batchno == txtBatchNo.Text)
                                                {
                                                    isvalid = false;
                                                    MessageBox.Show("You already used this batch." + Environment.NewLine + "You can update that batch quantity.", "Warning");
                                                    goto a;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (prdtname == Proname && cname == company && unitname == unit && brate == lblbrate)
                                        {
                                            isvalid = false;
                                            MessageBox.Show("You already add this Product" + Environment.NewLine + "You can update that product quantity.", "Warning");
                                            goto a;
                                        }
                                    }
                                }
                            }
                            ///---------------- batch validation
                            if (colIndex != -1 && isvalid == true)
                            {
                                if (FormulaConstCount == formulaCount)
                                    SizeQty = 0;  //added on 03052018  if formula doesn't contain value for quantity                                
                                int id = Convert.ToInt32(GvProductInfo.Rows[colIndex].Cells["Id"].Value);
                                if (batch.Trim() == Convert.ToString(GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value).Trim())
                                {
                                    if (txtSubtitle.Text != "" && dtgvFormulae.RowCount == 0)
                                        Proname = txtSubtitle.Text + "," + Proname;        //Nilophar 14072017
                                    GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value = barcode;
                                    GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value = Proname;
                                    GvProductInfo.Rows[colIndex].Cells["Company"].Value = company;
                                    GvProductInfo.Rows[colIndex].Cells["Unit"].Value = unit;
                                    GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value = cmbUnit.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value = txtQuantity.Text;
                                    if (ProductCategory == "Motor")
                                        if (dtgvcode.Rows.Count > 0)
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = dtgvcode.Rows[0].Cells[0].Value.ToString();
                                        else
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = "";
                                    else
                                        GvProductInfo.Rows[colIndex].Cells["Code"].Value = "";
                                    GvProductInfo.Rows[colIndex].Cells["Rate"].Value = lblBasicRate.Text; //txtrate.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Amount"].Value = txtAmount.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Disc"].Value = txtpdiscount.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SGST"].Value = cmbsgst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value = lblpvat.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CGST"].Value = cmbcgst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value = lblCGST.Text;
                                    GvProductInfo.Rows[colIndex].Cells["IGST"].Value = cmbigst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value = lblIGST.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Cess"].Value = txtpCess.Text;
                                    GvProductInfo.Rows[colIndex].Cells["TotalAmount"].Value = txtpTotalAmt.Text;
                                    GvProductInfo.Rows[colIndex].Cells["HSNCode"].Value = txtHSNCode.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SaleRate"].Value = txtrate.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value = lblpCessamt.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SubTitle"].Value = txtSubtitle.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SizeSpec"].Value = SizeSpecString;
                                    GvProductInfo.Rows[colIndex].Cells["SizeQtyg"].Value = SizeQty.ToString();
                                    if (txtQuantitySubtitle.Text != "")
                                        GvProductInfo.Rows[colIndex].Cells["QuantitySubtitle"].Value = txtQuantitySubtitle.Text;
                                    else
                                        GvProductInfo.Rows[colIndex].Cells["QuantitySubtitle"].Value = "0";
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = txtBatchNo.Text;
                                        if (productentrytype != 2)
                                            GvProductInfo.Rows[colIndex].Cells["ExpiryDate"].Value = txtExpiry.Text;
                                    }
                                    GvProductInfo.Rows[colIndex].Cells["Sizec"].Value = glsize;
                                    GvProductInfo.Rows[colIndex].Cells["Department"].Value = deptname;
                                    GvProductInfo.Rows[colIndex].Cells["ColorNm"].Value = pcolor;
                                    GvProductInfo.Rows[colIndex].Cells["Categoryg"].Value = category;
                                    GvProductInfo.Rows[colIndex].Cells["BarcodePriceg"].Value = BarcodePrice;
                                    updatebatchtableenrty(colIndex, id);
                                    try
                                    {
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value;
                                        command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["Company"].Value;
                                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["Unit"].Value;
                                        command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                        SqlDataReader reader = command.ExecuteReader();
                                        DataTable dtRate = new DataTable();
                                        dtRate.Load(reader);
                                        decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                        decimal qty = 0;
                                        try
                                        {
                                            if (GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString() != GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value.ToString())
                                            {
                                                ProductRepository productrepo1 = new ProductRepository();
                                                var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value.ToString() && t.ManufactureCompany == GvProductInfo.Rows[colIndex].Cells["Company"].Value.ToString() && t.Uniti == GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString()).FirstOrDefault();
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value) * (Convert.ToDecimal(productdata1.UnitQty) / Convert.ToDecimal(productdata1.AlternateUnitQty));
                                            }
                                            else
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value);
                                        }
                                        catch (Exception)
                                        {
                                            qty = 0;
                                        }
                                        tpuramt = tpuramt + (avgprice * qty);
                                        db.CloseConnection();
                                        dtRate.Dispose();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }
                                else
                                {
                                    changestatusto_purchase(colIndex, Convert.ToInt32(GvProductInfo.Rows[colIndex].Cells["Id"].Value));
                                    changestatusto_purchase1(colIndex, Convert.ToInt32(GvProductInfo.Rows[colIndex].Cells["Id"].Value));
                                    if (txtSubtitle.Text != "" && dtgvFormulae.RowCount == 0) { Proname = txtSubtitle.Text + "," + Proname; }  //Nilophar 14072017
                                    if (GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value.ToString().Trim() == Proname && GvProductInfo.Rows[colIndex].Cells["Company"].Value.ToString().Trim() == company && GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString().Trim() == unit)
                                        GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value = updatebarcode;
                                    else
                                        GvProductInfo.Rows[colIndex].Cells["Barcodeg"].Value = barcode;
                                    GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value = Proname;
                                    GvProductInfo.Rows[colIndex].Cells["Company"].Value = company;
                                    GvProductInfo.Rows[colIndex].Cells["Unit"].Value = unit;
                                    GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value = cmbUnit.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value = txtQuantity.Text;
                                    if (ProductCategory == "Motor")
                                        if (dtgvcode.Rows.Count > 0)
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = dtgvcode.Rows[0].Cells[0].Value.ToString();
                                        else
                                            GvProductInfo.Rows[colIndex].Cells["Code"].Value = "";
                                    else
                                        GvProductInfo.Rows[colIndex].Cells["Code"].Value = "";
                                    GvProductInfo.Rows[colIndex].Cells["Rate"].Value = lblBasicRate.Text; //txtrate.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Amount"].Value = txtAmount.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Disc"].Value = txtpdiscount.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SGST"].Value = cmbsgst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SGSTAmt"].Value = lblpvat.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CGST"].Value = cmbcgst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CGSTAmt"].Value = lblCGST.Text;
                                    GvProductInfo.Rows[colIndex].Cells["IGST"].Value = cmbigst.Text;
                                    GvProductInfo.Rows[colIndex].Cells["IGSTAmt"].Value = lblIGST.Text;
                                    GvProductInfo.Rows[colIndex].Cells["Cess"].Value = txtpCess.Text;
                                    GvProductInfo.Rows[colIndex].Cells["TotalAmount"].Value = txtpTotalAmt.Text;
                                    GvProductInfo.Rows[colIndex].Cells["HSNCode"].Value = txtHSNCode.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SaleRate"].Value = txtrate.Text;
                                    GvProductInfo.Rows[colIndex].Cells["CessAmt"].Value = lblpCessamt.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SubTitle"].Value = txtSubtitle.Text;
                                    GvProductInfo.Rows[colIndex].Cells["SizeSpec"].Value = SizeSpecString;
                                    GvProductInfo.Rows[colIndex].Cells["SizeQtyg"].Value = SizeQty.ToString();
                                    if (txtQuantitySubtitle.Text != "")
                                        GvProductInfo.Rows[colIndex].Cells["QuantitySubtitle"].Value = txtQuantitySubtitle.Text;
                                    else
                                        GvProductInfo.Rows[colIndex].Cells["QuantitySubtitle"].Value = "0";
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        GvProductInfo.Rows[colIndex].Cells["BatchNo"].Value = txtBatchNo.Text;
                                        if (productentrytype != 2)
                                            GvProductInfo.Rows[colIndex].Cells["ExpiryDate"].Value = txtExpiry.Text;
                                    }
                                    GvProductInfo.Rows[colIndex].Cells["Sizec"].Value = glsize;
                                    GvProductInfo.Rows[colIndex].Cells["Department"].Value = deptname;
                                    GvProductInfo.Rows[colIndex].Cells["ColorNm"].Value = pcolor;
                                    GvProductInfo.Rows[colIndex].Cells["Categoryg"].Value = category;
                                    GvProductInfo.Rows[colIndex].Cells["BarcodePriceg"].Value = BarcodePrice;
                                    batchtableenrty(colIndex);
                                    try
                                    {
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value;
                                        command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["Company"].Value;
                                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = GvProductInfo.Rows[colIndex].Cells["Unit"].Value;
                                        command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                        SqlDataReader reader = command.ExecuteReader();
                                        DataTable dtRate = new DataTable();
                                        dtRate.Load(reader);
                                        decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                        decimal qty = 0;
                                        try
                                        {
                                            if (GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString() != GvProductInfo.Rows[colIndex].Cells["SaleUnit"].Value.ToString())
                                            {
                                                ProductRepository productrepo1 = new ProductRepository();
                                                var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value.ToString() && t.ManufactureCompany == GvProductInfo.Rows[colIndex].Cells["Company"].Value.ToString() && t.Uniti == GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString()).FirstOrDefault();
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value) * (Convert.ToDecimal(productdata1.UnitQty) / Convert.ToDecimal(productdata1.AlternateUnitQty));
                                            }
                                            else
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value);
                                        }
                                        catch (Exception)
                                        {
                                            qty = 0;
                                        }
                                        tpuramt = tpuramt + (avgprice * qty);
                                        db.CloseConnection();
                                        dtRate.Dispose();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }

                                totalamt = 0; totalqty = 0;
                                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                                totalSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                                totalCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                                totalIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));

                                txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                txttotSGst.Text = Convert.ToString(Math.Round(totalSGst, 2, MidpointRounding.AwayFromZero));
                                txttotCGst.Text = Convert.ToString(Math.Round(totalCGst, 2, MidpointRounding.AwayFromZero));
                                txttotIGst.Text = Convert.ToString(Math.Round(totalIGst, 2, MidpointRounding.AwayFromZero));
                                lbltpuramt.Text = Convert.ToString(Math.Round(tpuramt, 2, MidpointRounding.AwayFromZero));
                                colIndex = -1;
                                clearatadd();
                            }
                            else if (isvalid == true)
                            {
                                if (FormulaConstCount == formulaCount)
                                    SizeQty = 0;  //added on 03052018  if formula doesn't contain value for quantity
                                if (ProductCategory == "Motor")
                                {
                                    int rowcount = dtgvcode.RowCount;
                                    for (int l = 0; l < dtgvcode.RowCount; l++)
                                    {
                                        for (int j = 0; j < GvProductInfo.RowCount; j++)
                                        {
                                            if (GvProductInfo.Rows[j].Cells["Code"].Value.ToString() != "")
                                            {
                                                if (GvProductInfo.Rows[j].Cells["Code"].Value.ToString() == dtgvcode.Rows[l].Cells[0].Value.ToString() && GvProductInfo.Rows[j].Cells["ProductNameg"].Value.ToString() == Proname && GvProductInfo.Rows[j].Cells["Company"].Value.ToString() == company && GvProductInfo.Rows[j].Cells["Unit"].Value.ToString() == unit)
                                                {
                                                    MessageBox.Show("You already entered this product.", "Warning");
                                                    goto s;
                                                }
                                            }
                                        }
                                        int i = GvProductInfo.RowCount;
                                        GvProductInfo.Rows.Add();
                                        productCount++;
                                        if (txtSubtitle.Text != "" && dtgvFormulae.RowCount == 0) { Proname = txtSubtitle.Text + "," + Proname; }  //Nilophar 14072017
                                        GvProductInfo.Rows[i].Cells["ProductNameg"].Value = Proname;
                                        GvProductInfo.Rows[i].Cells["Company"].Value = company;
                                        GvProductInfo.Rows[i].Cells["Unit"].Value = unit;
                                        GvProductInfo.Rows[i].Cells["SaleUnit"].Value = cmbUnit.Text;
                                        GvProductInfo.Rows[i].Cells["Quantityg"].Value = "1";
                                        GvProductInfo.Rows[i].Cells["Code"].Value = dtgvcode.Rows[l].Cells[0].Value.ToString();
                                        GvProductInfo.Rows[i].Cells["Rate"].Value = lblBasicRate.Text;
                                        GvProductInfo.Rows[i].Cells["Amount"].Value = Convert.ToString(Math.Round(Convert.ToDecimal(txtAmount.Text) / Convert.ToDecimal(txtQuantity.Text), 2, MidpointRounding.AwayFromZero));
                                        if (txtpdiscount.Text == "")
                                            GvProductInfo.Rows[i].Cells["Disc"].Value = 0;
                                        else
                                            GvProductInfo.Rows[i].Cells["Disc"].Value = txtpdiscount.Text;
                                        if (txtpSpcDisc.Text == "")
                                            GvProductInfo.Rows[i].Cells["SpDisc"].Value = 0;
                                        else
                                            GvProductInfo.Rows[i].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                        if (cmbsgst.Text == "")
                                            GvProductInfo.Rows[i].Cells["SGST"].Value = 0;
                                        else
                                            GvProductInfo.Rows[i].Cells["SGST"].Value = cmbsgst.Text; //sGst
                                        Decimal itemSgstamt = Math.Round(Convert.ToDecimal(lblpvat.Text) / rowcount, 2, MidpointRounding.AwayFromZero);
                                        Decimal itemCgstamt = Math.Round(Convert.ToDecimal(lblCGST.Text) / rowcount, 2, MidpointRounding.AwayFromZero);
                                        Decimal itemIgstamt = Math.Round(Convert.ToDecimal(lblIGST.Text) / rowcount, MidpointRounding.AwayFromZero);
                                        GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = itemSgstamt.ToString();
                                        GvProductInfo.Rows[i].Cells["CGST"].Value = cmbcgst.Text;
                                        GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = itemCgstamt.ToString();
                                        GvProductInfo.Rows[i].Cells["IGST"].Value = cmbigst.Text;
                                        GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = itemIgstamt.ToString();
                                        GvProductInfo.Rows[i].Cells["Cess"].Value = txtpCess.Text;
                                        GvProductInfo.Rows[i].Cells["TotalAmount"].Value = Convert.ToDecimal(txtpTotalAmt.Text) / Convert.ToDecimal(txtQuantity.Text);
                                        GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                                        GvProductInfo.Rows[i].Cells["HSNCode"].Value = txtHSNCode.Text;
                                        GvProductInfo.Rows[i].Cells["SaleRate"].Value = txtrate.Text;
                                        GvProductInfo.Rows[i].Cells["CessAmt"].Value = lblpCessamt.Text;
                                        GvProductInfo.Rows[i].Cells["Barcodeg"].Value = barcode;
                                        GvProductInfo.Rows[i].Cells["SubTitle"].Value = txtSubtitle.Text;
                                        GvProductInfo.Rows[i].Cells["SizeSpec"].Value = SizeSpecString;
                                        GvProductInfo.Rows[i].Cells["SizeQtyg"].Value = SizeQty.ToString();
                                        if (txtQuantitySubtitle.Text != "")
                                            GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = txtQuantitySubtitle.Text;
                                        else
                                            GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = "0";
                                        GvProductInfo.Rows[i].Cells["Sizec"].Value = psize;
                                        GvProductInfo.Rows[i].Cells["Department"].Value = deptname;
                                        GvProductInfo.Rows[i].Cells["ColorNm"].Value = pcolor;
                                        GvProductInfo.Rows[i].Cells["Categoryg"].Value = category;
                                        GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value = BarcodePrice;
                                        Proname = txtProductname.Text.Trim().Split(',')[0];  //reinitialised with product name
                                        try
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;

                                            command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["ProductNameg"].Value;
                                            command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["Company"].Value;
                                            command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["Unit"].Value;
                                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                            command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                            command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                            SqlDataReader reader = command.ExecuteReader();
                                            DataTable dtRate = new DataTable();
                                            dtRate.Load(reader);
                                            decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                            decimal qty = 0;
                                            try
                                            {
                                                if (GvProductInfo.Rows[i].Cells["Unit"].Value.ToString() != GvProductInfo.Rows[i].Cells["SaleUnit"].Value.ToString())
                                                {
                                                    ProductRepository productrepo1 = new ProductRepository();
                                                    var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == GvProductInfo.Rows[i].Cells["ProductNameg"].Value.ToString() && t.ManufactureCompany == GvProductInfo.Rows[i].Cells["Company"].Value.ToString() && t.Uniti == GvProductInfo.Rows[i].Cells["Unit"].Value.ToString()).FirstOrDefault();
                                                    qty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) * (Convert.ToDecimal(productdata1.UnitQty) / Convert.ToDecimal(productdata1.AlternateUnitQty));
                                                }
                                                else
                                                    qty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                            }
                                            catch (Exception)
                                            {
                                                qty = 0;
                                            }
                                            tpuramt = tpuramt + (avgprice * qty);
                                            db.CloseConnection();
                                            dtRate.Dispose();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                }
                                else
                                {
                                    int i = GvProductInfo.RowCount;
                                    GvProductInfo.Rows.Add();
                                    productCount++;
                                    if (txtSubtitle.Text != "" && dtgvFormulae.RowCount == 0)
                                        Proname = txtSubtitle.Text + "," + Proname;  //Nilophar 14072017
                                    GvProductInfo.Rows[i].Cells["ProductNameg"].Value = Proname;
                                    GvProductInfo.Rows[i].Cells["Company"].Value = company;
                                    GvProductInfo.Rows[i].Cells["Unit"].Value = unit;
                                    GvProductInfo.Rows[i].Cells["SaleUnit"].Value = cmbUnit.Text;
                                    GvProductInfo.Rows[i].Cells["Quantityg"].Value = txtQuantity.Text;
                                    GvProductInfo.Rows[i].Cells["Code"].Value = "";
                                    GvProductInfo.Rows[i].Cells["Rate"].Value = lblBasicRate.Text;// txtrate.Text;
                                    GvProductInfo.Rows[i].Cells["Amount"].Value = txtAmount.Text;
                                    if (txtpdiscount.Text == "")
                                        GvProductInfo.Rows[i].Cells["Disc"].Value = 0;
                                    else
                                        GvProductInfo.Rows[i].Cells["Disc"].Value = txtpdiscount.Text;
                                    if (txtpSpcDisc.Text == "")
                                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = 0;
                                    else
                                        GvProductInfo.Rows[i].Cells["SpDisc"].Value = txtpSpcDisc.Text;
                                    if (cmbsgst.Text == "")
                                        GvProductInfo.Rows[i].Cells["SGST"].Value = 0;
                                    else
                                        GvProductInfo.Rows[i].Cells["SGST"].Value = cmbsgst.Text;
                                    GvProductInfo.Rows[i].Cells["SGSTAmt"].Value = lblpvat.Text;
                                    GvProductInfo.Rows[i].Cells["CGST"].Value = cmbcgst.Text;
                                    GvProductInfo.Rows[i].Cells["CGSTAmt"].Value = lblCGST.Text;
                                    GvProductInfo.Rows[i].Cells["IGST"].Value = cmbigst.Text;
                                    GvProductInfo.Rows[i].Cells["IGSTAmt"].Value = lblIGST.Text;
                                    GvProductInfo.Rows[i].Cells["Cess"].Value = txtpCess.Text;
                                    GvProductInfo.Rows[i].Cells["TotalAmount"].Value = txtpTotalAmt.Text;
                                    GvProductInfo.Rows[i].Cells["Remove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                                    GvProductInfo.Rows[i].Cells["HSNCode"].Value = txtHSNCode.Text;
                                    GvProductInfo.Rows[i].Cells["SaleRate"].Value = txtrate.Text;
                                    GvProductInfo.Rows[i].Cells["CessAmt"].Value = lblpCessamt.Text;
                                    GvProductInfo.Rows[i].Cells["Barcodeg"].Value = barcode;
                                    GvProductInfo.Rows[i].Cells["SubTitle"].Value = txtSubtitle.Text;
                                    GvProductInfo.Rows[i].Cells["SizeSpec"].Value = SizeSpecString;
                                    GvProductInfo.Rows[i].Cells["SizeQtyg"].Value = SizeQty.ToString();
                                    if (txtQuantitySubtitle.Text != "")
                                        GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = txtQuantitySubtitle.Text;
                                    else
                                        GvProductInfo.Rows[i].Cells["QuantitySubtitle"].Value = "0";
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        GvProductInfo.Rows[i].Cells["BatchNo"].Value = txtBatchNo.Text;
                                        if (productentrytype != 2)
                                            GvProductInfo.Rows[i].Cells["ExpiryDate"].Value = txtExpiry.Text;
                                    }
                                    GvProductInfo.Rows[i].Cells["Sizec"].Value = psize;
                                    GvProductInfo.Rows[i].Cells["Department"].Value = deptname;
                                    GvProductInfo.Rows[i].Cells["ColorNm"].Value = pcolor;
                                    GvProductInfo.Rows[i].Cells["Categoryg"].Value = category;
                                    GvProductInfo.Rows[i].Cells["BarcodePriceg"].Value = BarcodePrice;
                                    batchtableenrty(i);
                                    try
                                    {
                                        db.connect();
                                        SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                                        command.CommandType = CommandType.StoredProcedure;

                                        command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["ProductNameg"].Value;
                                        command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["Company"].Value;
                                        command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = GvProductInfo.Rows[i].Cells["Unit"].Value;
                                        command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                        command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                        command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                        SqlDataReader reader = command.ExecuteReader();
                                        DataTable dtRate = new DataTable();
                                        dtRate.Load(reader);
                                        decimal avgprice = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                        decimal qty = 0;
                                        try
                                        {
                                            if (GvProductInfo.Rows[i].Cells["Unit"].Value.ToString() != GvProductInfo.Rows[i].Cells["SaleUnit"].Value.ToString())
                                            {
                                                ProductRepository productrepo1 = new ProductRepository();
                                                var productdata1 = productrepo1.GetAll().Where(t => t.ProductName == GvProductInfo.Rows[i].Cells["ProductNameg"].Value.ToString() && t.ManufactureCompany == GvProductInfo.Rows[i].Cells["Company"].Value.ToString() && t.Uniti == GvProductInfo.Rows[i].Cells["Unit"].Value.ToString()).FirstOrDefault();
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value) * (Convert.ToDecimal(productdata1.UnitQty) / Convert.ToDecimal(productdata1.AlternateUnitQty));
                                            }
                                            else
                                                qty = Convert.ToDecimal(GvProductInfo.Rows[i].Cells["Quantityg"].Value);
                                        }
                                        catch (Exception)
                                        {
                                            qty = 0;
                                        }
                                        tpuramt = tpuramt + (avgprice * qty);
                                        db.CloseConnection();
                                        dtRate.Dispose();
                                    }
                                    catch (Exception)
                                    { db.CloseConnection(); }
                                }
                            s:
                                {
                                    totalamt = 0; totalqty = 0;
                                    totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                    totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                                    totalSGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["SGSTAmt"].Value));
                                    totalCGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["CGSTAmt"].Value));
                                    totalIGst = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["IGSTAmt"].Value));

                                    txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                                    lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                    txttotSGst.Text = Convert.ToString(Math.Round(totalSGst, 2, MidpointRounding.AwayFromZero));
                                    txttotCGst.Text = Convert.ToString(Math.Round(totalCGst, 2, MidpointRounding.AwayFromZero));
                                    txttotIGst.Text = Convert.ToString(Math.Round(totalIGst, 2, MidpointRounding.AwayFromZero));
                                    lbltpuramt.Text = Convert.ToString(Math.Round(tpuramt, 2, MidpointRounding.AwayFromZero));
                                    clearatadd();
                                }
                            }
                        a:
                            {
                                clearatadd();
                            }
                            lblProductcount.Text = Convert.ToString(GvProductInfo.Rows.Count);
                        }
                        else
                        {
                            if (txtProductname.Text.Trim() == "")
                            {
                                MessageBox.Show("Enter Product Name.", "Warning");
                                this.ActiveControl = txtProductname;
                            }
                            else if (txtQuantity.Text == "")
                            {
                                MessageBox.Show("Enter Quantity.", "Warning");
                                this.ActiveControl = txtQuantity;
                            }
                            else if (txtrate.Text == "")
                            {
                                MessageBox.Show("Enter Rate.", "Warning");
                                this.ActiveControl = txtrate;
                            }
                            else if (isvalid == false)
                                clearatadd();
                        }
                    }
                    else
                    {
                        MessageBox.Show("Enter Customer name.", "Warning");
                        this.ActiveControl = cmbcustomername;
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void btnnew_Click(object sender, EventArgs e)
        {
            try
            {
                checkcustdtlnbatch();
                remove0statusrecord();
                DeleteDuplicateBatchRecords();
                clear();
                this.ActiveControl = cmbcustomername;
                InputField();
            }
            catch (Exception)
            { }
        }

        private void btnsave_Click(object sender, EventArgs e)
        {
            SaveCustomerBill();
            if (SetDataM != null)
            {
                if (SetDataM.TaxInvoicePrintOn == "Thermal")
                    getPrint();
            }
        }

        private void txtDiscount_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (btnUpdate.Enabled == false && btnsave.Enabled == false)
                { }
                else
                {
                    if (Convert.ToDecimal(txtDiscount.Text) <= 100)
                        CalculateNetAmt();
                    else
                    {
                        MessageBox.Show("Enter Discount Between 0 to 100 %.", "Warning");
                        txtDiscount.Text = "0";
                        this.ActiveControl = txtDiscount;
                    }
                }
            }
            catch (Exception)
            {
                txtDiscount.Text = "0";
                this.ActiveControl = txtDiscount;
            }
        }

        private void txtPaidAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtPaidAmt.Text != "")
                {
                    decimal a = 0, b = 0;
                    txtRemainingAmt.Text = "0";
                    a = Convert.ToDecimal(txtNetAmt.Text);
                    b = Convert.ToDecimal(txtPaidAmt.Text);
                    if (a >= b)
                    {
                        decimal c = (a - b);
                        txtRemainingAmt.Text = Convert.ToString(c);
                    }
                    else
                    {
                        txtPaidAmt.Text = a.ToString();
                        decimal c = (a - Convert.ToDecimal(txtPaidAmt.Text));
                        txtRemainingAmt.Text = Convert.ToString(c);
                        MessageBox.Show("Paid Amount Less or equal to Net Amount.", "Warning");
                    }
                }
                else
                {
                    txtPaidAmt.Text = "0";
                    this.ActiveControl = txtPaidAmt;
                }
            }
            catch (Exception)
            {
                txtPaidAmt.Text = "0";
                this.ActiveControl = txtPaidAmt;
            }
        }

        private void cmbcustomername_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(cmbcustomername.Text) && !string.IsNullOrWhiteSpace(cmbcustomername.Text))
                {
                    label6.Text = "";
                    try
                    {
                        db.connect();
                        SqlCommand command = new SqlCommand("SPremainingpayment", db.Connection);
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                        command.Parameters.Add("@CompId", SqlDbType.NVarChar).Value = CommonMethod.CompId;
                        command.Parameters.Add("@Flag", SqlDbType.NVarChar).Value = "CustRem";
                        command.Parameters.Add("@CustomerID", SqlDbType.Int).Value = Convert.ToInt32(cmbcustomername.SelectedValue);

                        DataTable dt = new DataTable();
                        dt.Load(command.ExecuteReader());
                        db.CloseConnection();
                        label6.Text = Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        //label6.Text = Convert.ToString(dt.Rows[0]["OpeningAmount"]) + "+" + Convert.ToString(dt.Rows[0]["ReaminingAmount"]) + "=" + Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        dt.Dispose();
                    }
                    catch (Exception)
                    { db.CloseConnection(); }

                    lblmechname.Text = "";
                    CustomerRepository custrepo = new CustomerRepository();
                    var Mistriname = custrepo.GetAll().Where(t => t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    lblmechname.Text = Mistriname.MistriName;
                    CustomerType = Mistriname.CustomerType;
                    custrepo.Dispose();
                    this.ActiveControl = cmbcustomername;
                }
                else
                    label6.Text = "";
            }
            catch (Exception)
            { }
        }

        private void btnprint_Click(object sender, EventArgs e)
        {
            getPrint();
        }

        private void txtQuantity_TextChanged(object sender, EventArgs e)
        {
            if (txtQuantity.Text != "")
            {
                decimal rate, qty = Convert.ToDecimal(txtQuantity.Text);
                if (txtrate.Text == "")
                    rate = 0;
                else
                    rate = Convert.ToDecimal(txtrate.Text);
                txtAmount.Text = Convert.ToString(rate * qty);
                getGstCalculation();
                if (ProductDataGlobal != null)
                {
                    if (ProductDataGlobal.QuantitySubtitle == "Y")
                        txtQuantitySubtitle.Text = Convert.ToString(qty * ProductDataGlobal.QtySubCount);
                }
                StaticBarcode = false;
            }
            else
            {
                //txtQuantity.Text = "0";
                this.ActiveControl = txtQuantity;
            }
        }

        private void txtpdiscount_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtpdiscount.Text != "")
                {
                    if (Convert.ToDecimal(txtpdiscount.Text) <= 100)
                        getGstCalculation();
                    else
                    {
                        MessageBox.Show("Enter discount between 0 to 100 %.", "Warning");
                        txtpdisAmt.Text = "0";
                        txtpdiscount.Text = "0";
                        this.ActiveControl = txtpdiscount;
                    }
                }
                else
                {
                    //txtpdiscount.Text = "0";
                    this.ActiveControl = txtpdiscount;
                }
            }
            catch (Exception)
            {
                txtpdiscount.Text = "0";
                this.ActiveControl = txtpdiscount;
            }
        }

        private void txtrate_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtrate.Text != "")
                {
                    decimal rate;
                    if (txtrate.Text == "")
                        rate = 0;
                    else
                        rate = Convert.ToDecimal(txtrate.Text);
                    decimal qty = Convert.ToDecimal(txtQuantity.Text);
                    txtAmount.Text = Convert.ToString(rate * qty);
                    getGstCalculation();
                }
                else
                {
                    //txtrate.Text = "0";
                    this.ActiveControl = txtrate;
                }
            }
            catch (Exception)
            { }
        }

        private void chkcompanyname_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                txtProductname.Text = "";
                string cnString1 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
                using (SqlConnection con = new SqlConnection(cnString1))
                {
                    SqlCommand cmd = null;
                    if (CommonMethod.commProduct == true)
                        cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation", con);
                    else
                        cmd = new SqlCommand("SELECT ProductName,ManufactureCompany,Uniti FROM ProductInformation where compid=" + CommonMethod.CompId, con);
                    con.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    AutoCompleteStringCollection MyCollection = new AutoCompleteStringCollection();
                    while (reader.Read())
                    {
                        try
                        {
                            MyCollection.Add(reader.GetString(0) + "," + reader.GetString(1) + "," + reader.GetString(2));
                        }
                        catch (Exception)
                        { }
                    }
                    txtProductname.AutoCompleteCustomSource = MyCollection;
                    con.Close();
                    reader.Dispose();
                }
            }
            catch (Exception)
            { }
        }

        private void txtProductname_Leave(object sender, EventArgs e)
        {
            try
            {
                pictureBox1.Visible = false;
                gvProductRemStock.Visible = false;
                if (flag == 1)
                {
                    if (txtProductname.Text != "")
                    {
                        string Product_prefix = "";
                        if ((txtProductname.Text).Contains(","))
                        {
                            PurchaseDetailRepository purDetailRepo = new PurchaseDetailRepository();
                            var purDetailData = purDetailRepo.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                            if (ProductDataGlobal == null)
                            {
                                MessageBox.Show("This Product Name Is Not Valid.", "Warning");
                                txtProductname.Text = "";
                                this.ActiveControl = txtProductname;
                            }
                            else
                            {
                                CustomerRepository custRepo = new CustomerRepository();
                                CustomerInformation cusatData = custRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CustomerName == cmbcustomername.Text).FirstOrDefault();
                                if (cusatData != null)
                                    StateId = Convert.ToInt32(cusatData.Statecode);
                                if (ProductDataGlobal.TaxInclusive == "True")
                                    taxinclude = "True";
                                else
                                    taxinclude = "False";
                                Product_prefix = Convert.ToString(ProductDataGlobal.Prefix);
                                cmbPrefix.Text = Product_prefix;
                                if (ProductDataGlobal.RateSlab == "Y")
                                {
                                    ApplyRateSlab = true;
                                    RateSlabId = Convert.ToInt32(ProductDataGlobal.RateSlabId);
                                }
                                else
                                    ApplyRateSlab = false;
                                if (ProductDataGlobal.QtySlabId != null)
                                {
                                    SlabMasterRepository slabrepo = new SlabMasterRepository();
                                    SlabMaster slabdata = slabrepo.GetAll().Where(t => t.Id == ProductDataGlobal.QtySlabId).FirstOrDefault();
                                    if (slabdata != null)
                                    {
                                        qtySlab = Convert.ToDecimal(slabdata.QtySlab);
                                        getSlabUnit = slabdata.Unit;
                                        if (slabdata.SizeGroup == "Fixed Size")
                                            slabGroup = 'F';
                                        else
                                            slabGroup = 'D';
                                        if (slabGroup == 'D')
                                            DynamicDtlSlabId = Convert.ToInt32(ProductDataGlobal.QtySlabId);
                                    }
                                    FormulaConstCount = Convert.ToInt32(ProductDataGlobal.SlabAppliedOnValue);
                                    slabrepo.Dispose();
                                }
                                if (colIndex != -1)
                                {
                                    if (txtProductname.Text != Convert.ToString(GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value) + "," + GvProductInfo.Rows[colIndex].Cells["Company"].Value + "," + GvProductInfo.Rows[colIndex].Cells["Unit"].Value)
                                    {
                                        getProductType(GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value.ToString(), GvProductInfo.Rows[colIndex].Cells["Company"].Value.ToString(), GvProductInfo.Rows[colIndex].Cells["Unit"].Value.ToString());
                                        if (productentrytype == 1 || productentrytype == 2)
                                        {
                                            getProductType(Glbproname, Glbcompany, Glbunit);
                                            if (productentrytype == 1 || productentrytype == 2)
                                                goto newprdt;
                                            else
                                            {
                                                MessageBox.Show("New product must have batch or expirydate.", "Warning");
                                                txtProductname.Text = "";
                                                this.ActiveControl = txtProductname;
                                                goto endtxtproductname;
                                            }
                                        }
                                    newprdt:
                                        {
                                            if (CustomerType == "Retailer" || CustomerType == null)
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                            else
                                            {
                                                if (ProductDataGlobal.DealerRate != null)
                                                    txtrate.Text = Convert.ToString(ProductDataGlobal.DealerRate);
                                                else if (ProductDataGlobal.BarcodeStatus == "Our Barcode" || ProductDataGlobal.BarcodeStatus == "Static Barcode")
                                                {
                                                    if (purDetailData != null)
                                                        txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                                                    else
                                                        txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                                }
                                                else
                                                    txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                            }
                                            txtpdiscount.Text = Convert.ToString(ProductDataGlobal.ProductDiscount);
                                            cmbUnit.Items.Clear();
                                            cmbUnit.DisplayMember = "Text";
                                            cmbUnit.ValueMember = "Value";
                                            cmbUnit.Items.Add(new { Text = ProductDataGlobal.Uniti, Value = ProductDataGlobal.Uniti });
                                            if (ProductDataGlobal.AlternateUnit != null && ProductDataGlobal.AlternateUnit != "")
                                                cmbUnit.Items.Add(new { Text = ProductDataGlobal.AlternateUnit, Value = ProductDataGlobal.AlternateUnit });
                                            if (ProductDataGlobal.TripleUnit != null && ProductDataGlobal.TripleUnit != "")
                                                cmbUnit.Items.Add(new { Text = ProductDataGlobal.TripleUnit, Value = ProductDataGlobal.TripleUnit });
                                            cmbUnit.SelectedIndex = 0;
                                            if (billtype != 2)
                                            {
                                                if (SetDataM.CompositionScheme == "True")
                                                { }
                                                else
                                                {
                                                    cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                    cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                    cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                                    txtpCess.Text = Convert.ToString(ProductDataGlobal.Cess);
                                                }
                                            }
                                            txtHSNCode.Text = ProductDataGlobal.HSNCode;
                                            pnlSubtitle.Visible = false;
                                            txtSubtitle.Visible = false;
                                            if (string.IsNullOrEmpty(ProductDataGlobal.Formulae) && ProductDataGlobal.Usesubtitle == "Y")
                                            {
                                                pnlSubtitle.Visible = true;
                                                txtSubtitle.Visible = true;
                                                if (subtitlestring != "")
                                                    txtSubtitle.Text = subtitlestring;
                                            }
                                            else if (!string.IsNullOrEmpty(ProductDataGlobal.Formulae) && (ProductDataGlobal.Usesubtitle == "Y" || ProductDataGlobal.Usesubtitle != "Y") && getFormula == false)
                                            {
                                                try
                                                {
                                                    int input = 0;
                                                    input = Convert.ToInt32(Microsoft.VisualBasic.Interaction.InputBox("Enter Number of Raw Material use for this product", "Raw Material", "0", 500, 250));
                                                    if (input != 0)
                                                    {
                                                        dtgvFormulae.Rows.Clear();
                                                        dtgvFormulae.Columns.Clear();
                                                        //Add Columns to datagridview of formulae
                                                        formulaCount = 0;
                                                        string[] arrayformulae = ProductDataGlobal.Formulae.Split('*', '/', '+', '-');
                                                        if (dtgvFormulae.Columns.Count == 0)
                                                        {
                                                            for (int m = 0; m < arrayformulae.Length; m++)
                                                            {
                                                                int constantVal;
                                                                bool outResult = int.TryParse(arrayformulae[m].ToString(), out constantVal);
                                                                if (outResult == true)
                                                                    dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), "Constant");
                                                                else
                                                                {
                                                                    formulaCount++;
                                                                    dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), arrayformulae[m].ToString());
                                                                }
                                                                dtgvFormulae.Columns[m].Width = 62;
                                                            }
                                                            dtgvFormulae.Columns.Add("Result", "Result");
                                                            if (slabGroup == 'F')
                                                            {
                                                                dtgvFormulae.Columns.Add("Rate(-)", "Rate(-" + getSlabUnit.Trim() + ")");
                                                                dtgvFormulae.Columns.Add("Rate(+)", "Rate(+" + getSlabUnit.Trim() + ")");
                                                                dtgvFormulae.Columns["Rate(-)"].Width = 70;
                                                                dtgvFormulae.Columns["Rate(+)"].Width = 70;
                                                            }
                                                            dtgvFormulae.Columns.Add("Name", "Name");
                                                            dtgvFormulae.Columns["Result"].Width = 65;
                                                            dtgvFormulae.Columns["Name"].Width = 200;
                                                        }
                                                        //Add rows to datagridview of formulae
                                                        for (int n = 0; n < input; n++)
                                                        {
                                                            dtgvFormulae.Rows.Add();
                                                        }
                                                        dtgvFormulae.Visible = true;
                                                        dtgvFormulae.Height = dtgvFormulae.ColumnHeadersHeight + dtgvFormulae.Rows[0].Height * (dtgvFormulae.RowCount + 1);
                                                        for (int m = 0; m < dtgvFormulae.ColumnCount; m++) // to get width of grid
                                                        {
                                                            if (dtgvFormulae.Columns[m].HeaderText == "Constant")
                                                                dtgvFormulae.Columns[m].Visible = false;
                                                            dtgvFormulae.Width += dtgvFormulae.Columns[m].Width;
                                                            dtgvFormulae.Columns[m].HeaderCell.Style.BackColor = System.Drawing.Color.Navy;
                                                            dtgvFormulae.Columns[m].HeaderCell.Style.ForeColor = System.Drawing.Color.PaleVioletRed;
                                                            dtgvFormulae.Columns[m].HeaderCell.Style.Font = new Font("Arial", 12);
                                                        }
                                                        if (dtgvFormulae.Rows.Count > 0)
                                                        {
                                                            getFormula = true;
                                                            dtgvFormulae.CurrentCell = dtgvFormulae.Rows[0].Cells[0];
                                                            this.ActiveControl = dtgvFormulae;
                                                        }
                                                    }
                                                }
                                                catch (Exception)
                                                { }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(ProductDataGlobal.Formulae) && ProductDataGlobal.Usesubtitle == "Y")
                                        {
                                            pnlSubtitle.Visible = true;
                                            txtSubtitle.Visible = true;
                                            if (subtitlestring != "")
                                                txtSubtitle.Text = subtitlestring;
                                        }
                                        else if (!string.IsNullOrEmpty(ProductDataGlobal.Formulae) && (ProductDataGlobal.Usesubtitle == "Y" || ProductDataGlobal.Usesubtitle != "Y") && getFormula == false)
                                        {
                                            try
                                            {
                                                string[] strformulae = txtSubtitle.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);
                                                dtgvFormulae.Rows.Clear();
                                                dtgvFormulae.Columns.Clear();
                                                //Add Columns to datagridview of formulae
                                                string[] arrayformulae = ProductDataGlobal.Formulae.Split('*', '/', '+', '-');
                                                formulaCount = 0;
                                                if (dtgvFormulae.Columns.Count == 0)
                                                {
                                                    for (int m = 0; m < arrayformulae.Length; m++)
                                                    {
                                                        int constantVal;
                                                        bool outResult = int.TryParse(arrayformulae[m].ToString(), out constantVal);
                                                        if (outResult == true)
                                                            dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), "Constant");
                                                        else
                                                        {
                                                            formulaCount++;
                                                            dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), arrayformulae[m].ToString());
                                                        }
                                                        dtgvFormulae.Columns[m].Width = 62;
                                                    }
                                                    dtgvFormulae.Columns.Add("Result", "Result");
                                                    if (slabGroup == 'F')
                                                    {
                                                        dtgvFormulae.Columns.Add("Rate(-)", "Rate(-" + getSlabUnit.Trim() + ")");
                                                        dtgvFormulae.Columns.Add("Rate(+)", "Rate(+" + getSlabUnit.Trim() + ")");
                                                        dtgvFormulae.Columns["Rate(-)"].Width = 70;
                                                        dtgvFormulae.Columns["Rate(+)"].Width = 70;
                                                    }
                                                    dtgvFormulae.Columns.Add("Name", "Name");
                                                    dtgvFormulae.Columns["Result"].Width = 65;
                                                    dtgvFormulae.Columns["Name"].Width = 200;
                                                }

                                                //Add rows to datagridview of formulae                                                
                                                for (int n = 0; n < strformulae.Length; n++)
                                                {
                                                    string namestr = "", snamestr = "";
                                                    if (strformulae.Length != dtgvFormulae.RowCount)
                                                        dtgvFormulae.Rows.Add();
                                                    string[] arrayformulae1 = strformulae[n].ToString().Split('*', '/', '+', '-', '=', ' ');
                                                    for (int i = 0; i < arrayformulae1.Length; i++)
                                                    {
                                                        if (i == dtgvFormulae.ColumnCount - 1)
                                                        {
                                                            int j = dtgvFormulae.ColumnCount - 1;
                                                            for (i = dtgvFormulae.ColumnCount - 1; i < arrayformulae1.Length; i++)
                                                                snamestr = snamestr + arrayformulae1[i].ToString() + " ";
                                                            dtgvFormulae.Rows[n].Cells[j].Value = snamestr;
                                                        }
                                                        else
                                                        {
                                                            namestr = arrayformulae1[i].ToString();
                                                            dtgvFormulae.Rows[n].Cells[i].Value = namestr;
                                                        }
                                                    }
                                                }
                                                dtgvFormulae.Visible = true;
                                                dtgvFormulae.Height = dtgvFormulae.ColumnHeadersHeight + dtgvFormulae.Rows[0].Height * (dtgvFormulae.RowCount + 1);
                                                dtgvFormulae.Width = 0;
                                                for (int m = 0; m < dtgvFormulae.ColumnCount; m++) // to get width of grid
                                                {
                                                    if (dtgvFormulae.Columns[m].HeaderText == "Constant")
                                                        dtgvFormulae.Columns[m].Visible = false;
                                                    dtgvFormulae.Width += dtgvFormulae.Columns[m].Width;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.BackColor = System.Drawing.Color.Navy;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.ForeColor = System.Drawing.Color.PaleVioletRed;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.Font = new Font("Arial", 12);
                                                }
                                                if (dtgvFormulae.Rows.Count > 0)
                                                {
                                                    getFormula = true;
                                                    dtgvFormulae.CurrentCell = dtgvFormulae.Rows[0].Cells[0];
                                                    this.ActiveControl = dtgvFormulae;
                                                }
                                            }
                                            catch (Exception)
                                            { }
                                        }
                                    }
                                }
                                else
                                {
                                    pnlSubtitle.Visible = false;
                                    txtSubtitle.Visible = false;
                                    if (string.IsNullOrEmpty(ProductDataGlobal.Formulae) && ProductDataGlobal.Usesubtitle == "Y")
                                    {
                                        pnlSubtitle.Visible = true;
                                        txtSubtitle.Visible = true;
                                        if (subtitlestring != "")
                                            txtSubtitle.Text = subtitlestring;
                                    }
                                    else if (!string.IsNullOrEmpty(ProductDataGlobal.Formulae) && (ProductDataGlobal.Usesubtitle == "Y" || ProductDataGlobal.Usesubtitle != "Y") && getFormula == false)
                                    {
                                        try
                                        {
                                            int input = 0;
                                            input = Convert.ToInt32(Microsoft.VisualBasic.Interaction.InputBox("Enter Number of Raw Material use for this product", "Raw Material", "0", 500, 250));
                                            if (input != 0)
                                            {
                                                dtgvFormulae.Rows.Clear();
                                                dtgvFormulae.Columns.Clear();
                                                //Add Columns to datagridview of formulae
                                                string[] arrayformulae = ProductDataGlobal.Formulae.Split('*', '/', '+', '-');
                                                formulaCount = 0;
                                                if (dtgvFormulae.Columns.Count == 0)
                                                {
                                                    for (int m = 0; m < arrayformulae.Length; m++)
                                                    {
                                                        int constantVal;
                                                        bool outResult = int.TryParse(arrayformulae[m].ToString(), out constantVal);
                                                        if (outResult == true)
                                                            dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), "Constant");
                                                        else
                                                        {
                                                            formulaCount++;
                                                            dtgvFormulae.Columns.Add(arrayformulae[m].ToString(), arrayformulae[m].ToString());
                                                        }
                                                        dtgvFormulae.Columns[m].Width = 65;
                                                    }
                                                    dtgvFormulae.Columns.Add("Result", "Result");
                                                    if (slabGroup == 'F')
                                                    {
                                                        dtgvFormulae.Columns.Add("Rate(-)", "Rate(-" + getSlabUnit.Trim() + ")");
                                                        dtgvFormulae.Columns.Add("Rate(+)", "Rate(+" + getSlabUnit.Trim() + ")");
                                                        dtgvFormulae.Columns["Rate(-)"].Width = 70;
                                                        dtgvFormulae.Columns["Rate(+)"].Width = 70;
                                                    }
                                                    dtgvFormulae.Columns.Add("Name", "Name");
                                                    dtgvFormulae.Columns["Result"].Width = 65;
                                                    dtgvFormulae.Columns["Name"].Width = 200;
                                                }
                                                //Add rows to datagridview of formulae
                                                for (int n = 0; n < input; n++)
                                                {
                                                    dtgvFormulae.Rows.Add();
                                                    int rowCount = dtgvFormulae.Rows.Count - 1;
                                                    int arrayformcount = 0;
                                                    for (int m = 0; m < arrayformulae.Length; m++)
                                                    {
                                                        int constantVal;
                                                        bool outResult = int.TryParse(arrayformulae[m].ToString(), out constantVal);
                                                        if (outResult == true)
                                                            dtgvFormulae.Rows[rowCount].Cells[m].Value = constantVal.ToString();
                                                        else
                                                            dtgvFormulae.Rows[n].Cells[m].Value = "0";
                                                        arrayformcount = m;
                                                    }
                                                    for (int j = arrayformcount; j < dtgvFormulae.Columns.Count; j++) //----------to set default value nilophar 13042018
                                                    {
                                                        dtgvFormulae.Rows[n].Cells[j].Value = "";
                                                    }
                                                }
                                                ///------------ Add Constant values to grid

                                                dtgvFormulae.Visible = true;
                                                dtgvFormulae.Height = dtgvFormulae.ColumnHeadersHeight + dtgvFormulae.Rows[0].Height * (dtgvFormulae.RowCount + 1);
                                                dtgvFormulae.Width = 0;
                                                for (int m = 0; m < dtgvFormulae.ColumnCount; m++) // to get width of grid
                                                {
                                                    if (dtgvFormulae.Columns[m].HeaderText == "Constant")
                                                        dtgvFormulae.Columns[m].Visible = false;
                                                    dtgvFormulae.Width += dtgvFormulae.Columns[m].Width;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.BackColor = System.Drawing.Color.Navy;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.ForeColor = System.Drawing.Color.PaleVioletRed;
                                                    dtgvFormulae.Columns[m].HeaderCell.Style.Font = new Font("Arial", 12);
                                                }
                                                if (dtgvFormulae.Rows.Count > 0)
                                                {
                                                    getFormula = true;
                                                    dtgvFormulae.CurrentCell = dtgvFormulae.Rows[0].Cells[0];
                                                    this.ActiveControl = dtgvFormulae;
                                                }
                                            }
                                        }
                                        catch (Exception)
                                        { }
                                    }
                                    if (ProductDataGlobal.BarcodeStatus == "Our Barcode" || ProductDataGlobal.BarcodeStatus == "Static Barcode")
                                    {
                                        if (purDetailData != null)
                                            txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                                        else
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                    }
                                    else if (CustomerType == "Retailer" || CustomerType == null)
                                        txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                    else
                                    {
                                        if (ProductDataGlobal.DealerRate != null)
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.DealerRate);
                                        else if (ProductDataGlobal.BarcodeStatus == "Our Barcode" || ProductDataGlobal.BarcodeStatus == "Static Barcode")
                                        {
                                            if (purDetailData != null)
                                                txtrate.Text = Convert.ToString(purDetailData.SaleRate);
                                            else
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        }
                                        else
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                    }
                                    if (ProductDataGlobal.ProductDiscount == null)
                                        txtpdiscount.Text = "0";                                        
                                    else
                                        txtpdiscount.Text = Convert.ToString(ProductDataGlobal.ProductDiscount);

                                    if (ProductDataGlobal.TaxInclusive == "True")
                                        taxinclude = "True";
                                    else
                                        taxinclude = "False";
                                    Product_prefix = Convert.ToString(ProductDataGlobal.Prefix);
                                    cmbPrefix.Text = Product_prefix;
                                    cmbUnit.Items.Clear();
                                    cmbUnit.DisplayMember = "Text";
                                    cmbUnit.ValueMember = "Value";
                                    cmbUnit.Items.Add(new { Text = ProductDataGlobal.Uniti, Value = ProductDataGlobal.Uniti });
                                    if (ProductDataGlobal.AlternateUnit != null && ProductDataGlobal.AlternateUnit != "")
                                        cmbUnit.Items.Add(new { Text = ProductDataGlobal.AlternateUnit, Value = ProductDataGlobal.AlternateUnit });
                                    if (ProductDataGlobal.TripleUnit != null && ProductDataGlobal.TripleUnit != "")
                                        cmbUnit.Items.Add(new { Text = ProductDataGlobal.TripleUnit, Value = ProductDataGlobal.TripleUnit });
                                    cmbUnit.SelectedIndex = 0;
                                    if (billtype != 2)
                                    {
                                        if (SetDataM.CompositionScheme == "False")
                                        {
                                            if (ProductDataGlobal.IGstPercent != null && ProductDataGlobal.IGstPercent != 0)
                                            {
                                                if (StateId == 27)
                                                {
                                                    cmbsgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                                    cmbcgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                                    cmbigst.Text = "0.00";
                                                }
                                                else
                                                {
                                                    cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                    cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                    cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                                }
                                            }
                                            else if (ProductDataGlobal.SGstPercent != null && ProductDataGlobal.SGstPercent != 0 && ProductDataGlobal.CGstPercent != null && ProductDataGlobal.CGstPercent != 0)
                                            {
                                                if (StateId == 27)
                                                {
                                                    cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                    cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                    cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                                }
                                                else
                                                {
                                                    cmbsgst.Text = "0.00";
                                                    cmbcgst.Text = "0.00";
                                                    cmbigst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.CGstPercent) + Convert.ToDecimal(ProductDataGlobal.SGstPercent));
                                                }
                                            }
                                            else
                                            {
                                                cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                            }
                                            txtpCess.Text = Convert.ToString(ProductDataGlobal.Cess);
                                        }
                                    }
                                    txtHSNCode.Text = ProductDataGlobal.HSNCode;
                                }
                                ProductCategory = ProductDataGlobal.Category;
                                barcodestatus = ProductDataGlobal.BarcodeStatus;
                                getProductType(Glbproname, Glbcompany, Glbunit);
                                AvgRate();
                                custRepo.Dispose();
                            }
                            PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                            var purdata = purdtlrepo.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.Suppliername != "First stock" && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                            if (purdata != null)
                            {
                                decimal PreRate = 0, PreDisc = 0, PreVat = 0, UnitQty = 0, AltUnitQty = 0, PreTDisc = 0, PreTVat = 0;
                                PreRate = Convert.ToDecimal(purdata.PurchasePrice);
                                PreDisc = Convert.ToDecimal(purdata.Discount);
                                PreVat = Convert.ToDecimal(purdata.Vat);
                                UnitQty = Convert.ToDecimal(ProductDataGlobal.UnitQty);
                                AltUnitQty = Convert.ToDecimal(ProductDataGlobal.AlternateUnitQty);
                                HasMandatoryCodeSr = purdata.HasMandatoryCodeSeries;

                                if (purdata.Unit != purdata.PurchaseUnit && purdata.PurchaseUnit != null)
                                {
                                    decimal a = PreRate / (UnitQty / AltUnitQty);
                                }
                                lblPrePurVat.Text = PreVat.ToString() + " %";
                                PurchaseMasterRepository PurMRepo = new PurchaseMasterRepository();
                                PurchaseMaster PurMData = new PurchaseMaster();
                                PurMData = PurMRepo.GetById(Convert.ToInt32(purdata.PorderNo));
                                PreTDisc = Convert.ToDecimal(PurMData.Discount);
                                PreTVat = Convert.ToDecimal(PurMData.Vat);
                                if (PreVat != 0 || (PurMData.TotalAmount -
                                    (PurMData.TotalAmount * PurMData.Discount / 100) -
                                    ((PurMData.TotalAmount - (PurMData.TotalAmount * PurMData.Discount / 100)) * PurMData.SpcDiscount / 100) +
                                    ((PurMData.TotalAmount - (PurMData.TotalAmount * PurMData.Discount / 100) - ((PurMData.TotalAmount - (PurMData.TotalAmount * PurMData.Discount / 100)) * PurMData.SpcDiscount / 100)) * PurMData.Vat / 100)
                                    + PurMData.TransportCharges != PurMData.NetAmount && PreVat == 0))
                                {
                                    lblPreTVat.Text = 0 + " %";
                                    if (purdata.Unit != purdata.PurchaseUnit && purdata.PurchaseUnit != null)
                                    {
                                        decimal a = PreRate / (UnitQty / AltUnitQty);
                                        decimal d = a * (PreDisc / 100);//10
                                        decimal v = ((a - d) * (PreVat / 100));//0
                                        decimal td = ((a - d + v) * (PreTDisc / 100));//4.5
                                        decimal convertpurprice = (a - d + v - td);

                                        decimal a1 = PreRate;//100
                                        decimal d1 = a1 * (PreDisc / 100);//10
                                        decimal v1 = ((a1 - d1) * (PreVat / 100));//0
                                        decimal td1 = ((a1 - d1 + v1) * (PreTDisc / 100));//4.5
                                        decimal purprice = (a1 - d1 + v1 - td1);
                                    }
                                    else
                                    {
                                        decimal a1 = PreRate;//100
                                        decimal d1 = a1 * (PreDisc / 100);//10
                                        decimal v1 = ((a1 - d1) * (PreVat / 100));//0
                                        decimal td1 = ((a1 - d1 + v1) * (PreTDisc / 100));//4.5
                                        decimal purprice = (a1 - d1 + v1 - td1);
                                    }
                                }
                                else
                                {
                                    lblPreTVat.Text = PreTVat.ToString() + " %";
                                    if (purdata.Unit != purdata.PurchaseUnit && purdata.PurchaseUnit != null)
                                    {
                                        decimal a = PreRate / (UnitQty / AltUnitQty);
                                        decimal d = a * (PreDisc / 100);//10
                                        decimal v = ((a - d) * (PreVat / 100));//0
                                        decimal td = ((a - d + v) * (PreTDisc / 100));//4.5
                                        decimal tv = ((a - d + v - td) * (PreTVat / 100));//8.55
                                        decimal convertpurprice = (a - d + v - td + tv);

                                        decimal a1 = PreRate;//100
                                        decimal d1 = a1 * (PreDisc / 100);//10
                                        decimal v1 = ((a1 - d1) * (PreVat / 100));//0
                                        decimal td1 = ((a1 - d1 + v1) * (PreTDisc / 100));//4.5
                                        decimal tv1 = ((a1 - d1 + v1 - td1) * (PreTVat / 100));//8.55
                                        decimal purprice = (a1 - d1 + v1 - td1 + tv1);
                                    }
                                    else
                                    {
                                        decimal a1 = PreRate;//100
                                        decimal d1 = a1 * (PreDisc / 100);//10
                                        decimal v1 = ((a1 - d1) * (PreVat / 100));//0
                                        decimal td1 = ((a1 - d1 + v1) * (PreTDisc / 100));//4.5
                                        decimal tv1 = ((a1 - d1 + v1 - td1) * (PreTVat / 100));//8.55
                                        decimal purprice = (a1 - d1 + v1 - td1 + tv1);
                                    }
                                }
                            }
                            else
                            {
                                PurchaseDetailRepository purdtlrepo1 = new PurchaseDetailRepository();
                                var purdata1 = purdtlrepo1.GetAll().Where(t => t.ProductName == Glbproname && t.CompanyName == Glbcompany && t.Unit == Glbunit && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                                if (purdata1 == null)
                                {
                                    TransferStockRepository TransferStockRepo = new TransferStockRepository();
                                    TransferStock TransferData = new TransferStock();
                                    TransferData = TransferStockRepo.GetAll().Where(t => t.TransferTo.StartsWith("C") && t.TransferTo.Substring(1) == Convert.ToString(CommonMethod.CompId)).LastOrDefault();
                                    if (TransferData == null)
                                    {
                                        //MessageBox.Show("Product quantity is  not Available in Stock" + Environment.NewLine + "Please Order the product First.","Warning");
                                        //txtProductname.Text = "";
                                        //txtQuantity.Text = "0";
                                        //txtpvat.Text = "0"; txtrate.Text = "0"; txtAmount.Text = "0";
                                        //txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                        ////lblpdiscount.Text = "0";
                                        //lblpvat.Text = "0"; this.ActiveControl=txtProductname;
                                    }
                                    //else
                                    //{
                                    //    int a = TransferData.TransferTo.Length;
                                    //    string c = TransferData.TransferTo.Substring(1);
                                    //}
                                }
                                purdtlrepo1.Dispose();
                            }
                            purdtlrepo.Dispose();
                        endtxtproductname: { }
                        }
                        else
                        {
                            MessageBox.Show("This Product Name Is Not Valid.", "Warning");
                            txtProductname.Text = "";
                            this.ActiveControl = txtProductname;
                        }
                    }
                }
            }
            catch (Exception)
            { }
            txtProductname.BackColor = Color.White;
            txtProductname.ForeColor = Color.Black;
            custbillinfo = null;
        }

        private void txtProductname_TextChanged(object sender, EventArgs e)
        {
            pnlSubtitle.Visible = false;
            txtSubtitle.Visible = false;
            try
            {
                if (txtProductname.Text != "")
                {
                    flag = 1;
                    gvProductRemStock.Rows.Clear();
                    string Product_prefix = "";
                    if ((txtProductname.Text).Contains(","))
                    {
                        gvProductRemStock.Visible = true;
                        try
                        {
                            Glbproname = txtProductname.Text.Trim().Split(',')[0];
                            Glbcompany = txtProductname.Text.Trim().Split(',')[1];
                            Glbunit = txtProductname.Text.Trim().Split(',')[2];
                            ProductRepository productrepo = new ProductRepository();
                            ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == Glbproname && t.ManufactureCompany == Glbcompany && t.Uniti == Glbunit).FirstOrDefault();
                            if (ProductDataGlobal != null)
                            {
                                CustomerRepository custRepo = new CustomerRepository();
                                CustomerInformation cusatData = custRepo.GetAll().Where(t => t.CompId == CommonMethod.CompId && t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CustomerName == cmbcustomername.Text).FirstOrDefault();
                                if (cusatData != null)
                                    StateId = Convert.ToInt32(cusatData.Statecode);
                                if (ProductDataGlobal.TaxInclusive == "True")
                                    taxinclude = "True";
                                else
                                    taxinclude = "False";
                                if (ProductDataGlobal.ProductType == 6)
                                {
                                    txtQuantity.Enabled = false;
                                    txtQuantity.Text = "1";
                                }
                                else
                                    txtQuantity.Enabled = true;
                                if (billtype != 2)
                                {
                                    if (SetDataM.CompositionScheme == "True")
                                    { }
                                    else
                                    {
                                        if (ProductDataGlobal.IGstPercent != null && ProductDataGlobal.IGstPercent != 0)
                                        {
                                            if (StateId == 27)
                                            {
                                                cmbsgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                                cmbcgst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.IGstPercent) / 2);
                                                cmbigst.Text = "0.00";
                                            }
                                            else
                                            {
                                                cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                            }
                                        }
                                        else if (ProductDataGlobal.SGstPercent != null && ProductDataGlobal.SGstPercent != 0 && ProductDataGlobal.CGstPercent != null && ProductDataGlobal.CGstPercent != 0)
                                        {
                                            if (StateId == 27)
                                            {
                                                cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                                cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                                cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                            }
                                            else
                                            {
                                                cmbsgst.Text = "0.00";
                                                cmbcgst.Text = "0.00";
                                                cmbigst.Text = Convert.ToString(Convert.ToDecimal(ProductDataGlobal.CGstPercent) + Convert.ToDecimal(ProductDataGlobal.SGstPercent));
                                            }
                                        }
                                        else
                                        {
                                            cmbsgst.Text = Convert.ToString(ProductDataGlobal.SGstPercent);
                                            cmbcgst.Text = Convert.ToString(ProductDataGlobal.CGstPercent);
                                            cmbigst.Text = Convert.ToString(ProductDataGlobal.IGstPercent);
                                        }
                                        txtpCess.Text = Convert.ToString(ProductDataGlobal.Cess);
                                    }
                                }
                                txtHSNCode.Text = ProductDataGlobal.HSNCode;
                                if (ProductDataGlobal.Usesubtitle == "Y")
                                {
                                    pnlSubtitle.Visible = true;
                                    txtSubtitle.Visible = true;
                                }
                                if (subtitlestring != "")
                                    txtSubtitle.Text = subtitlestring;
                                Product_prefix = Convert.ToString(ProductDataGlobal.Prefix);
                                cmbPrefix.Text = Product_prefix;
                                PrefixToBind = true;
                            }
                            productrepo.Dispose();
                            try
                            {
                                if (ProductDataGlobal.ProductType != 6)
                                {
                                    string vat = "";
                                    if (SetDataM.StockShowOnBill == "Y")
                                    {
                                        if (billtype == 1)
                                            vat = "y";
                                        else if (billtype == 2)
                                            vat = "n";
                                        else
                                            vat = "a";
                                    }
                                    else
                                        vat = "a";
                                    if (ProductDataGlobal.ProductType != 2)
                                    {
                                        try
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPVatnWithoutVatStock", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;
                                            command.Parameters.Add("@PrePName", SqlDbType.VarChar).Value = Glbproname;
                                            command.Parameters.Add("@PreCName", SqlDbType.VarChar).Value = Glbcompany;
                                            command.Parameters.Add("@PreUName", SqlDbType.VarChar).Value = Glbunit;
                                            command.Parameters.Add("@stock", SqlDbType.VarChar).Value = "PS";
                                            command.Parameters.Add("@vat", SqlDbType.VarChar).Value = vat;
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                            command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                            DataTable dt = new DataTable();
                                            dt.Load(command.ExecuteReader());
                                            if (dt.Rows.Count > 0)
                                            {
                                                decimal dtremqty = 0;
                                                try
                                                {
                                                    dtremqty = Convert.ToDecimal(dt.Compute("Sum(RemQty)", "RemQty>=0"));
                                                }
                                                catch (Exception)
                                                { dtremqty = 0; }
                                                gvProductRemStock.Rows.Add();
                                                gvProductRemStock.Rows[0].Cells[0].Value = dt.Rows[0]["ProductName"].ToString();
                                                if (dt.Rows.Count == 1)
                                                    gvProductRemStock.Rows[0].Cells[1].Value = dt.Rows[0]["RemQty"].ToString();
                                                else
                                                    gvProductRemStock.Rows[0].Cells[1].Value = dtremqty.ToString();
                                                gvProductRemStock.Rows[0].Cells[2].Value = dt.Rows[0]["Unit"].ToString();
                                            }
                                            //SqlDataReader reader = command.ExecuteReader();
                                            //while (reader.Read())
                                            //{
                                            //    gvProductRemStock.Rows.Add();
                                            //    gvProductRemStock.Rows[0].Cells[0].Value = reader.GetString(1);
                                            //    gvProductRemStock.Rows[0].Cells[1].Value = reader.GetSqlDecimal(11).ToString();
                                            //    gvProductRemStock.Rows[0].Cells[2].Value = reader.GetString(3);
                                            //    GlbProdtRemQty = Convert.ToDecimal(reader.GetSqlDecimal(3).ToString());
                                            //}
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            db.connect();
                                            SqlCommand command = new SqlCommand("SPGetAssemblyProductRemQty", db.Connection);
                                            command.CommandType = CommandType.StoredProcedure;
                                            command.Parameters.Add("@proname", SqlDbType.VarChar).Value = Glbproname;
                                            command.Parameters.Add("@cname", SqlDbType.VarChar).Value = Glbcompany;
                                            command.Parameters.Add("@uname", SqlDbType.VarChar).Value = Glbunit;
                                            command.Parameters.Add("@status", SqlDbType.VarChar).Value = "P";
                                            command.Parameters.Add("@vat", SqlDbType.VarChar).Value = "a";
                                            command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                            command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);

                                            SqlDataReader reader = command.ExecuteReader();
                                            gvProductRemStock.Rows.Clear();
                                            while (reader.Read())
                                            {
                                                gvProductRemStock.Rows.Add();
                                                gvProductRemStock.Rows[0].Cells[0].Value = reader.GetString(1);
                                                gvProductRemStock.Rows[0].Cells[1].Value = reader.GetSqlDecimal(10).ToString();
                                                gvProductRemStock.Rows[0].Cells[2].Value = reader.GetString(3);
                                            }
                                            db.CloseConnection();
                                        }
                                        catch (Exception)
                                        { db.CloseConnection(); }
                                    }
                                }
                            }
                            catch (Exception)
                            { db.CloseConnection(); }
                        }
                        catch (Exception)
                        { }
                    }
                }
                else
                    cmbUnit.Items.Clear();
            }
            catch (Exception)
            { }
        }

        private void txtTotalAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                CalculateNetAmt();
            }
            catch (Exception)
            { }
        }

        private void cmbcustomername_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(cmbcustomername.Text) && !string.IsNullOrWhiteSpace(cmbcustomername.Text))
                {
                    label6.Text = "";
                    label29.Text = "";
                    CustomerRepository custrepo1 = new CustomerRepository();
                    CustomerInformation custdata = new CustomerInformation();
                    try
                    {
                        db.connect();
                        SqlCommand command = new SqlCommand("SPremainingpayment", db.Connection);
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                        command.Parameters.Add("@CompId", SqlDbType.NVarChar).Value = CommonMethod.CompId;
                        command.Parameters.Add("@Flag", SqlDbType.NVarChar).Value = "CustRem";
                        command.Parameters.Add("@CustomerID", SqlDbType.Int).Value = Convert.ToInt32(cmbcustomername.SelectedValue);

                        DataTable dt = new DataTable();
                        dt.Load(command.ExecuteReader());
                        db.CloseConnection();
                        label6.Text = Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        //label6.Text = Convert.ToString(dt.Rows[0]["OpeningAmount"]) + "+" + Convert.ToString(dt.Rows[0]["ReaminingAmount"]) + "=" + Convert.ToString(dt.Rows[0]["TotalReaminingAmount"]);
                        dt.Dispose();
                    }
                    catch (Exception)
                    { db.CloseConnection(); }

                    lblmechname.Text = "";
                    CustomerRepository custrepo = new CustomerRepository();
                    var Mistriname = custrepo.GetAll().Where(t => t.CustomerID == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    if (Mistriname != null)
                    {
                        label29.Text = Mistriname.Village;
                        CustomerType = Mistriname.CustomerType;
                        lblmechname.Text = Mistriname.MistriName;
                        cmbState.Text = Mistriname.State;
                        //cmbShipParty.Text = cmbcustomername.Text;
                        bonusStatus = Mistriname.BonusIn;
                        
                        if (bonusStatus != null)
                        {
                            lblCurrBonus.Visible = true;
                            lblPrvBonus.Visible = true;
                            label78.Visible = true;
                            label80.Visible = true;
                            label79.Visible = true;
                            lblTotalBonus.Text = "0";
                            lblPrvBonus.Text = "0";
                            lblCurrBonus.Text = "0";
                            lblTotalBonus.Visible = true;
                            if (bonusStatus == "Bonus In Rs")
                                bonusInRs = Convert.ToDecimal(Mistriname.BonusInRsNPer);
                            else if (bonusStatus == "Bonus In Per")
                                bonusInPer = Convert.ToDecimal(Mistriname.BonusInRsNPer);
                        }
                        else
                        {
                            lblCurrBonus.Visible = false;
                            label78.Visible = false;
                            label80.Visible = false;
                            label79.Visible = false;
                            lblTotalBonus.Visible = false;
                            lblPrvBonus.Visible = false;
                            lblTotalBonus.Text = "0";
                            lblPrvBonus.Text = "0";
                            lblCurrBonus.Text = "0";
                            bonusStatus = null;
                        }
                    }
                    custrepo.Dispose();
                    fillProductSubtitles();
                    string BB = cmbcustomername.Text;
                    this.ActiveControl = cmbcustomername;
                }
                else
                    label6.Text = "";
            }
            catch (Exception)
            { }
        }

        private void txtVat_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (btnUpdate.Enabled == false && btnsave.Enabled == false && txtVat.Enabled == true)
                { }
                else
                {
                    if (Convert.ToDecimal(txtVat.Text) <= 100)
                        CalculateNetAmt();
                    else
                    {
                        MessageBox.Show("Enter Vat Between 0 to 100 %.", "Warning");
                        txtVat.Text = "0";
                        this.ActiveControl = txtVat;
                    }
                }
            }
            catch (Exception)
            {
                txtVat.Text = "0";
                this.ActiveControl = txtVat;
            }
        }

        private void txttrchrg_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txttrchrg.Text != "")
                {
                    if (btnUpdate.Enabled == false && btnsave.Enabled == false)
                    { }
                    else
                        CalculateNetAmt();
                }
                else
                {
                    txttrchrg.Text = "0";
                    this.ActiveControl = txttrchrg;
                }
            }
            catch (Exception)
            {
                txttrchrg.Text = "0";
                this.ActiveControl = txttrchrg;
            }
        }

        private void txthmchrg_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txthmchrg.Text != "")
                {
                    if (btnUpdate.Enabled == false && btnsave.Enabled == false)
                    { }
                    else
                        CalculateNetAmt();
                }
                else
                {
                    txthmchrg.Text = "0";
                    this.ActiveControl = txthmchrg;
                }
            }
            catch (Exception)
            {
                txthmchrg.Text = "0";
                this.ActiveControl = txthmchrg;
            }
        }

        private void btnbilllist_Click(object sender, EventArgs e)
        {
            try
            {
                DeleteDuplicateBatchRecords();
                clear();
                custbillinfo = this;
                frmCustomerBill p = new frmCustomerBill();
                p.Visible = false;
                if (billtype == 1)
                {
                    frmCustomerBillList custbilllist = new frmCustomerBillList(calledlisttype);
                    custbilllist.ShowDialog();
                }
                else if (billtype == 2)
                {
                    frmNovatBillList compinfo = new frmNovatBillList(calledlisttype);
                    compinfo.ShowDialog();
                }
                else if (billtype == 3)
                {
                    frmFakeCustomerBillList fakebilllist = new frmFakeCustomerBillList();
                    fakebilllist.ShowDialog();
                }
            }
            catch (Exception)
            { }
        }

        private void chkcheque_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chkcheque.Checked == true)
                {
                    if (txtPaidAmt.Text.Trim() != "0" && txtPaidAmt.Text.Trim() != "00" && txtPaidAmt.Text.Trim() != "000" && txtPaidAmt.Text.Trim() != "")
                    {
                        if (chkcheque.Checked == true)
                        {
                            cmbbank.Enabled = true;
                            txtchequeno.Enabled = true;
                            dtpchequedate.Enabled = true;
                            txtbankname.Enabled = true;
                            label42.Enabled = true;
                            label43.Enabled = true;
                            label44.Enabled = true;
                            label18.Enabled = true;
                        }
                        else
                        {
                            cmbbank.Enabled = false;
                            txtchequeno.Enabled = false;
                            dtpchequedate.Enabled = false;
                            txtbankname.Enabled = false;
                            label42.Enabled = false;
                            label43.Enabled = false;
                            label44.Enabled = false;
                            label18.Enabled = false;
                        }
                    }
                    else
                    {
                        MessageBox.Show("For Cheque Payment Paid Amount " + Environment.NewLine + " Greater than Zero.", "Success");
                        chkcheque.CheckState = 0;
                        this.ActiveControl = txtPaidAmt;
                    }
                }
                else
                {
                    label18.Enabled = false;
                    label42.Enabled = false;
                    label43.Enabled = false;
                    label44.Enabled = false;
                    cmbbank.Enabled = false;
                    txtchequeno.Enabled = false;
                    dtpchequedate.Enabled = false;
                    txtbankname.Enabled = false;
                    chkBySwipe.Checked = false;
                }
            }
            catch (Exception)
            { }
        }

        private void rbtnaddproduct_Click(object sender, EventArgs e)
        {
            try
            {
                frmProductInformation pro = new frmProductInformation();
                pro.ShowDialog();
                frmCustomerBill_Load(sender, EventArgs.Empty);
                this.ActiveControl = txtProductname;
            }
            catch (Exception)
            { }
        }

        private void rbtnaddstock_Click(object sender, EventArgs e)
        {
            try
            {
                frmAddStock addstock = new frmAddStock();
                addstock.ShowDialog();
                fillcombo();
                this.ActiveControl = txtQuantity;
            }
            catch (Exception)
            { }
        }

        private void txtPaidAmt_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtPaidAmt.Text != "")
                {
                    txtRemainingAmt.Text = "0";
                    decimal a = Convert.ToDecimal(txtNetAmt.Text);
                    decimal b = Convert.ToDecimal(txtPaidAmt.Text);
                    if (a >= b)
                        txtRemainingAmt.Text = Convert.ToString((a - b));
                    else
                    {
                        txtPaidAmt.Text = "0";
                        txtRemainingAmt.Text = "0";
                        MessageBox.Show("Paid Amount Less or equal to Net Amount.", "Warning");
                        this.ActiveControl = txtPaidAmt;
                    }
                }
                txtPaidAmt.BackColor = Color.White;
                txtPaidAmt.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void txtProductname_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                string a = txtProductname.Text;
                if (e.KeyData == Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(a))
                    {
                        PrefixToBind = true;
                        if (dtgvFormulae.Visible == true)
                        {
                            this.ActiveControl = dtgvFormulae;
                            dtgvFormulae.CurrentCell = dtgvFormulae.Rows[0].Cells[0];
                            dtgvFormulae.CurrentCell.Selected = true;
                            dtgvFormulae.BeginEdit(true);
                        }
                        else if (pnlSubtitle.Visible == true)
                            this.ActiveControl = txtSubtitle;
                        else
                            this.ActiveControl = txtQuantity;
                    }
                }
                if (Control.ModifierKeys == Keys.Alt)
                {
                    if (e.KeyCode == Keys.N)
                    {
                        frmProductInformation product = new frmProductInformation();
                        product.ShowDialog();
                        loadProductName();
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void dtpbilldate_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                dtpPoDate.Value = dtpbilldate.Value.Date;
                dtpSupply.Value = dtpbilldate.Value.Date;
            }
            catch (Exception)
            { }
        }

        private void chkCash_CheckedChanged(object sender, EventArgs e)
        {
            if (chkCash.Checked == true)
                chkCredit.Checked = false;
        }

        private void chkCredit_CheckedChanged(object sender, EventArgs e)
        {
            if (chkCredit.Checked == true)
                chkCash.Checked = false;
        }

        private void btnreturn_Click(object sender, EventArgs e)
        {
            try
            {
                if (btnreturn.Text == "Show Return")
                {
                    grpSaleReturnDetail.Visible = true;
                    gvSaleReturnDetails.Rows.Clear();
                    GoodDetailRepository SRDetailRepo = new GoodDetailRepository();
                    List<GoodReturnDetail> SRDetailData = new List<GoodReturnDetail>();
                    SRDetailData = SRDetailRepo.GetAll().Where(t => t.GoodReturnMaster.BillNo == Convert.ToString(txtbillno.Text) && t.GoodReturnMaster.TransactionYear == CommonMethod.TransactionYear && t.GoodReturnMaster.CompId == CommonMethod.CompId).ToList();
                    int j = 0;
                    foreach (var item in SRDetailData)
                    {
                        gvSaleReturnDetails.Rows.Add();
                        gvSaleReturnDetails.Rows[j].Cells["PRId"].Value = item.Id;
                        gvSaleReturnDetails.Rows[j].Cells["PRProductName"].Value = item.ProductId;
                        gvSaleReturnDetails.Rows[j].Cells["PRCompany"].Value = item.CompanyName;
                        gvSaleReturnDetails.Rows[j].Cells["PRUnit"].Value = item.Unit;
                        gvSaleReturnDetails.Rows[j].Cells["PRSaleUnit"].Value = item.SaleUnit;
                        if (item.Unit != item.SaleUnit && item.SaleUnit != null)
                        {
                            ProductRepository productrepo = new ProductRepository();
                            var productdata = productrepo.GetAll().Where(t => t.ProductName == item.ProductId && t.ManufactureCompany == item.CompanyName && t.Uniti == item.Unit).FirstOrDefault();
                            gvSaleReturnDetails.Rows[j].Cells["PRQuantity"].Value = Convert.ToDecimal(item.Quantity) / (Convert.ToDecimal(productdata.UnitQty) / Convert.ToDecimal(productdata.AlternateUnitQty));
                        }
                        else
                            gvSaleReturnDetails.Rows[j].Cells["PRQuantity"].Value = item.Quantity;
                        gvSaleReturnDetails.Rows[j].Cells["PRCode"].Value = item.Code;
                        gvSaleReturnDetails.Rows[j].Cells["PRRate"].Value = item.Rate;
                        gvSaleReturnDetails.Rows[j].Cells["PRAmount"].Value = item.Amount;
                        gvSaleReturnDetails.Rows[j].Cells["PRDisc"].Value = item.Discount;
                        gvSaleReturnDetails.Rows[j].Cells["PRVat"].Value = item.Vat;
                        gvSaleReturnDetails.Rows[j].Cells["PRTotalAmt"].Value = item.TotalAmount;
                        gvSaleReturnDetails.Rows[j].Cells["PRReason"].Value = item.Reason;
                        gvSaleReturnDetails.Rows[j].Cells["PRRemove"].Value = AIOInventorySystem.Desk.Properties.Resources.Remove;
                        gvSaleReturnDetails.Rows[j].Cells["PRBNID"].Value = item.BNID;
                        j++;
                    }
                    gvSaleReturnDetails.ReadOnly = true;
                    btnreturn.Text = "Hide Return";
                    SRDetailRepo.Dispose();
                }
                else
                {
                    grpSaleReturnDetail.Visible = false;
                    btnreturn.Text = "Show Return";
                }
            }
            catch (Exception)
            { }
        }

        private void cmbcustomername_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyData == Keys.Enter)
                    this.ActiveControl = chkCustomerNameDefault;
                if (Control.ModifierKeys == Keys.Alt)
                {
                    if (e.KeyCode == Keys.N)
                    {
                        frmcustomer customer = new frmcustomer();
                        customer.ShowDialog();
                        customerdata();
                        this.ActiveControl = cmbcustomername;
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void txtQuantity_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (StaticBarcode == false && e.KeyData == Keys.Enter)
                    this.ActiveControl = txtrate;
                else if (StaticBarcode == true && e.KeyData == Keys.Enter)
                    e.SuppressKeyPress = true;
                if (Control.ModifierKeys == Keys.Alt)
                {
                    if (e.KeyCode == Keys.N)
                    {
                        frmAddStock addstock = new frmAddStock();
                        addstock.ShowDialog();
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void cmbcustomername_Leave(object sender, EventArgs e)
        {
            try
            {
                if (cmbcustomername.Text != "Select" && cmbcustomername.Text != "")
                {
                    CustomerRepository custrepo2 = new CustomerRepository();
                    CustomerInformation custdata2 = new CustomerInformation();
                    custdata2 = custrepo2.GetAll().Where(t => t.CustomerCode == cmbcustomername.Text && t.CustomerCode != null && t.CustomerCode != "" && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    if (custdata2 != null)
                    {
                        cmbcustomername.SelectedValue = Convert.ToInt32(custdata2.CustomerID);
                        this.ActiveControl = cmbGroup;
                    }
                    else
                    {
                        CommonMethod comMethod = new CommonMethod();
                        if (comMethod.ValidCustomer(cmbcustomername.Text) == 1)
                        {
                            if (txtProductname.Text != "")
                                this.ActiveControl = txtProductname;
                        }
                        else
                        {
                            if ((MessageBox.Show("This Customer Name Not Saved. U want Save It?", "Preview", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
                            {
                                CustomerRepository custrepo = new CustomerRepository();
                                CustomerInformation custdata = new CustomerInformation();
                                string MAXID = "";
                                try
                                {
                                    CustomerRepository custrepo1 = new CustomerRepository();
                                    var mid = custrepo1.GetAll().Where(t => t.CompId == CommonMethod.CompId).Max(t => t.CustomerID);
                                    if (mid == null)
                                        MAXID = "1";
                                    else
                                        MAXID = Convert.ToString(Convert.ToInt32(mid) + 1);
                                    custrepo1.Dispose();
                                }
                                catch (Exception)
                                { }
                                custdata.CustomerID = Convert.ToInt32(MAXID);
                                custdata.CustomerName = cmbcustomername.Text.Trim();
                                string name = cmbcustomername.Text.Trim();
                                custdata.CompId = CommonMethod.CompId;
                                CompanyInformationRepository cRepo = new CompanyInformationRepository();
                                var cinfo = cRepo.GetAll().Where(t => t.CompanyId == CommonMethod.CompId).FirstOrDefault();
                                if (cinfo != null)
                                {
                                    custdata.State = cinfo.State;
                                    custdata.Statecode = cinfo.StateCode;
                                }
                                custdata.CustomerType = "Retailer";
                                custrepo.Add(custdata);
                                custrepo.Save();
                                MessageBox.Show("Customer Name Save Successfully.", "Success");
                                customerdata();
                                cmbcustomername.Text = name;
                            }
                            else
                            {
                                customerdata();
                                this.ActiveControl = cmbcustomername;
                            }
                        }
                    }
                }
                cmbcustomername.BackColor = Color.White;
                cmbcustomername.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void txtAmount_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtAmount.Text != "")
                {
                    if (Convert.ToDecimal(txtAmount.Text) != 0)
                        getGstCalculation();
                }
                else
                    txtAmount.Text = "0";
            }
            catch (Exception)
            { }
        }

        private void txtQuantity_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal textqty = 0, qty = 0;
                string Proname = "", company = "", unit = "", batchnos = txtBatchNo.Text;
                custbillinfo = this;
                bool isvalid = true, available = true;
                if (txtQuantity.Text != "0" && txtQuantity.Text != "" && txtProductname.Text != "")
                {
                    qty = Convert.ToDecimal(txtQuantity.Text);
                    Proname = txtProductname.Text.Trim().Split(',')[0];
                    company = txtProductname.Text.Trim().Split(',')[1];
                    unit = txtProductname.Text.Trim().Split(',')[2];
                    if (ProductDataGlobal == null)
                    {
                        ProductRepository productrepo1 = new ProductRepository();
                        ProductDataGlobal = productrepo1.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                    }
                    if (ProductDataGlobal.ProductType != 6)
                    {
                        decimal remq = 0;
                        if (cmbUnit.Text == unit)
                            textqty = Convert.ToDecimal(txtQuantity.Text);
                        else
                        {
                            decimal unitqty, altunitqty, calqty;
                            unitqty = Convert.ToDecimal(ProductDataGlobal.UnitQty);
                            altunitqty = Convert.ToDecimal(ProductDataGlobal.AlternateUnitQty);
                            calqty = unitqty / altunitqty;
                            textqty = Convert.ToDecimal(txtQuantity.Text) * calqty;
                        }
                        string vat = "";
                        if (SetDataM.StockShowOnBill == "Y")
                        {
                            if (billtype == 1)
                                vat = "y";
                            else if (billtype == 2)
                                vat = "n";
                        }
                        else
                            vat = "a";
                        try
                        {
                            db.connect();
                            SqlCommand command = new SqlCommand();
                            if (ProductDataGlobal.ProductType != 2)
                            {
                                command = new SqlCommand("SPVatnWithoutVatStock", db.Connection);
                                command.CommandType = CommandType.StoredProcedure;
                                command.Parameters.Add("@PrePName", SqlDbType.VarChar).Value = Proname;
                                command.Parameters.Add("@PreCName", SqlDbType.VarChar).Value = company;
                                command.Parameters.Add("@PreUName", SqlDbType.VarChar).Value = unit;
                                command.Parameters.Add("@stock", SqlDbType.VarChar).Value = 'P';
                                command.Parameters.Add("@vat", SqlDbType.VarChar).Value = vat;
                                command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                DataTable dt = new DataTable();
                                dt.Load(command.ExecuteReader());
                                decimal dtremqty = 0;
                                if (dt.Rows.Count > 0)
                                {
                                    try
                                    {
                                        dtremqty = Convert.ToDecimal(dt.Compute("Sum(RemQty)", "RemQty>=0"));
                                    }
                                    catch (Exception)
                                    { dtremqty = 0; }
                                    if (colIndex == -1)
                                        remq = dtremqty;
                                    else if (colIndex != -1)
                                        remq = (dtremqty + textqty);
                                }
                            }
                            else
                            {
                                try
                                {
                                    command = new SqlCommand("SPGetAssemblyProductRemQty", db.Connection);
                                    command.CommandType = CommandType.StoredProcedure;
                                    command.Parameters.Add("@proname", SqlDbType.VarChar).Value = Proname;
                                    command.Parameters.Add("@cname", SqlDbType.VarChar).Value = company;
                                    command.Parameters.Add("@uname", SqlDbType.VarChar).Value = unit;
                                    command.Parameters.Add("@status", SqlDbType.VarChar).Value = "P";
                                    command.Parameters.Add("@vat", SqlDbType.VarChar).Value = "a";
                                    command.Parameters.Add("@TransactionYear", SqlDbType.NVarChar).Value = CommonMethod.TransactionYear;
                                    command.Parameters.Add("@CompId", SqlDbType.Int).Value = Convert.ToInt32(CommonMethod.CompId);
                                }
                                catch (Exception)
                                { db.CloseConnection(); }
                                SqlDataReader reader = command.ExecuteReader();
                                if (reader.Read())
                                {
                                    if (colIndex == -1)
                                        remq = Convert.ToDecimal(reader.GetSqlDecimal(10).ToDouble());
                                    else if (colIndex != -1)
                                        remq = (Convert.ToDecimal(reader.GetSqlDecimal(10).ToDouble()) + textqty);
                                }
                            }

                            if (textqty <= remq)
                            { }
                            else
                            {
                                if (txtProductname.Focused == false)
                                {
                                    getProductType(Proname, company, unit);
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OK, MessageBoxIcon.Question) == DialogResult.OK))
                                        {
                                            isvalid = false;
                                            txtProductname.Text = "";
                                            txtQuantity.Text = "0";
                                            fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                                            txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                            txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                                            lblpvat.Text = "0";
                                            this.ActiveControl = txtProductname;
                                        }
                                    }
                                    else if (productentrytype == 6)
                                    {
                                        if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OK, MessageBoxIcon.Question) == DialogResult.OK))
                                        {
                                            isvalid = false;
                                            txtProductname.Text = "";
                                            txtQuantity.Text = "0";
                                            fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                                            txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                            txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                                            lblpvat.Text = "0";
                                            this.ActiveControl = txtProductname;
                                        }
                                    }
                                    else
                                    {
                                        AssemeblyProductDetailsRepository assemblyPDRepo = new AssemeblyProductDetailsRepository();
                                        var assemblyPData = assemblyPDRepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                        if (assemblyPData != null)
                                        {
                                            if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OK, MessageBoxIcon.Question) == DialogResult.OK))
                                            {
                                                isvalid = false;
                                                txtProductname.Text = "";
                                                txtQuantity.Text = "0";
                                                fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                                                txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                                txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                                                lblpvat.Text = "0";
                                                this.ActiveControl = txtProductname;
                                            }
                                        }
                                        else
                                        {
                                            if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel))
                                            {
                                                isvalid = false;
                                                txtProductname.Text = "";
                                                txtQuantity.Text = "0";
                                                fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                                                txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                                txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                                                lblpvat.Text = "0";
                                                this.ActiveControl = txtProductname;
                                            }
                                            else
                                            {
                                                if (productentrytype == 5)
                                                {
                                                    available = false;
                                                    isvalid = false;
                                                    txtProductname.Text = "";
                                                    txtQuantity.Text = "0";
                                                    txtrate.Text = "0"; txtAmount.Text = "0";
                                                    txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                                                    txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                                                    lblpvat.Text = "0"; txtHSNCode.Text = ""; fillgst();
                                                    this.ActiveControl = txtProductname;
                                                }
                                                if (txtQuantity.Text == "0")
                                                    this.ActiveControl = txtQuantity;
                                            }
                                        }
                                    }
                                }
                            }

                            //else
                            //{
                            //    if (txtProductname.Focused == false)
                            //    {
                            //        if (productentrytype == 1 || productentrytype == 2)
                            //        {
                            //            if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OK, MessageBoxIcon.Question) == DialogResult.OK))
                            //            {
                            //                isvalid = false;
                            //                txtProductname.Text = "";
                            //                txtQuantity.Text = "0";
                            //                fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                            //                txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                            //                txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                            //                lblpvat.Text = "0";
                            //                this.ActiveControl = txtProductname;
                            //            }
                            //        }
                            //        else if (productentrytype == 6)
                            //        {
                            //            if ((MessageBox.Show("Product quantity is low. Are you sure to generate bill with minus stock?", "Confirm", MessageBoxButtons.OK, MessageBoxIcon.Question) == DialogResult.OK))
                            //            {
                            //                isvalid = false;
                            //                txtProductname.Text = "";
                            //                txtQuantity.Text = "0";
                            //                fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                            //                txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                            //                txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                            //                lblpvat.Text = "0";
                            //                this.ActiveControl = txtProductname;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            if ((MessageBox.Show("Product quantity is Not Available. Are You Sure to generate bill with Minus Stock?", "Confirm", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel))
                            //            {
                            //                isvalid = false;
                            //                txtProductname.Text = "";
                            //                txtQuantity.Text = "0";
                            //                fillgst(); txtrate.Text = "0"; txtAmount.Text = "0";
                            //                txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                            //                txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                            //                lblpvat.Text = "0";
                            //                this.ActiveControl = txtProductname;
                            //            }
                            //            else
                            //            {
                            //                if (productentrytype == 5)
                            //                {
                            //                    available = false;
                            //                    isvalid = false;
                            //                    txtProductname.Text = "";
                            //                    txtQuantity.Text = "0";
                            //                    txtrate.Text = "0"; txtAmount.Text = "0";
                            //                    txtpTotalAmt.Text = "0"; txtpdiscount.Text = "0"; fillcombo();
                            //                    txtpSpcDisc.Text = "0"; txtpCess.Text = "0";
                            //                    lblpvat.Text = "0"; txtHSNCode.Text = ""; fillgst();
                            //                    this.ActiveControl = txtProductname;
                            //                }
                            //                if (txtQuantity.Text == "0")
                            //                    this.ActiveControl = txtQuantity;
                            //            }
                            //        }
                            //    }
                            //}
                            db.CloseConnection();
                        }
                        catch (Exception)
                        {
                            db.CloseConnection();
                        }
                        try
                        {
                            if (colIndex != -1)
                            {
                                GoodMasterRepository SRMRepo = new GoodMasterRepository();
                                GoodReturnMaster SRMData = new GoodReturnMaster();
                                SRMData = SRMRepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                if (SRMData != null)
                                {
                                    var SRDData = SRMData.GoodReturnDetails;
                                    foreach (var item in SRDData)
                                    {
                                        if (Convert.ToString(GvProductInfo.Rows[colIndex].Cells["ProductNameg"].Value) == item.ProductId && Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Company"].Value) == item.CompanyName && Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Unit"].Value) == item.Unit)
                                        {
                                            if (Convert.ToDecimal(txtQuantity.Text) >= Convert.ToDecimal(item.Quantity))
                                            {
                                                if (ProductCategory == "Motor")
                                                    goto t;
                                                else
                                                    goto s;
                                            }
                                            else
                                            {
                                                db.CloseConnection();
                                                MessageBox.Show("Some quantity is returned of this product so can't update to less quanity.", "Warning");
                                                txtQuantity.Text = Convert.ToString(GvProductInfo.Rows[colIndex].Cells["Quantityg"].Value);
                                                this.ActiveControl = txtQuantity;
                                                goto s;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (ProductCategory == "Motor")
                                    {
                                        if (Convert.ToDecimal(txtQuantity.Text) != 1)
                                        {
                                            MessageBox.Show("Quantity must be 1 for update.", "Warning");
                                            txtQuantity.Text = "1";
                                        }
                                        goto t;
                                    }
                                    else
                                        goto s;
                                }
                                SRMRepo.Dispose();
                                goto s;
                            }
                            if (colIndex == -1)
                            {
                                if (ProductCategory == "Motor")
                                {
                                    if (available == false)
                                        goto lblend;
                                    else
                                        goto t;
                                }
                                else
                                    goto s;
                            }
                        t:
                            {
                                string codeData = null;
                                try
                                {
                                    codeData = Convert.ToString(dtgvcode.Rows[0].Cells[0].Value);
                                }
                                catch (Exception)
                                {
                                    codeData = null;
                                }
                                if (codeData == null || codeData == "")
                                {
                                    dtgvcode.Rows.Clear();
                                    for (int i = 0; i < Convert.ToInt32(txtQuantity.Text); i++)
                                    {
                                        dtgvcode.Rows.Add();
                                        if (colIndex != -1)
                                            dtgvcode.Rows[i].Cells[0].Value = GvProductInfo.Rows[colIndex].Cells["Code"].Value.ToString();
                                        else
                                            dtgvcode.Rows[i].Cells[0].Value = "";
                                    }
                                }
                                dtgvcode.Visible = true;
                                this.ActiveControl = dtgvcode;
                                dtgvcode.Height = dtgvcode.ColumnHeadersHeight + dtgvcode.Rows[0].Height * (dtgvcode.RowCount + 1);
                            }
                        s:
                            {
                                decimal rate;
                                if (txtrate.Text == "")
                                    rate = 0;
                                else
                                    rate = Convert.ToDecimal(txtrate.Text);
                                decimal qty1 = Convert.ToDecimal(txtQuantity.Text);
                                decimal amt = rate * qty1;
                                if (SetDataM.VatOption == "Inclusive")
                                {
                                    //decimal b = Convert.ToDecimal(txtpvat.Text);
                                    //if (b == 0)
                                    //    txtpvat.Text = Convert.ToString(settingdata.VatValue);
                                    //decimal vamt = (amt * Convert.ToDecimal(settingdata.VatValue) / 100);
                                    //lblpvat.Text = Convert.ToString(Math.Round(vamt, 2, MidpointRounding.AwayFromZero));
                                    //decimal totalpamt = amt - vamt;
                                    //txtAmount.Text = Convert.ToString(Math.Round(totalpamt, 2, MidpointRounding.AwayFromZero));
                                    //txtpTotalAmt.Text = Convert.ToString(Math.Round(amt, 2, MidpointRounding.AwayFromZero));
                                }
                                else if (SetDataM.VatOption == "Exclusive")
                                {
                                    if (txtAmount.Text == "0")
                                        txtAmount.Text = Convert.ToString(amt);
                                }
                            }
                            getGstCalculation();
                        }
                        catch (Exception)
                        { }
                        txtQuantity.BackColor = Color.White;
                        txtQuantity.ForeColor = Color.Black;
                        if (barcodestatus != "No Barcode" && barcodestatus != null && (productentrytype != 1 && productentrytype != 2))
                        {
                            if (barcodestatus == "Static Barcode" && staticbarStatus == "N" && barcode != "" && barcode != null)
                            { }
                            else
                            {
                                if (colIndex != -1)
                                {
                                    if (savedQuantity >= Convert.ToInt32(txtQuantity.Text))
                                    {
                                        frmBarcodeChoice Barcode = new frmBarcodeChoice(Proname, company, unit, "frmBill", barcodestatus, barcode);
                                        Barcode.StartPosition = FormStartPosition.CenterParent;
                                        Barcode.ShowDialog();
                                    }
                                    else
                                    {
                                        frmBarcodeChoice Barcode = new frmBarcodeChoice(Proname, company, unit, "frmBill", barcodestatus, barcode, (Convert.ToInt32(txtQuantity.Text) - savedQuantity));
                                        Barcode.StartPosition = FormStartPosition.CenterParent;
                                        Barcode.ShowDialog();
                                    }
                                }
                                else
                                {
                                    frmBarcodeChoice Barcode = new frmBarcodeChoice(Proname, company, unit, "frmBill", barcodestatus, "", Convert.ToDecimal(txtQuantity.Text));
                                    Barcode.StartPosition = FormStartPosition.CenterParent;
                                    Barcode.ShowDialog();
                                }
                            }
                        }
                        else if (barcodestatus == "No Barcode" && productentrytype == 3)
                        {
                            frmBarcodeChoice Barcode = new frmBarcodeChoice(Proname, company, unit, "frmBill", barcodestatus, "", Convert.ToDecimal(txtQuantity.Text));
                            Barcode.StartPosition = FormStartPosition.CenterParent;
                            Barcode.ShowDialog();
                        }
                        //else if (barcodestatus != "No Barcode" && barcodestatus != null && (productentrytype == 1 || productentrytype == 2))
                        else if (productentrytype == 1 || productentrytype == 2)  //Withbatchandexpiry and only batch
                        {
                            if (qdid != 0)
                            {
                                if (txtBatchNo.Text != null && txtBatchNo.Text != "")
                                {
                                    if (txtBatchNo.Text.Contains(','))
                                    {
                                        string[] btchArray = txtBatchNo.Text.Split(',');
                                        for (int h = 0; h < btchArray.Length; h++)
                                        {
                                            BatchRepository batchrepo = new BatchRepository();
                                            PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                                            List<PurchaseDetail> purdt = new List<PurchaseDetail>();
                                            decimal ppqty = 0, bbQty = 0;
                                            purdt = purchaserepo.GetAll().Where(t => t.PurchaseMaster.CompId == CommonMethod.CompId && t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[h]).ToList();
                                            if (purdt != null)
                                            {
                                                foreach (var item in purdt)
                                                {
                                                    decimal prqty = 0;
                                                    try
                                                    {
                                                        PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                        var PurDData = PurRDRepo.GetAll().Where(t => t.POID == item.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        prqty = Convert.ToDecimal(PurDData.Quantity);
                                                    }
                                                    catch (Exception)
                                                    {
                                                        prqty = 0;
                                                    }
                                                    ppqty = Convert.ToDecimal(item.Quantity) + Convert.ToDecimal(item.FreeQty);
                                                    var bdata = batchrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[h] && t.BillId == Convert.ToString(qdid) && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    if (bdata != null)
                                                    {
                                                        bdata.Status = "0";
                                                        bdata.BillId = txtbillno.Text;
                                                        batchrepo.Edit(bdata);
                                                        batchrepo.Save();
                                                        bbQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[h] && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                        decimal srqty = 0;
                                                        try
                                                        {
                                                            BatchRepository batchrpstr = new BatchRepository();
                                                            List<Batch> BData = new List<Batch>();
                                                            BData = batchrpstr.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == btchArray[h] && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                            if (BData != null)
                                                            {
                                                                foreach (var item1 in BData)
                                                                {
                                                                    try
                                                                    {
                                                                        GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                        GoodReturnDetail SRData = new GoodReturnDetail();
                                                                        SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                        if (SRData != null)
                                                                            srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                                    }
                                                                    catch (Exception)
                                                                    { }
                                                                }
                                                            }
                                                        }
                                                        catch (Exception)
                                                        {
                                                            srqty = 0;
                                                        }
                                                        if ((ppqty - prqty) == (bbQty - srqty))
                                                        {
                                                            //purachasedetail status change
                                                            purchaserepo = new PurchaseDetailRepository();
                                                            PurchaseDetail purdata = new PurchaseDetail();
                                                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                            PurchaseMaster PMasterData = new PurchaseMaster();
                                                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            if (PMasterData != null)
                                                                purdata = purchaserepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[h] && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            purdata.Status = "Inactive";
                                                            purchaserepo.Edit(purdata);
                                                            purchaserepo.Save();
                                                        }
                                                        else
                                                        {
                                                            purchaserepo = new PurchaseDetailRepository();
                                                            PurchaseDetail purdata = new PurchaseDetail();
                                                            PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                            PurchaseMaster PMasterData = new PurchaseMaster();
                                                            PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            if (PMasterData != null)
                                                                purdata = purchaserepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == btchArray[h] && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            purdata.Status = "Active";
                                                            purchaserepo.Edit(purdata);
                                                            purchaserepo.Save();
                                                        }
                                                    }
                                                }
                                            }
                                            purchaserepo.Dispose();
                                        }
                                    }
                                    else
                                    {
                                        BatchRepository batchrepo = new BatchRepository();
                                        PurchaseDetailRepository purchaserepo = new PurchaseDetailRepository();
                                        List<PurchaseDetail> purdt = new List<PurchaseDetail>();
                                        decimal ppqty = 0, bbQty = 0;
                                        purdt = purchaserepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == batchnos && t.PurchaseMaster.CompId == CommonMethod.CompId).ToList();
                                        if (purdt != null)
                                        {
                                            foreach (var item in purdt)
                                            {
                                                decimal prqty = 0;
                                                try
                                                {
                                                    PReturnDetailRepository PurRDRepo = new PReturnDetailRepository();
                                                    var PurDData = PurRDRepo.GetAll().Where(t => t.POID == item.Id && t.PurchaseReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                    prqty = Convert.ToDecimal(PurDData.Quantity);
                                                }
                                                catch (Exception)
                                                {
                                                    prqty = 0;
                                                }
                                                ppqty = Convert.ToDecimal(item.Quantity) + Convert.ToDecimal(item.FreeQty);
                                                var bdata = batchrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == batchnos && t.BillId == Convert.ToString(qdid) && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                if (bdata != null)
                                                {
                                                    bdata.Status = "0";
                                                    bdata.BillId = txtbillno.Text;
                                                    batchrepo.Edit(bdata);
                                                    batchrepo.Save();
                                                    bbQty = Convert.ToDecimal(batchrepo.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == batchnos && t.Status != "0" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).Sum(t => t.UsedQty));
                                                    decimal srqty = 0;
                                                    try
                                                    {
                                                        BatchRepository batchrpstr = new BatchRepository();
                                                        List<Batch> BData = new List<Batch>();
                                                        BData = batchrpstr.GetAll().Where(t => t.ProductName == Proname && t.ManufactureCompany == company && t.Unit == unit && t.BatchNo == batchnos && t.Status == "1" && t.PorderNo == item.PorderNo && t.CompId == CommonMethod.CompId).ToList();
                                                        if (BData != null)
                                                        {
                                                            foreach (var item1 in BData)
                                                            {
                                                                try
                                                                {
                                                                    GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                                    GoodReturnDetail SRData = new GoodReturnDetail();
                                                                    SRData = SRRepo.GetAll().Where(t => t.ProductId == item1.ProductName && t.CompanyName == item1.ManufactureCompany && t.Unit == item1.Unit && t.BNID == Convert.ToInt32(item1.BillId) && t.BatchNo == item1.BatchNo && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                                    if (SRData != null)
                                                                        srqty = srqty + Convert.ToDecimal(SRData.Quantity);
                                                                }
                                                                catch (Exception)
                                                                { }
                                                            }
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                        srqty = 0;
                                                    }
                                                    if ((ppqty - prqty) == (bbQty - srqty))
                                                    {
                                                        //purachasedetail status change
                                                        purchaserepo = new PurchaseDetailRepository();
                                                        PurchaseDetail purdata = new PurchaseDetail();
                                                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                        PurchaseMaster PMasterData = new PurchaseMaster();
                                                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (PMasterData != null)
                                                            purdata = purchaserepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == batchnos && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        purdata.Status = "Inactive";
                                                        purchaserepo.Edit(purdata);
                                                        purchaserepo.Save();
                                                    }
                                                    else
                                                    {
                                                        purchaserepo = new PurchaseDetailRepository();
                                                        PurchaseDetail purdata = new PurchaseDetail();
                                                        PurchaseMasterRepository pMastRepo = new PurchaseMasterRepository();
                                                        PurchaseMaster PMasterData = new PurchaseMaster();
                                                        PMasterData = pMastRepo.GetAll().Where(t => t.Id == item.PorderNo && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        if (PMasterData != null)
                                                            purdata = purchaserepo.GetAll().Where(t => t.ProductName == Proname && t.CompanyName == company && t.Unit == unit && t.BatchNo == batchnos && t.PorderNo == item.PorderNo && t.PurchaseMaster.TransactionYear == PMasterData.TransactionYear && t.PurchaseMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                        purdata.Status = "Active";
                                                        purchaserepo.Edit(purdata);
                                                        purchaserepo.Save();
                                                    }
                                                }
                                            }
                                        }
                                        purchaserepo.Dispose();
                                    }
                                }
                            }
                            if ((productentrytype == 1 || productentrytype == 2) && isvalid == true)
                            {
                                frmBatchData batch = new frmBatchData(Proname, company, unit, qty);
                                batch.StartPosition = FormStartPosition.Manual;
                                batch.Top = 300;
                                batch.Left = 200;
                                batch.ShowDialog();
                            }
                        }  //End of withbatchandexpirty and onlybatch

                        //---------Applying rate slab
                        if (txtQuantity.Text != "" && txtQuantity.Text != "0")
                        {
                            if (ApplyRateSlab == true)
                            {
                                RateSlabRepository rateslabrepo = new RateSlabRepository();
                                RateSlab slabdata = rateslabrepo.GetAll().Where(t => t.ID == RateSlabId).FirstOrDefault();
                                if (slabdata != null)
                                {
                                    RateSlabDetailRepository rateslabdtlrepo = new RateSlabDetailRepository();
                                    RateSlabDetail slabdtldata = rateslabdtlrepo.GetAll().Where(t => t.MasterID == Convert.ToInt32(slabdata.ID) && t.RangeFrom <= Convert.ToDecimal(txtQuantity.Text) && t.RangeTo >= Convert.ToDecimal(txtQuantity.Text)).FirstOrDefault();
                                    if (slabdtldata != null)
                                        txtrate.Text = Convert.ToString(slabdtldata.AppliedRate);
                                }
                            }
                        }
                    }
                    else if (txtQuantity.Text == "0")
                        MessageBox.Show("Product quantity is zero, can you change it?", "Warning");
                    if (ProductDataGlobal.QuantitySubtitle == "Y" && productentrytype == 0)
                        QtySubtitle = true;
                    else
                        QtySubtitle = false;
                    if (barcodeMinus == true)
                        this.ActiveControl = txtProductname;
                    if (QtySubtitle == true)
                    {
                        pnlQtySubtitle.Visible = true;
                        //this.ActiveControl = txtQuantitySubtitle;
                    }
                    else
                    {
                        pnlQtySubtitle.Visible = false;
                        txtQuantitySubtitle.Text = "0";
                    }
                lblend:
                    { }
                    custbillinfo = null;
                }
                else if (txtQuantity.Text == "")
                    txtQuantity.Text = "0";
            }
            catch (Exception)
            { }
        }

        private void txtQuantity_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                int i = e.KeyChar;
                if (i == 46 || (i >= 48 && i <= 57) || i == 8 || i == 45)
                { }
                else
                { e.Handled = true; }
            }
            catch (Exception)
            { }
        }

        private void dtgvcode_Leave(object sender, EventArgs e)
        {
            try
            {
                if (codeflag == 0)
                {
                    dtgvcode.Visible = false;
                    this.ActiveControl = txtrate;
                }
                else
                    this.ActiveControl = dtgvcode;
            }
            catch (Exception)
            { }
        }

        private void txtNetAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtNetAmt.Text) || !string.IsNullOrWhiteSpace(txtNetAmt.Text))
                {
                    if (btnsave.Enabled == true)
                    {
                        if (SetDataM != null)
                        {
                            if (SetDataM.AutoPaidAmount == "True")
                                txtPaidAmt.Text = txtNetAmt.Text;
                            else
                                if (string.IsNullOrEmpty(txtPaidAmt.Text) || string.IsNullOrWhiteSpace(txtPaidAmt.Text))
                                    txtPaidAmt.Text = "0";
                            txtRemainingAmt.Text = Convert.ToString(Math.Round((Convert.ToDecimal(txtNetAmt.Text) - Convert.ToDecimal(txtPaidAmt.Text)), 2, MidpointRounding.AwayFromZero));
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(txtPaidAmt.Text) || string.IsNullOrWhiteSpace(txtPaidAmt.Text))
                                txtPaidAmt.Text = "0";
                            txtRemainingAmt.Text = Convert.ToString(Math.Round((Convert.ToDecimal(txtNetAmt.Text) - Convert.ToDecimal(txtPaidAmt.Text)), 2, MidpointRounding.AwayFromZero));
                        }
                    }
                    else if (btnsave.Enabled == false)
                    {
                        if (Convert.ToDecimal(txtNetAmt.Text) != 0)
                        {
                            if (Convert.ToDecimal(txtNetAmt.Text) >= Pamt)
                            {
                                if (string.IsNullOrEmpty(txtPaidAmt.Text) || string.IsNullOrWhiteSpace(txtPaidAmt.Text))
                                    txtPaidAmt.Text = "0";
                                if (remamt >= tempPaidamt)
                                    txtPaidAmt.Text = tempPaidamt.ToString();
                                txtRemainingAmt.Text = Convert.ToString(Math.Round((Convert.ToDecimal(txtNetAmt.Text) - Convert.ToDecimal(txtPaidAmt.Text)), 2, MidpointRounding.AwayFromZero));
                            }
                            else
                            {
                                MessageBox.Show("For This Purchase Order some Amount Paid " + Environment.NewLine + " So u can Decrease Amount less than that Amount.", "Warning");
                                btnsave.Enabled = false;
                                btnUpdate.Enabled = false;
                                btnnew.Enabled = false;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            try
            {
                if (txtProductname.Text != "")
                {
                    gvprepurchasedata.Visible = true;
                    lblavgrate.Visible = true;
                    AvgRate();
                    this.ActiveControl = gvprepurchasedata;
                }
                else
                {
                    MessageBox.Show("Select Product Name first.", "Warning");
                    this.ActiveControl = txtProductname;
                }
            }
            catch (Exception)
            {
                gvprepurchasedata.Visible = false;
                lblavgrate.Visible = false;
            }
        }

        private void gvprepurchasedata_Leave(object sender, EventArgs e)
        {
            try
            {
                gvprepurchasedata.Visible = false;
            }
            catch (Exception)
            { }
        }

        private void gvprepurchasedata_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyData == Keys.Enter || e.KeyData == Keys.Tab)
                    this.ActiveControl = txtProductname;
            }
            catch (Exception)
            { }
        }

        private void txtAmount_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtAmount.Text != "")
                {
                    if (txtQuantity.Text != "")
                    {
                        if (SetDataM.VatOption == "Exclusive")
                        {
                            if (taxinclude == "False" || taxinclude == null)
                                txtrate.Text = Convert.ToString(Math.Round((Convert.ToDecimal(txtAmount.Text) / Convert.ToDecimal(txtQuantity.Text)), 2, MidpointRounding.AwayFromZero));
                        }
                    }
                }
                txtAmount.BackColor = Color.White;
                txtAmount.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void txtAmount_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                int i = e.KeyChar;
                if (i == 46 || (i >= 48 && i <= 57) || i == 8)
                { }
                else
                    e.Handled = true;
            }
            catch (Exception)
            { }
        }

        private void txtDiscAmt_Leave(object sender, EventArgs e)
        {
            try
            {
                if (btnUpdate.Enabled == false && btnsave.Enabled == false)
                { }
                else
                {
                    if (txtDiscAmt.Text != "" && txtTotalAmt.Text != "")
                    {
                        if (Convert.ToDecimal(txtDiscAmt.Text) <= Convert.ToDecimal(txtTotalAmt.Text))
                        {
                            decimal v, h, t, total, damt = 0, vamt = 0, netamt;
                            total = Convert.ToDecimal(txtTotalAmt.Text);
                            if (txtDiscAmt.Text != "")
                            {
                                damt = Convert.ToDecimal(txtDiscAmt.Text);
                                decimal disc = damt * 100 / total;
                                txtDiscount.Text = Convert.ToString(Math.Round(disc, 5, MidpointRounding.AwayFromZero));
                            }
                            if (vat5amt == 0 && vat12amt == 0)
                            {
                                if (txtVat.Text != "")
                                    v = Convert.ToDecimal(txtVat.Text);
                                else
                                    v = 0;
                                vamt = ((total - damt) * v) / 100;
                                lblvat.Text = Convert.ToString(Math.Round(vamt, 2, MidpointRounding.AwayFromZero));
                            }
                            if (txthmchrg.Text != "")
                                h = Convert.ToDecimal(txthmchrg.Text);
                            else
                                h = 0;
                            if (txttrchrg.Text != "")
                                t = Convert.ToDecimal(txttrchrg.Text);
                            else
                                t = 0;
                            netamt = total - Math.Round(damt, 2, MidpointRounding.AwayFromZero) + Math.Round(vamt, 2, MidpointRounding.AwayFromZero) + h + t;
                            txtNetAmt.Text = Convert.ToString(netamt);
                            if (rdoff == 1)
                                RoundOff(netamt);
                        }
                        else
                        {
                            MessageBox.Show("Enter Discount Less or Equal to Total Amount.", "Warning");
                            txtDiscAmt.Text = "0";
                            this.ActiveControl = txtDiscAmt;
                        }
                    }
                    else
                    {
                        txtDiscAmt.Text = "0";
                        this.ActiveControl = txtDiscAmt;
                    }
                }
                txtDiscAmt.BackColor = Color.White;
                txtDiscAmt.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void dtgvcode_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            try
            {
                if (dtgvcode.CurrentCell.ColumnIndex == 0)
                {
                    string Proname = txtProductname.Text.Trim().Split(',')[0];
                    string company = txtProductname.Text.Trim().Split(',')[1];
                    string unit = txtProductname.Text.Trim().Split(',')[2];
                    string cnString1 = ConfigurationManager.ConnectionStrings["CrystalReportConnection"].ConnectionString;
                    SqlDataReader dreader;
                    SqlConnection conn = new SqlConnection(cnString1);
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    AutoCompleteStringCollection acBusIDSorce = new AutoCompleteStringCollection();
                    cmd.CommandText = "(Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) and d.code not in(SELECT d.Code FROM CustomerBillDetail as d inner join CustomerBillMaster as m on m.Id=d.BillNo Where ProductId='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and d.Id not in(SELECT gd.BNID FROM GoodReturnMaster as gm inner join GoodReturnDetail as gd on gm.Id=gd.GoodReturnNo Where gd.ProductId='" + Proname + "' AND gd.CompanyName='" + company + "' AND gd.Unit='" + unit + "' and gm.CompId=" + CommonMethod.CompId + ")) and d.code not in(SELECT d.Code FROM DeadProductDetail as d inner join DeadProductMaster as m on m.Id=d.DeadNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null)) and d.code not in( Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)))) union (Select  d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) AND M.Id=(sELECT TOP 1 Id from TransferStock where ProductName='" + Proname + "' and MfgCompany='" + company + "' and Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15))  order by Id DESC ) and m.Id>(Select top 1 m.Id from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) order by Id DESC ) )  union SELECT d.Code FROM  PurchaseDetail as d inner join PurchaseMaster as m on m.Id=d.PorderNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null) and d.code not in(SELECT d.Code FROM PurchaseReturnDetail as d inner join PurchaseReturnMaster as m on m.Id=d.PurchaseReturnNo inner join PurchaseMaster pm on pm.PorderNo=m.PorderNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and m.CompId=pm.CompId and (pm.StockIn=0 or pm.StockIn is null)) and d.code not in(SELECT d.Code FROM CustomerBillDetail as d inner join CustomerBillMaster as m on m.Id=d.BillNo Where ProductId='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and d.Id not in(SELECT gd.BNID FROM GoodReturnMaster as gm inner join GoodReturnDetail as gd on gm.Id=gd.GoodReturnNo Where gd.ProductId='" + Proname + "' AND gd.CompanyName='" + company + "' AND gd.Unit='" + unit + "' and gm.CompId=" + CommonMethod.CompId + ")) and d.code not in(SELECT d.Code FROM DeadProductDetail as d inner join DeadProductMaster as m on m.Id=d.DeadNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null)) and d.code not in(Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)))";
                    conn.Open();
                    dreader = cmd.ExecuteReader();
                    if (dreader.HasRows == true)
                    {
                        while (dreader.Read())
                            acBusIDSorce.Add(dreader["Code"].ToString());
                    }
                    else
                    {
                        if (HasMandatoryCodeSr == "Y")
                            MessageBox.Show("Data not Found");
                    }
                    dreader.Close();
                    if (HasMandatoryCodeSr == "Y")
                    {
                        TextBox txtBusID = e.Control as TextBox;
                        if (txtBusID != null)
                        {
                            txtBusID.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                            txtBusID.AutoCompleteCustomSource = acBusIDSorce;
                            txtBusID.AutoCompleteSource = AutoCompleteSource.CustomSource;
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void dtgvcode_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (txtProductname.Text != "" && dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
                {
                    codeflag = 0;
                    string Proname = txtProductname.Text.Trim().Split(',')[0];
                    string company = txtProductname.Text.Trim().Split(',')[1];
                    string unit = txtProductname.Text.Trim().Split(',')[2];
                    SqlDataAdapter da = new SqlDataAdapter("(Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) and d.code not in(SELECT d.Code FROM CustomerBillDetail as d inner join CustomerBillMaster as m on m.Id=d.BillNo Where ProductId='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and d.Id not in(SELECT gd.BNID FROM GoodReturnMaster as gm inner join GoodReturnDetail as gd on gm.Id=gd.GoodReturnNo Where gd.ProductId='" + Proname + "' AND gd.CompanyName='" + company + "' AND gd.Unit='" + unit + "' and gm.CompId=" + CommonMethod.CompId + ")) and d.code not in(SELECT d.Code FROM DeadProductDetail as d inner join DeadProductMaster as m on m.Id=d.DeadNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null)) and d.code not in( Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)))) union (Select  d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) AND M.Id=(sELECT TOP 1 Id from TransferStock where ProductName='" + Proname + "' and MfgCompany='" + company + "' and Unit='" + unit + "' and TransferTo=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15))  order by Id DESC ) and m.Id>(Select top 1 m.Id from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)) order by Id DESC ) )  union SELECT d.Code FROM  PurchaseDetail as d inner join PurchaseMaster as m on m.Id=d.PorderNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null) and d.code not in(SELECT d.Code FROM PurchaseReturnDetail as d inner join PurchaseReturnMaster as m on m.Id=d.PurchaseReturnNo inner join PurchaseMaster pm on pm.PorderNo=m.PorderNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and m.CompId=pm.CompId and (pm.StockIn=0 or pm.StockIn is null)) and d.code not in(SELECT d.Code FROM CustomerBillDetail as d inner join CustomerBillMaster as m on m.Id=d.BillNo Where ProductId='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and d.Id not in(SELECT gd.BNID FROM GoodReturnMaster as gm inner join GoodReturnDetail as gd on gm.Id=gd.GoodReturnNo Where gd.ProductId='" + Proname + "' AND gd.CompanyName='" + company + "' AND gd.Unit='" + unit + "' and gm.CompId=" + CommonMethod.CompId + ")) and d.code not in(SELECT d.Code FROM DeadProductDetail as d inner join DeadProductMaster as m on m.Id=d.DeadNo Where ProductName='" + Proname + "' AND CompanyName='" + company + "' AND Unit='" + unit + "' and m.CompId=" + CommonMethod.CompId + " and (m.StockIn=0 or m.StockIn is null)) and d.code not in(Select d.Code from TransferStockDetail d inner join TransferStock m on m.Id=d.TransferId where m.ProductName='" + Proname + "' and m.MfgCompany='" + company + "' and m.Unit='" + unit + "' and TransferFrom=Cast('C'+Cast('" + CommonMethod.CompId + "'as varchar(10)) as varchar(15)))", db.Connection);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    int intflag = 1;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i][0].ToString() != "")
                        {
                            if (dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != dt.Rows[i]["Code"].ToString())
                                intflag = 0;
                            else
                            {
                                intflag = 1;
                                goto a;
                            }
                        }
                    }
                    if (intflag == 0)
                    {
                        MessageBox.Show("This Serial No is not Saved.", "Warning");
                        dtgvcode.Visible = true;
                        dtgvcode.ClearSelection();
                        dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = "";
                        dtgvcode.CurrentCell = dtgvcode[e.ColumnIndex, e.RowIndex];
                        dtgvcode.BeginEdit(true);
                        codeflag = 1;
                        goto b;
                    }
                a: { }
                    if (dtgvcode.RowCount > 0)
                    {
                        for (int i = 0; i < dtgvcode.RowCount; i++)
                        {
                            if (e.RowIndex != i)
                            {
                                if (dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() == dtgvcode.Rows[i].Cells[e.ColumnIndex].Value.ToString())
                                {
                                    MessageBox.Show("This Serial No is already Added to List.", "Warning");
                                    dtgvcode.Visible = true;
                                    dtgvcode.ClearSelection();
                                    dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = "";
                                    dtgvcode.CurrentCell = dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex];
                                    dtgvcode.CurrentCell.Selected = true;
                                    dtgvcode.BeginEdit(true);
                                    codeflag = 1;
                                    break;
                                }
                            }
                        }
                    }
                }
            b: { }
                if (dtgvcode.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() == "")
                {
                    MessageBox.Show("All Quantity must have Serial No or Code.", "Warning");
                    dtgvcode.Visible = true;
                    dtgvcode.CurrentCell.Selected = true;
                }
            }
            catch (Exception)
            { }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            try
            {
                pictureBox1.Visible = false;
                this.ActiveControl = txtProductname;
            }
            catch (Exception)
            { }
        }

        private void cmbUnit_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbUnit.Text != "" || cmbUnit.Text != "Select")
                {
                    if (txtProductname.Text != "")
                    {
                        string proname = "", company = "", unit = "";
                        if ((txtProductname.Text).Contains(","))
                        {
                            try
                            {
                                proname = txtProductname.Text.Trim().Split(',')[0];
                                company = txtProductname.Text.Trim().Split(',')[1];
                                unit = txtProductname.Text.Trim().Split(',')[2];
                            }
                            catch (Exception)
                            { }
                            if (ProductDataGlobal == null)
                            {
                                ProductRepository productrepo = new ProductRepository();
                                ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                            }
                            PurchaseDetailRepository purRepo = new PurchaseDetailRepository();
                            var pdata = purRepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.PurchaseMaster.CompId == CommonMethod.CompId).LastOrDefault();
                            if (ProductDataGlobal == null)
                            {
                                MessageBox.Show("This Product Name Is Not Valid.", "Warning");
                                txtProductname.Text = "";
                                this.ActiveControl = txtProductname;
                            }
                            else
                            {
                                if (colIndex != -1)
                                {
                                    if (cmbUnit.Text == ProductDataGlobal.Uniti)
                                    {
                                        if (ProductDataGlobal.BarcodeStatus == "Our Barcode" || ProductDataGlobal.BarcodeStatus == "Static Barcode")
                                        {
                                            if (pdata != null)
                                                txtrate.Text = Convert.ToString(pdata.SaleRate);
                                            else
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        }
                                        else if (CustomerType == "Retailer" || CustomerType == null)
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        else
                                        {
                                            if (ProductDataGlobal.DealerRate != null)
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.DealerRate);
                                            else
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        }
                                    }
                                    else if (cmbUnit.Text == ProductDataGlobal.AlternateUnit)
                                    {
                                        if (CustomerType == "Retailer" || CustomerType == null)
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.AlternateUnitRate);
                                        else
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.AlternateDealerRate);
                                    }
                                }
                                else
                                {
                                    if (cmbUnit.Text == ProductDataGlobal.Uniti)
                                    {
                                        if (ProductDataGlobal.BarcodeStatus == "Our Barcode" || ProductDataGlobal.BarcodeStatus == "Static Barcode")
                                        {
                                            if (pdata != null)
                                                txtrate.Text = Convert.ToString(pdata.SaleRate);
                                            else
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        }
                                        else if (CustomerType == "Retailer" || CustomerType == null)
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        else
                                        {
                                            if (ProductDataGlobal.DealerRate != null)
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.DealerRate);
                                            else
                                                txtrate.Text = Convert.ToString(ProductDataGlobal.Rate);
                                        }
                                    }
                                    else if (cmbUnit.Text == ProductDataGlobal.AlternateUnit)
                                    {
                                        if (CustomerType == "Retailer" || CustomerType == null)
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.AlternateUnitRate);
                                        else
                                            txtrate.Text = Convert.ToString(ProductDataGlobal.AlternateDealerRate);
                                    }
                                }
                                ProductCategory = ProductDataGlobal.Category;
                                //display previous purchase price
                                //PurchaseDetailRepository purdtlrepo = new PurchaseDetailRepository();
                                //var purdata = purdtlrepo.GetAll().Where(t => t.ProductName == proname && t.CompanyName == company && t.Unit == unit && t.PurchaseMaster.Suppliername != "First stock").LastOrDefault();
                                //if (purdata != null)
                                //{
                                //    if (Convert.ToDecimal(purdata.Vat) > 0)
                                //    {
                                //        if (purdata.Unit != purdata.PurchaseUnit)
                                //        {
                                //            decimal a = Convert.ToDecimal(purdata.PurchasePrice) / (Convert.ToDecimal(ProductDataGlobal.UnitQty) / Convert.ToDecimal(ProductDataGlobal.AlternateUnitQty));
                                //            decimal convertpurprice = Convert.ToDecimal(a) + (Convert.ToDecimal(a) * Convert.ToDecimal(purdata.Vat) / 100);
                                //            decimal purprice = Convert.ToDecimal(purdata.PurchasePrice) + (Convert.ToDecimal(purdata.PurchasePrice) * Convert.ToDecimal(purdata.Vat) / 100);
                                //        }
                                //        else
                                //        {
                                //            decimal purprice = Convert.ToDecimal(purdata.PurchasePrice) + (Convert.ToDecimal(purdata.PurchasePrice) * Convert.ToDecimal(purdata.Vat) / 100);
                                //        }
                                //    }
                                //    else
                                //    {
                                //        if (purdata.Unit != purdata.PurchaseUnit)
                                //        {
                                //            decimal a = Convert.ToDecimal(purdata.PurchasePrice) / (Convert.ToDecimal(ProductDataGlobal.UnitQty) / Convert.ToDecimal(ProductDataGlobal.AlternateUnitQty));
                                //        }
                                //    }
                                //}
                            }
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void txtpTotalAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (SetDataM.VatOption == "Exclusive")
                {
                    if (taxinclude == "True" && (billtype != 2))
                    {
                        decimal a = Convert.ToDecimal(txtpTotalAmt.Text) * 100;
                        decimal t = Convert.ToDecimal(cmbsgst.Text) + 100;
                        txtAmount.Text = Convert.ToString(Math.Round((a / t), 2, MidpointRounding.AwayFromZero));
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void txtpdisAmt_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtpdisAmt.Text != "" && txtAmount.Text != "")
                {
                    if (Convert.ToDecimal(txtpdisAmt.Text) <= Convert.ToDecimal(txtAmount.Text))
                    {
                        if (flgdiscountchange == true)
                        {
                            try
                            {
                                decimal total, damt = 0;
                                total = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(lblBasicRate.Text);
                                if (txtpdisAmt.Text != "")
                                {
                                    damt = Convert.ToDecimal(txtpdisAmt.Text);
                                    decimal disc = damt * 100 / total;
                                    txtpdiscount.Text = Convert.ToString(Math.Round(disc, 5, MidpointRounding.AwayFromZero));
                                }
                            }
                            catch (Exception)
                            { }
                        }
                    }
                    else
                    {
                        txtpdisAmt.Text = "0";
                        txtpdiscount.Text = "0";
                        //this.ActiveControl = txtpdisAmt;
                    }
                }
                else
                {
                    txtpdisAmt.Text = "0";
                    txtpdiscount.Text = "0";
                    //this.ActiveControl = txtpdisAmt;
                }
                txtpdisAmt.BackColor = Color.White;
                txtpdisAmt.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void cmbPrefix_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbPrefix.Text != "" && PrefixToBind == false)
                {
                    if (cmbPrefix.Text != "Select")
                    {
                        PrefixToBind = true;
                        txtprefixproduct.Text = cmbPrefix.Text;
                        txtprefixproduct.Visible = true;
                        getProductsbyPrefix(cmbPrefix.Text);
                        this.ActiveControl = txtprefixproduct;
                    }
                }
                else
                    txtprefixproduct.Text = "";
            }
            catch (Exception)
            { }
        }

        private void txtSubtitle_Leave(object sender, EventArgs e)
        {
            if (txtSubtitle.Text != "")
            {
                pnlSubtitle.Visible = false;
                txtSubtitle.Visible = false;
                this.ActiveControl = txtQuantity;
            }
            else
            {
                pnlSubtitle.Visible = true;
                txtSubtitle.Visible = true;
            }
            txtSubtitle.BackColor = Color.White;
            txtSubtitle.ForeColor = Color.Black;
        }

        private void txtpdisAmt_KeyPress(object sender, KeyPressEventArgs e)
        {
            flgdiscountchange = false;
            if ((e.KeyChar > 47 && e.KeyChar < 58) || e.KeyChar == 8 || e.KeyChar == 46)
                flgdiscountchange = true;
        }

        private void btnclosepanel_Click(object sender, EventArgs e)
        {
            pnlOtherDetails.Visible = false;
            this.ActiveControl = txtDiscount;
        }

        private void txtProductname_Enter(object sender, EventArgs e)
        {
            txtProductname.BackColor = Color.FromArgb(194, 232, 237);
            txtProductname.ForeColor = Color.Blue;
            PrefixToBind = true;
        }

        private void dtpbilldate_Enter(object sender, EventArgs e)
        {
            dtpbilldate.BackColor = Color.FromArgb(194, 232, 237);
            dtpbilldate.ForeColor = Color.Blue;
        }

        private void dtpbilldate_Leave(object sender, EventArgs e)
        {
            dtpbilldate.BackColor = Color.White;
            dtpbilldate.ForeColor = Color.Black;
            if (SetDataM != null)
            {
                if (SetDataM.ShowUserDefinedSeries == "Y")
                    this.ActiveControl = cmbInvoiceSeries;
                else
                    this.ActiveControl = cmbcustomername;
            }
        }

        private void cmbcustomername_Enter(object sender, EventArgs e)
        {
            cmbcustomername.BackColor = Color.FromArgb(194, 232, 237);
            cmbcustomername.ForeColor = Color.Blue;
        }

        private void txtQuantity_Enter(object sender, EventArgs e)
        {
            txtQuantity.BackColor = Color.FromArgb(194, 232, 237);
            txtQuantity.ForeColor = Color.Blue;
        }

        private void txtrate_Enter(object sender, EventArgs e)
        {
            txtrate.BackColor = Color.FromArgb(194, 232, 237);
            txtrate.ForeColor = Color.Blue;
        }

        private void txtrate_Leave(object sender, EventArgs e)
        {
            if (txtrate.Text == "")
                txtrate.Text = "0";
            txtrate.BackColor = Color.White;
            txtrate.ForeColor = Color.Black;
        }

        private void txtAmount_Enter(object sender, EventArgs e)
        {
            txtAmount.BackColor = Color.FromArgb(194, 232, 237);
            txtAmount.ForeColor = Color.Blue;
        }

        private void txtHSNCode_Enter(object sender, EventArgs e)
        {
            txtHSNCode.BackColor = Color.FromArgb(194, 232, 237);
            txtHSNCode.ForeColor = Color.Blue;
        }

        private void txtHSNCode_Leave(object sender, EventArgs e)
        {
            txtHSNCode.BackColor = Color.White;
            txtHSNCode.ForeColor = Color.Black;
            try
            {
                if (txtProductname.Text != "")
                {
                    ProductRepository prepo1 = new ProductRepository();
                    string proname = "", company = "", unit = "";
                    if ((txtProductname.Text).Contains(","))
                    {
                        proname = txtProductname.Text.Trim().Split(',')[0];
                        company = txtProductname.Text.Trim().Split(',')[1];
                        unit = txtProductname.Text.Trim().Split(',')[2];
                        ProductRepository prepo = new ProductRepository();
                        var pdata = prepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit && t.HSNCode == "").FirstOrDefault();
                        if (pdata != null)
                        {
                            pdata.HSNCode = txtHSNCode.Text;
                            prepo1.Edit(pdata);
                            prepo1.Save();
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void txtSubtitle_Enter(object sender, EventArgs e)
        {
            txtSubtitle.BackColor = Color.FromArgb(194, 232, 237);
            txtSubtitle.ForeColor = Color.Blue;
        }

        private void txtpdiscount_Enter(object sender, EventArgs e)
        {
            txtpdiscount.BackColor = Color.FromArgb(194, 232, 237);
            txtpdiscount.ForeColor = Color.Blue;
        }

        private void txtpdiscount_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtpdiscount.Text == "")
                    txtpdiscount.Text = "0";
            }
            catch (Exception)
            { }
            txtpdiscount.BackColor = Color.White;
            txtpdiscount.ForeColor = Color.Black;
        }

        private void txtpdisAmt_Enter(object sender, EventArgs e)
        {
            txtpdisAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtpdisAmt.ForeColor = Color.Blue;
        }

        private void txtTaxableamt_Enter(object sender, EventArgs e)
        {
            txtTaxableamt.BackColor = Color.FromArgb(194, 232, 237);
            txtTaxableamt.ForeColor = Color.Blue;
        }

        private void txtTaxableamt_Leave(object sender, EventArgs e)
        {
            txtTaxableamt.BackColor = Color.White;
            txtTaxableamt.ForeColor = Color.Black;
        }

        private void txtpTotalAmt_Enter(object sender, EventArgs e)
        {
            txtpTotalAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtpTotalAmt.ForeColor = Color.Blue;
        }

        private void txtpTotalAmt_Leave(object sender, EventArgs e)
        {
            txtpTotalAmt.BackColor = Color.White;
            txtpTotalAmt.ForeColor = Color.Black;
        }

        private void txtBillReceiptNo_Enter(object sender, EventArgs e)
        {
            txtBillReceiptNo.BackColor = Color.FromArgb(194, 232, 237);
            txtBillReceiptNo.ForeColor = Color.Blue;
        }

        private void txtBillReceiptNo_Leave(object sender, EventArgs e)
        {
            txtBillReceiptNo.BackColor = Color.White;
            txtBillReceiptNo.ForeColor = Color.Black;
        }

        private void txtmannualDCNo_Enter(object sender, EventArgs e)
        {
            txtmannualDCNo.BackColor = Color.FromArgb(194, 232, 237);
            txtmannualDCNo.ForeColor = Color.Blue;
        }

        private void txtmannualDCNo_Leave(object sender, EventArgs e)
        {
            txtmannualDCNo.BackColor = Color.White;
            txtmannualDCNo.ForeColor = Color.Black;
        }

        private void cmbShipParty_Leave(object sender, EventArgs e)
        {
            cmbShipParty.BackColor = Color.White;
            cmbShipParty.ForeColor = Color.Black;
        }

        private void cmbShipParty_Enter(object sender, EventArgs e)
        {
            cmbShipParty.BackColor = Color.FromArgb(194, 232, 237);
            cmbShipParty.ForeColor = Color.Blue;
        }

        private void txtNarration_Leave(object sender, EventArgs e)
        {
            txtNarration.BackColor = Color.White;
            txtNarration.ForeColor = Color.Black;
        }

        private void txtNarration_Enter(object sender, EventArgs e)
        {
            txtNarration.BackColor = Color.FromArgb(194, 232, 237);
            txtNarration.ForeColor = Color.Blue;
        }

        private void dtppaymentdate_Enter(object sender, EventArgs e)
        {
            dtppaymentdate.BackColor = Color.FromArgb(194, 232, 237);
            dtppaymentdate.ForeColor = Color.Blue;
        }

        private void dtppaymentdate_Leave(object sender, EventArgs e)
        {
            dtppaymentdate.BackColor = Color.White;
            dtppaymentdate.ForeColor = Color.Black;
        }

        private void txtbankname_Leave(object sender, EventArgs e)
        {
            txtbankname.BackColor = Color.White;
            txtbankname.ForeColor = Color.Black;
        }

        private void txtbankname_Enter(object sender, EventArgs e)
        {
            txtbankname.BackColor = Color.FromArgb(194, 232, 237);
            txtbankname.ForeColor = Color.Blue;
        }

        private void cmbbank_Leave(object sender, EventArgs e)
        {
            cmbbank.BackColor = Color.White;
            cmbbank.ForeColor = Color.Black;
        }

        private void cmbbank_Enter(object sender, EventArgs e)
        {
            cmbbank.BackColor = Color.FromArgb(194, 232, 237);
            cmbbank.ForeColor = Color.Blue;
        }

        private void dtpchequedate_Leave(object sender, EventArgs e)
        {
            dtpchequedate.BackColor = Color.White;
            dtpchequedate.ForeColor = Color.Black;
        }

        private void dtpchequedate_Enter(object sender, EventArgs e)
        {
            dtpchequedate.BackColor = Color.FromArgb(194, 232, 237);
            dtpchequedate.ForeColor = Color.Blue;
        }

        private void txtchequeno_Leave(object sender, EventArgs e)
        {
            txtchequeno.BackColor = Color.White;
            txtchequeno.ForeColor = Color.Black;
        }

        private void txtchequeno_Enter(object sender, EventArgs e)
        {
            txtchequeno.BackColor = Color.FromArgb(194, 232, 237);
            txtchequeno.ForeColor = Color.Blue;
        }

        private void txtTransporter_Leave(object sender, EventArgs e)
        {
            txtTransporter.BackColor = Color.White;
            txtTransporter.ForeColor = Color.Black;
        }

        private void txtTransporter_Enter(object sender, EventArgs e)
        {
            txtTransporter.BackColor = Color.FromArgb(194, 232, 237);
            txtTransporter.ForeColor = Color.Blue;
        }

        private void txtVehicletype_Leave(object sender, EventArgs e)
        {
            txtVehicletype.BackColor = Color.White;
            txtVehicletype.ForeColor = Color.Black;
        }

        private void txtVehicletype_Enter(object sender, EventArgs e)
        {
            txtVehicletype.BackColor = Color.FromArgb(194, 232, 237);
            txtVehicletype.ForeColor = Color.Blue;
        }

        private void txtVehicleNo_Leave(object sender, EventArgs e)
        {
            txtVehicleNo.BackColor = Color.White;
            txtVehicleNo.ForeColor = Color.Black;
        }

        private void txtVehicleNo_Enter(object sender, EventArgs e)
        {
            txtVehicleNo.BackColor = Color.FromArgb(194, 232, 237);
            txtVehicleNo.ForeColor = Color.Blue;
        }

        private void txtTotalAmt_Leave(object sender, EventArgs e)
        {
            txtTotalAmt.BackColor = Color.White;
            txtTotalAmt.ForeColor = Color.Black;
        }

        private void txtTotalAmt_Enter(object sender, EventArgs e)
        {
            txtTotalAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtTotalAmt.ForeColor = Color.Blue;
        }

        private void txtDiscount_Leave(object sender, EventArgs e)
        {
            txtDiscount.BackColor = Color.White;
            txtDiscount.ForeColor = Color.Black;
        }

        private void txtDiscount_Enter(object sender, EventArgs e)
        {
            txtDiscount.BackColor = Color.FromArgb(194, 232, 237);
            txtDiscount.ForeColor = Color.Blue;
        }

        private void txtDiscAmt_Enter(object sender, EventArgs e)
        {
            txtDiscAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtDiscAmt.ForeColor = Color.Blue;
        }

        private void txttrchrg_Leave(object sender, EventArgs e)
        {
            txttrchrg.BackColor = Color.White;
            txttrchrg.ForeColor = Color.Black;
        }

        private void txttrchrg_Enter(object sender, EventArgs e)
        {
            txttrchrg.BackColor = Color.FromArgb(194, 232, 237);
            txttrchrg.ForeColor = Color.Blue;
        }

        private void txtNetAmt_Enter(object sender, EventArgs e)
        {
            txtNetAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtNetAmt.ForeColor = Color.Blue;
        }

        private void txtNetAmt_Leave(object sender, EventArgs e)
        {
            txtNetAmt.BackColor = Color.White;
            txtNetAmt.ForeColor = Color.Black;
        }

        private void txtRoundOff_Enter(object sender, EventArgs e)
        {
            txtRoundOff.BackColor = Color.FromArgb(194, 232, 237);
            txtRoundOff.ForeColor = Color.Blue;
        }

        private void txtRoundOff_Leave(object sender, EventArgs e)
        {
            txtRoundOff.BackColor = Color.White;
            txtRoundOff.ForeColor = Color.Black;
        }

        private void txtPaidAmt_Enter(object sender, EventArgs e)
        {
            txtPaidAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtPaidAmt.ForeColor = Color.Blue;
        }

        private void txtRemainingAmt_Leave(object sender, EventArgs e)
        {
            txtRemainingAmt.BackColor = Color.White;
            txtRemainingAmt.ForeColor = Color.Black;
        }

        private void txtRemainingAmt_Enter(object sender, EventArgs e)
        {
            txtRemainingAmt.BackColor = Color.FromArgb(194, 232, 237);
            txtRemainingAmt.ForeColor = Color.Blue;
        }

        private void txthmchrg_Enter(object sender, EventArgs e)
        {
            txthmchrg.BackColor = Color.FromArgb(194, 232, 237);
            txthmchrg.ForeColor = Color.Blue;
        }

        private void txthmchrg_Leave(object sender, EventArgs e)
        {
            txthmchrg.BackColor = Color.White;
            txthmchrg.ForeColor = Color.Black;
        }

        private void dtpSupply_Enter(object sender, EventArgs e)
        {
            dtpSupply.BackColor = Color.FromArgb(194, 232, 237);
            dtpSupply.ForeColor = Color.Blue;
        }

        private void dtpSupply_Leave(object sender, EventArgs e)
        {
            dtpSupply.BackColor = Color.White;
            dtpSupply.ForeColor = Color.Black;
        }

        private void dtpPoDate_Enter(object sender, EventArgs e)
        {
            dtpPoDate.BackColor = Color.FromArgb(194, 232, 237);
            dtpPoDate.ForeColor = Color.Blue;
        }

        private void dtpPoDate_Leave(object sender, EventArgs e)
        {
            dtpPoDate.BackColor = Color.White;
            dtpPoDate.ForeColor = Color.Black;
        }

        private void txtpSpcDisc_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtpSpcDisc.Text != "")
                {
                    if (Convert.ToDecimal(txtpSpcDisc.Text) <= 100)
                        getGstCalculation();
                    else
                    {
                        MessageBox.Show("Enter discount between 0 to 100 %.", "Warning");
                        txtpSpcDisc.Text = "0";
                        this.ActiveControl = txtpSpcDisc;
                    }
                }
                else
                {
                    //txtpSpcDisc.Text = "0";
                    this.ActiveControl = txtpSpcDisc;
                }
            }
            catch (Exception)
            {
                txtpSpcDisc.Text = "0";
                this.ActiveControl = txtpSpcDisc;
            }
        }

        private void txtpCess_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtpCess.Text != "")
                {
                    if (Convert.ToDecimal(txtpCess.Text) <= 100)
                        getGstCalculation();
                    else
                    {
                        MessageBox.Show("Enter Discount between 0 to 100 %.", "Warning");
                        txtpCess.Text = "0";
                        this.ActiveControl = txtpCess;
                    }
                }
                else
                {
                    //txtpCess.Text = "0";
                    this.ActiveControl = txtpCess;
                }
            }
            catch (Exception)
            {
                txtpCess.Text = "0";
                this.ActiveControl = txtpCess;
            }
        }

        private void txtpdisAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtpdisAmt.Text != "")
                    getGstCalculation();
                else
                {
                    txtpdisAmt.Text = "0";
                    //this.ActiveControl = txtpdisAmt;
                }
            }
            catch (Exception)
            {
                txtpdisAmt.Text = "0";
                //this.ActiveControl = txtpdisAmt;
            }
        }

        private void txtpdiscount_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar > 47 && e.KeyChar < 58) || e.KeyChar == 8)
                flgdiscountchange = false;
        }

        private void cmbsgst_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbsgst.SelectedIndex > 0)
                {
                    txtpTotalAmt.Text = "0";
                    cmbigst.Enabled = false;
                    getGstCalculation();
                    cmbcgst.SelectedValue = cmbsgst.SelectedValue;
                }
                else
                {
                    lblpvat.Text = "0";
                    getGstCalculation();
                    cmbcgst.SelectedValue = cmbsgst.SelectedValue;
                    cmbigst.Enabled = true;
                }
            }
            catch (Exception)
            { }
        }

        private void cmbcgst_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbcgst.SelectedIndex > 0)
                {
                    cmbigst.Enabled = false;
                    getGstCalculation();
                    cmbsgst.SelectedValue = cmbcgst.SelectedValue;
                }
                else
                {
                    lblCGST.Text = "0";
                    getGstCalculation();
                    cmbsgst.SelectedValue = cmbcgst.SelectedValue;
                    cmbigst.Enabled = true;
                }
            }
            catch (Exception)
            { }
        }

        private void cmbigst_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbigst.SelectedIndex > 0)
                {
                    cmbsgst.SelectedIndex = 0;
                    cmbcgst.SelectedIndex = 0;
                    cmbsgst.Enabled = false;
                    cmbcgst.Enabled = false;
                    getGstCalculation();
                }
                else
                {
                    lblIGST.Text = "0";
                    getGstCalculation();
                    cmbsgst.Enabled = true;
                    cmbcgst.Enabled = true;
                }
            }
            catch (Exception)
            { }
        }

        private void txtprefixproduct_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtprefixproduct.Text != "")
            {
                PrefixToBind = true;
                txtProductname.Text = txtprefixproduct.Text;
                txtprefixproduct.Visible = false;
                this.ActiveControl = txtProductname;
                if (txtProductname.Text != "")
                    this.ActiveControl = cmbUnit;
                else
                    this.ActiveControl = txtProductname;
            }
        }

        private void cmbPrefix_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                PrefixToBind = false;
                if (cmbPrefix.Text != "" && cmbPrefix.SelectedIndex != 0)
                {
                    getProductsbyPrefix(cmbPrefix.Text);
                    this.ActiveControl = txtprefixproduct;
                }
                else
                    this.ActiveControl = txtProductname;
            }
            if (Control.ModifierKeys == Keys.Alt)
            {
                if (e.KeyCode == Keys.N)
                {
                    frmProductInformation product = new frmProductInformation();
                    product.ShowDialog();
                    fillcombo();
                    this.ActiveControl = cmbPrefix;
                }
            }
        }

        private void dtpbilldate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = cmbcustomername;
        }

        private void cmbUnit_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtQuantity;
            if (Control.ModifierKeys == Keys.Alt)
            {
                if (e.KeyCode == Keys.N)
                {
                    frmUnitInformation unit = new frmUnitInformation();
                    unit.ShowDialog();
                }
            }
        }

        private void txtrate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtpdiscount;
        }

        private void txtSubtitle_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = cmbUnit;
        }

        private void txtpSpcDisc_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = btnAdd;
        }

        private void cmbsgst_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = cmbcgst;
        }

        private void cmbcgst_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtpCess;
        }

        private void txtpCess_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = btnAdd;
        }

        private void txtBillReceiptNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = dtpPoDate;
        }

        private void dtpPoDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtmannualDCNo;
        }

        private void txtmannualDCNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = dtpSupply;
        }

        private void dtpSupply_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = cmbState;
        }

        private void cmbState_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = cmbShipParty;
        }

        private void cmbShipParty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtNarration;
        }

        private void txtNarration_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = dtppaymentdate;
        }

        private void dtppaymentdate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtTransporter;
        }

        private void txtTransporter_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtVehicletype;
        }

        private void txtVehicletype_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtVehicleNo;
        }

        private void btnclosepanel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtDiscount;
        }

        private void txtDiscount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtPaidAmt;
        }

        private void txttrchrg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txthmchrg;
        }

        private void txthmchrg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtPaidAmt;
        }

        private void btnsave_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = dtpbilldate;
        }

        private void btnnew_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = dtpbilldate;
        }

        private void txtpdiscount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                this.ActiveControl = txtpSpcDisc;
        }

        private void txtPaidAmt_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    Setting sdata = new Setting();
                    if (sdata.ShowTenderCash == "Y")
                        this.ActiveControl = txtTendercash;
                    else
                        this.ActiveControl = btnsave;
                }
            }
            catch (Exception) { }
        }

        private void txtpCess_Enter(object sender, EventArgs e)
        {
            txtpCess.BackColor = Color.FromArgb(194, 232, 237);
            txtpCess.ForeColor = Color.Blue;
        }

        private void txtpCess_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtpCess.Text == "")
                    txtpCess.Text = "0";
            }
            catch (Exception)
            { }
            txtpCess.BackColor = Color.White;
            txtpCess.ForeColor = Color.Black;
        }

        private void txtQuantity_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            try
            {
                int i = e.KeyChar;
                if (i == 46 || (i >= 48 && i <= 57) || i == 8)
                { }
                else
                    e.Handled = true;
            }
            catch (Exception)
            { }
        }

        private void cmbPrefix_MouseClick(object sender, MouseEventArgs e)
        {
            PrefixToBind = false;
        }

        private void txtVehicleNo_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                    this.ActiveControl = btnclosepanel;
            }
            catch (Exception)
            { }
        }

        private void txtSubtitle_TextChanged(object sender, EventArgs e)
        {
            try
            {
                TextBox tb = sender as TextBox;
                if (tb != null)
                {
                    int pos = tb.SelectionStart;
                    int length = tb.Text.Length;
                    tb.Text = tb.Text.Replace(",", "");
                    int diff = length - tb.Text.Length;
                    tb.SelectionStart = pos == 0 || diff == 0 ? pos : pos - diff;
                }
            }
            catch (Exception)
            { }
        }

        private void chkCust_CheckedChanged(object sender, EventArgs e)
        {
            if (chkCust.Checked == true)
            {
                copyCount++;
                if (CopyInput < copyCount)
                {
                    MessageBox.Show("Select only " + CopyInput + " Copy.");
                    chkCust.Checked = false;
                    copyCount--;
                }
            }
            else
                copyCount--;
        }

        private void chkTrans_CheckedChanged(object sender, EventArgs e)
        {
            if (chkTrans.Checked == true)
            {
                copyCount++;
                if (CopyInput < copyCount)
                {
                    MessageBox.Show("Select only " + CopyInput + " Copy.");
                    chkTrans.Checked = false;
                    copyCount--;
                }
            }
            else
                copyCount--;
        }

        private void chkSend_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSend.Checked == true)
            {
                copyCount++;
                if (CopyInput < copyCount)
                {
                    MessageBox.Show("Select only " + CopyInput + " Copy.");
                    chkSend.Checked = false;
                    copyCount--;
                }
            }
            else
                copyCount--;
        }

        private void btnCOk_Click(object sender, EventArgs e)
        {
            pnlCopies.Visible = false;
            btnprint.Enabled = false;
            CopyString = "";
            if (Convert.ToInt32(input_Copies) > 3)
            {
                MessageBox.Show("Copies should not be more than 3", "Warning");
                input_Copies = "0";
            }
            else
            {
                if (Convert.ToInt32(input_Copies) == 1)
                {
                    chkCust.Checked = true;
                    if (chkCust.Checked == true)
                        CopyString = "Original Copy";
                    if (chkTrans.Checked == true)
                        CopyString = "Transporter Copy";
                    if (chkSend.Checked == true)
                        CopyString = "Sender Copy";
                }
                if (Convert.ToInt32(input_Copies) == 2)
                {
                    if (chkCust.Checked == true)
                    {
                        if (CopyString != "")
                            CopyString = CopyString + "," + "Original Copy";
                        else
                            CopyString = "Original Copy";
                    }
                    if (chkTrans.Checked == true)
                    {
                        if (CopyString != "")
                            CopyString = CopyString + "," + "Transporter Copy";
                        else
                            CopyString = "Transporter Copy";
                    }
                    if (chkSend.Checked == true)
                    {
                        if (CopyString != "")
                            CopyString = CopyString + "," + "Sender Copy";
                        else
                            CopyString = "Sender Copy";
                    }
                }
                if (Convert.ToInt32(input_Copies) == 3)
                    CopyString = "Original Copy,Transporter Copy,Sender Copy";
            }

            string[] splitcopies;
            for (int i = 1; i <= Convert.ToInt32(input_Copies); i++)
            {
                string copyType = "";
                if (CopyString.Contains(','))
                {
                    splitcopies = CopyString.Split(',');
                    copyType = splitcopies[i - 1];
                }
                else
                    copyType = CopyString;
                if (showPrintPreview == true)
                {
                    if (printUnderComposition == true)
                    {
                        RptCustomerBillCopmpositionScheme custrpt = new RptCustomerBillCopmpositionScheme(custbillno, copyType);
                        custrpt.ShowDialog();
                        custrpt.Dispose();
                    }
                    else
                    {
                        RptCustomerbill custrpt = new RptCustomerbill(custbillno, input, copyType);
                        custrpt.ShowDialog();
                        custrpt.Dispose();
                    }
                }
                else
                {
                    billList.Clear();
                    billList.Add(BillMasterID);
                    RptCustomerbill custrpt = new RptCustomerbill(billList, FlagData, input, copyType);
                }
            }
            btnprint.Enabled = true;
        }

        private void dtgvFormulae_Leave(object sender, EventArgs e)
        {
            getFormuleQuantity();//  changes for last cell value is not getting 10/7/2018 by dhanashri
        }

        private void dtgvFormulae_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex != dtgvFormulae.Columns.Count - 1)
            {
                string productformulae = "";
                try
                {
                    if (txtProductname.Text != "")
                    {
                        string proname = "", company = "", unit = "";
                        if ((txtProductname.Text).Contains(","))
                        {
                            try
                            {
                                proname = txtProductname.Text.Trim().Split(',')[0];
                                company = txtProductname.Text.Trim().Split(',')[1];
                                unit = txtProductname.Text.Trim().Split(',')[2];
                            }
                            catch (Exception)
                            { }
                            if (ProductDataGlobal == null)
                            {
                                ProductRepository productrepo = new ProductRepository();
                                ProductDataGlobal = productrepo.GetAll().Where(t => t.ProductName == proname && t.ManufactureCompany == company && t.Uniti == unit).FirstOrDefault();
                            }
                            if (ProductDataGlobal == null)
                            {
                                MessageBox.Show("This Product Name Is Not Valid.", "Warning");
                                txtProductname.Text = "";
                                this.ActiveControl = txtProductname;
                            }
                            else
                            {
                                if (ProductDataGlobal.Formulae != "" || ProductDataGlobal.Formulae != null)
                                    productformulae = ProductDataGlobal.Formulae.ToString();
                            }
                        }
                    }
                    string x = null;
                    for (int i = 0; i < productformulae.Length; i++)
                    {
                        string specialChar = @"+-*/";
                        foreach (var item in specialChar)
                        {
                            if (productformulae[i].ToString().Contains(item))
                            {
                                if (x == null)
                                    x = productformulae[i].ToString();
                                else
                                    x = x + ',' + productformulae[i].ToString();
                            }
                        }
                    }
                    string[] arraystr = new string[x.Length];
                    arraystr = x.ToString().Split(',');
                    decimal maxQtySlab = 0;
                    if (getSlabUnit == "In")
                    {
                        for (int m = 0; m < 20; m++)
                        {
                            maxQtySlab += qtySlab;
                            arrSlab[m] = maxQtySlab;
                        }
                    }
                    else
                    {
                        for (int m = 0; m < 20; m++)
                        {
                            maxQtySlab += (qtySlab * 12);  //1 ft
                            arrSlab[m] = maxQtySlab;
                        }
                    }
                    decimal calci = 0;
                    calci = getProperSlab(e.RowIndex, arraystr);  //get slab quantity
                    try
                    {
                        RateDecrease = dtgvFormulae.Rows[e.RowIndex].Cells["Rate(-)"].Value.ToString();
                        if (RateDecrease == "") { RateDecrease = "0"; }
                        if (Convert.ToDecimal(RateDecrease) != 0)
                            calci = getProperSlab(e.RowIndex, arraystr, Convert.ToDecimal(RateDecrease));
                        SizeSpecString = SizeSpecString + ",RD:" + RateDecrease;
                    }
                    catch (Exception)
                    {
                        RateDecrease = "0";
                    }
                    try
                    {
                        RateIncrease = dtgvFormulae.Rows[e.RowIndex].Cells["Rate(+)"].Value.ToString();
                        if (RateIncrease == "") { RateIncrease = "0"; }
                        if (Convert.ToDecimal(RateIncrease) != 0)
                            calci = getProperSlab(e.RowIndex, arraystr, 0, Convert.ToDecimal(RateIncrease));
                        SizeSpecString = SizeSpecString + ",RI:" + RateIncrease;
                    }
                    catch (Exception)
                    {
                        RateIncrease = "0";
                    }
                    string strName = "";
                    try
                    {
                        strName = dtgvFormulae.Rows[e.RowIndex].Cells["Name"].Value.ToString();
                        if (!string.IsNullOrEmpty(strName))
                            SizeSpecString = SizeSpecString + ",Name:" + strName;
                    }
                    catch (Exception)
                    {
                        strName = "";
                    }
                    if (slabGroup == 'F')
                        dtgvFormulae.Rows[e.RowIndex].Cells[dtgvFormulae.Columns.Count - 4].Value = Convert.ToString(Math.Round(calci, 2, MidpointRounding.AwayFromZero));
                    else
                        dtgvFormulae.Rows[e.RowIndex].Cells[dtgvFormulae.Columns.Count - 2].Value = Convert.ToString(Math.Round(calci, 2, MidpointRounding.AwayFromZero));
                }
                catch (Exception)
                { }
            }
        }

        private void txtprefixproduct_Leave(object sender, EventArgs e)
        {
            try
            {
                txtprefixproduct.Visible = false;
                this.ActiveControl = cmbPrefix;
            }
            catch (Exception)
            { }
        }

        private void dtgvFormulae_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex == dtgvFormulae.RowCount - 1 && e.ColumnIndex == dtgvFormulae.ColumnCount - 1)
                    intcell = 1;
                else
                    intcell = 0;
            }
            catch (Exception)
            { }
        }

        private void dtgvFormulae_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (intcell == 1)
                {
                    if (e.KeyCode == Keys.Tab)
                        e.Handled = true;
                }
            }
            catch (Exception)
            { }
        }

        private void dtgvFormulae_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (intcell == 1)
                {
                    if (e.KeyChar == (char)Keys.Tab)
                        e.Handled = true;
                }
            }
            catch (Exception)
            { }
        }

        private void txtTendercash_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtTendercash.Text))
                {
                    txtreturncash.Text = "0";
                    decimal a = Convert.ToDecimal(txtPaidAmt.Text), b = Convert.ToDecimal(txtTendercash.Text);
                    if (a <= b)
                        txtreturncash.Text = Convert.ToString(Math.Round((b - a), 2, MidpointRounding.AwayFromZero));
                }
                else
                {
                    txtTendercash.Text = "0";
                    this.ActiveControl = txtTendercash;
                }
            }
            catch (Exception) { }
        }

        private void cmbInvoiceSeries_Leave(object sender, EventArgs e)
        {
            try
            {
                if (btnUpdate.Enabled == true && emptyUserSeries == true)
                    getMaxSeries();
                else if (btnUpdate.Enabled != true)
                    getMaxSeries();
                if (cmbInvoiceSeries.Text != "")
                    this.ActiveControl = cmbcustomername;
            }
            catch (Exception)
            { }
        }

        private void cmbGroup_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (Control.ModifierKeys == Keys.Alt)
                {
                    if (e.KeyCode == Keys.N)
                    {
                        frmGroupMaster group = new frmGroupMaster();
                        group.ShowDialog();
                        fillgroupmaster();
                        this.ActiveControl = cmbGroup;
                    }
                }
                try
                {
                    if (e.KeyData == Keys.Enter)
                        this.ActiveControl = cmbPrefix;
                }
                catch (Exception) { }
            }
            catch (Exception) { }
        }

        private void chkCustomerNameDefault_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyData == Keys.Enter)
                    this.ActiveControl = cmbGroup;
            }
            catch (Exception) { }
        }

        private void txtTendercash_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
                this.ActiveControl = txtreturncash;
        }

        private void cmbInvoiceSeries_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
                this.ActiveControl = cmbcustomername;
        }

        private void chkBySwipe_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chkBySwipe.Checked == true)
                {
                    if (txtPaidAmt.Text.Trim() != "0" && txtPaidAmt.Text.Trim() != "00" && txtPaidAmt.Text.Trim() != "000" && txtPaidAmt.Text.Trim() != "")
                    {
                        label42.Enabled = true;
                        label18.Enabled = true;
                        cmbbank.Enabled = true;
                        txtbankname.Enabled = true;
                    }
                    else
                    {
                        MessageBox.Show("For Cheque Payment Paid Amount " + Environment.NewLine + " Greater than Zero.", "Success");
                        chkBySwipe.Checked = false;
                        this.ActiveControl = txtPaidAmt;
                    }
                }
                else
                {
                    cmbbank.Enabled = false;
                    txtbankname.Enabled = false;
                    chkcheque.Checked = false;
                    txtchequeno.Enabled = false;
                }
            }
            catch (Exception)
            { }
        }

        private void btnImport_Click(object sender, EventArgs e)
        {
            try
            {
                string filePath = string.Empty;
                string fileExt = string.Empty;
                OpenFileDialog file = new OpenFileDialog(); //open dialog to choose file  
                if (file.ShowDialog() == System.Windows.Forms.DialogResult.OK) //if there is a file choosen by the user  
                {
                    filePath = file.FileName; //get the path of the file  
                    fileExt = Path.GetExtension(filePath); //get the file extension  
                    if (fileExt.CompareTo(".xls") == 0 || fileExt.CompareTo(".xlsx") == 0)
                    {
                        try
                        {
                            DataTable dtExcel = new DataTable();
                            dtExcel = ReadExcelMonthly(filePath, fileExt); //read excel file  
                            maxbillidtype(1);
                            MessageBox.Show("Import Excel file sucessfully.", "Success");
                            progressBar1.Visible = false;
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message.ToString());
                        }
                    }
                    else
                        MessageBox.Show("Please choose .xls or .xlsx file only.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error); //custom messageBox to show error  
                }
            }
            catch (Exception)
            { }
        }

        private void btnExport_Click(object sender, EventArgs e)
        {
            Excel();
            DataSet ds = new DataSet();               //                       0                       1                           2                                 3                            4                          5                         6                         7                                                                   8                            9                       
            SqlDataAdapter da = new SqlDataAdapter("SELECT CustomerBillDetail.Id, CustomerBillDetail.BillNo, CustomerBillDetail.ProductId, CustomerBillDetail.CompanyName ,CustomerBillDetail.Quantity, CustomerBillDetail.Rate, CustomerBillDetail.Amount, CustomerBillDetail.Unit, (CustomerBillDetail.Discount* CustomerBillDetail.Rate/100) as disc, CustomerBillDetail.TotalAmount," +
                //                     10                           11                       12                           13                        14
                  "CustomerBillDetail.SGstAmt, CustomerBillDetail.Status, CustomerBillDetail.Code, CustomerBillDetail.SaleUnit, CustomerBillDetail.SGstPercent, " +
                //                    15                          16                                                                           17                       18                            19                           20    
                  "CustomerBillDetail.CGstAmt, CustomerBillDetail.CGstPercent,(CustomerBillDetail.CGstPercent+CustomerBillDetail.SGstPercent)as gst, CustomerBillDetail.IGstAmt, CustomerBillDetail.IGstPercent, CustomerBillDetail.Vat," +
                //                    21                           22                                                                                                                                   23                            24
                  "CustomerBillDetail.HSNCode,  CustomerBillDetail.SaleRate, (CustomerBillDetail.SpcDisc* (CustomerBillDetail.Rate-(CustomerBillDetail.Discount* CustomerBillDetail.Rate/100))/100) as specialdisc, CustomerBillDetail.Cess," +
                //                                             25                                                                                                                                                              26                                 27                          28                           29                       30
                  "ISNULL( CustomerBillDetail.CessAmt,0.00) as cessamt, ISNULL(CustomerBillDetail.SGstAmt + CustomerBillDetail.CGstAmt+CustomerBillDetail.CessAmt,CustomerBillDetail.SGstAmt + CustomerBillDetail.CGstAmt ) AS taxableamount , CustomerBillDetail.Barcode, CustomerBillDetail.Expiry, CustomerBillDetail.BatchNo, CustomerBillMaster.Id ," +
                //                    31                         32                             33                             34
                  "CustomerBillMaster.BillNo , CustomerBillMaster.Billdate, CustomerBillMaster.CustomerId, CustomerBillMaster.CustomerName," +
                //                    35                              36                            37                        38
                  "CustomerBillMaster.TotalAmount , CustomerBillMaster.Discount , CustomerBillMaster.Free, CustomerBillMaster.NetAmount, " +
                //                    39                               40                               41                       42                       43
                  "CustomerBillMaster.PaidAmount, CustomerBillMaster.RemainingAmount, CustomerBillMaster.Vat , CustomerBillMaster.DcNo, CustomerBillMaster.DcDate," +
                //                    44                               45                            46                            47
                  "CustomerBillMaster.PaymentDate, CustomerBillMaster.QuotationNo, CustomerBillMaster.YN, CustomerBillMaster.TransportCharges," +
                //                    48                               49                            50                                      51
                  "CustomerBillMaster.HamaliCharges, CustomerBillMaster.BillType, CustomerBillMaster.BillStatus, CustomerBillMaster.TransactionYear, " +
                //                     52                           53                         54                             55                            56
                  "CustomerBillMaster.RoundOff, CustomerBillMaster.CompId, CustomerBillMaster.BillRcptNo, CustomerBillMaster.Narration, CustomerBillMaster.ShipCustomerId, " +
                //                     57                             58                               59                              60                           61
                  "CustomerBillMaster.SupplyDate, CustomerBillMaster.SupplyPlace, CustomerBillMaster.VehicleType, CustomerBillMaster.VehicleNo, CustomerBillMaster.Transporter," +
                //                     62                            63                           64                              65                           66
                  "CustomerBillMaster.PoDate, CustomerBillMaster.MannualDCNo, CustomerBillMaster.TenderCash, CustomerBillMaster.ReturnCash, CustomerBillMaster.CatId," +
                //                     67                              68                               69                            70                             71                               72                 
                  "CustomerBillMaster.CategoryName, CustomerBillMaster.CustomerType, CustomerBillMaster.UserSeries,ProductInformation.Category, ProductInformation.WithBatch, ProductInformation.WithBatchAndExpiry, " +
                //                     73                                74                               75                             76                            77                             78                   79
                  "ProductInformation.BarcodeStatus,CustomerInformation.CustomerCode,CustomerInformation.CustomerType,ProductInformation.ProductCode,ProductInformation.Prefix,CustomerInformation.BuyerTinNo,GroupMaster.GroupMasterName fROM  CustomerBillDetail INNER JOIN CustomerBillMaster ON CustomerBillMaster.Id = CustomerBillDetail.BillNo INNER JOIN ProductInformation ON (CustomerBillDetail.ProductId = ProductInformation.ProductName and CustomerBillDetail.CompanyName = ProductInformation.ManufactureCompany and CustomerBillDetail.Unit = ProductInformation.Uniti) INNER JOIN " +
                  "CustomerInformation ON CustomerBillMaster.CustomerId = CustomerInformation.CustomerID left outer JOIN GroupMaster ON ProductInformation.GroupMasterId = GroupMaster.GroupMasterId where TransactionYear='" + CommonMethod.TransactionYear + "' order by  CustomerBillDetail.BillNo", db.Connection);
            da.Fill(ds, "CustomerBillDetail");
            da = new SqlDataAdapter("SELECT CustomerName, SupplyPlace FROM CustomerBillMaster where CustomerBillMaster.BillNo='" + txtbillno.Text + "' and TransactionYear='" + CommonMethod.TransactionYear + "'", db.Connection);
            da.Fill(ds, "CustomerInfo");
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            { //consttructor code here
                try
                {
                    ExportToExcel(ds, saveFileDialog.FileName);
                }
                catch { }
            }
        }

        private void txtBarcode_TextChanged(object sender, EventArgs e)
        {
            try
            {
                CalculateAfterStopTyping();
            }
            catch (Exception)
            { }
        }

        private void lblpSpcDisc_Leave(object sender, EventArgs e)
        {
            try
            {
                if (lblpSpcDisc.Text != "" && txtAmount.Text != "")
                {
                    if (Convert.ToDecimal(lblpSpcDisc.Text) <= Convert.ToDecimal(txtAmount.Text))
                    {
                        try
                        {
                            decimal total, damt = 0, pdamt = 0;
                            total = Convert.ToDecimal(txtQuantity.Text) * Convert.ToDecimal(lblBasicRate.Text);

                            if (txtpdiscount.Text != "")
                                pdamt = (total * Convert.ToDecimal(txtpdiscount.Text) / 100);

                            if (lblpSpcDisc.Text != "")
                            {
                                damt = Convert.ToDecimal(lblpSpcDisc.Text);
                                decimal disc = damt * 100 / (total - pdamt);
                                txtpSpcDisc.Text = Convert.ToString(Math.Round(disc, 5, MidpointRounding.AwayFromZero));
                            }
                        }
                        catch (Exception)
                        { }
                    }
                    else
                    {
                        txtpdisAmt.Text = "0";
                        txtpdiscount.Text = "0";
                        this.ActiveControl = txtpdisAmt;
                    }
                }
                else
                {
                    txtpdisAmt.Text = "0";
                    txtpdiscount.Text = "0";
                    this.ActiveControl = txtpdisAmt;
                }
                txtpdisAmt.BackColor = Color.White;
                txtpdisAmt.ForeColor = Color.Black;
            }
            catch (Exception)
            { }
        }

        private void btnCustForm_Click(object sender, EventArgs e)
        {
            try
            {
                frmcustomer compinfo = new frmcustomer();
                compinfo.WindowState = System.Windows.Forms.FormWindowState.Normal;
                compinfo.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
                compinfo.ShowDialog();
                customerdata();
                this.ActiveControl = cmbcustomername;
            }
            catch (Exception)
            { }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            updateCustomerBill();
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            try
            {
                if ((MessageBox.Show("Are you sure to Delete this Bill ?", "Delete", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK))
                {
                    AIOInventorySystem.Data.Model.Stock sdata = new Data.Model.Stock();
                    string productname = "", unit = "", company = "", alternateunit = "", CDType = "";
                    decimal Quantity = 0, newsqty = 0, sqty = 0, pqty = 0, prqty = 0, newrqty = 0, rqty = 0, srqty = 0, dqty = 0, oqty = 0;
                    DataTable dt;
                    CustomerBillMasterRepository Custmasterrepo = new CustomerBillMasterRepository();
                    var custData = Custmasterrepo.GetAll().Where(t => t.BillNo == Convert.ToString(custbillno) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                    if (custData != null)
                    {
                        RemainingPaymentRepository remainingRepo1 = new RemainingPaymentRepository();
                        var remainingData1 = remainingRepo1.GetAll().Where(t => t.BillId == Convert.ToString(custbillno) && t.Type == "Receipt" && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                        var remainingData3 = remainingRepo1.GetAll().Where(t => t.BillId == Convert.ToString(custbillno) && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Type == "Bill" && t.PaidAmt != 0 && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear && (t.PaymentMode == "Cash" || t.PaymentMode == "Cheque")).FirstOrDefault();
                        CustCreditDebitNoteMasterRepository creditdebitRepo = new CustCreditDebitNoteMasterRepository();
                        var CDCustData = creditdebitRepo.GetAll().Where(t => t.BillNo == custbillno && t.CustomerName == cmbcustomername.Text && t.Billdate.Value.ToShortDateString() == custData.Billdate.Value.ToShortDateString() && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                        GoodMasterRepository saleretunRepo = new GoodMasterRepository();
                        var returnData = saleretunRepo.GetAll().Where(t => t.BillNo == custbillno && t.CustomerName == cmbcustomername.Text && t.Billdate.Value.ToShortDateString() == custData.Billdate.Value.ToShortDateString() && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                        if (remainingData1 != null || CDCustData != null || returnData != null || remainingData3 != null)
                        {
                            if (remainingData1 != null || remainingData3 != null)
                            {
                                MessageBox.Show("You can't delete this Invoice," + Environment.NewLine + " because this bill was Paid.", "Warning");
                                this.ActiveControl = btnUpdate;
                            }
                            else if (CDCustData != null)
                            {
                                CDType = CDCustData.CDType;
                                MessageBox.Show("You can't delete this Invoice," + Environment.NewLine + " because this bill was " + CDType + ".", "Warning");
                                this.ActiveControl = btnUpdate;
                            }
                            else
                            {
                                MessageBox.Show("You can't delete this Invoice," + Environment.NewLine + " because this bill was sale return.", "Warning");
                                this.ActiveControl = btnUpdate;
                            }
                        }
                        else
                        {
                            // add details for history table
                            try
                            {
                                DeleteHistoryTableRepository historyRepo = new DeleteHistoryTableRepository();
                                DeleteHistoryTable historydata = new DeleteHistoryTable();
                                historydata.DeleteType = "Invoice";
                                historydata.BillNo = Convert.ToString(custData.BillNo);
                                historydata.SupplierOrCustomerName = Convert.ToString(custData.CustomerName);
                                historydata.Amount = Convert.ToDecimal(custData.NetAmount);
                                historydata.CurrentDate = DateTime.Now.Date;
                                historydata.BillDate = Convert.ToDateTime(custData.Billdate);
                                historydata.CompId = CommonMethod.CompId;
                                historydata.TransactionYear = CommonMethod.TransactionYear;
                                historyRepo.Add(historydata);
                                historyRepo.Save();
                            }
                            catch (Exception) { }
                            int custId = Convert.ToInt32(custData.Id);
                            int QuotationNo = 0, DCNo = 0;
                            if (custData.QuotationNo != "")
                                QuotationNo = Convert.ToInt32(custData.QuotationNo);
                            else
                                QuotationNo = 0;
                            if (custData.DcNo != null)
                                DCNo = Convert.ToInt32(custData.DcNo);
                            else
                                DCNo = 0;
                            if (QuotationNo != 0)
                            {
                                QuotationMasterRepository QMastRepo = new QuotationMasterRepository();
                                var QMdata = QMastRepo.GetAll().Where(t => t.QuotationNo == QuotationNo && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                if (QMdata != null)
                                {
                                    QuotationMasterRepository QutMastRepo = new QuotationMasterRepository();
                                    QuotationMaster Qdata = QutMastRepo.GetById(QMdata.Id);
                                    Qdata.Status = 1;
                                    QutMastRepo.Edit(Qdata);
                                    QutMastRepo.Save();
                                    QutMastRepo.Dispose();
                                }
                                QMastRepo.Dispose();
                            }
                            if (DCNo != 0)
                            {
                                DeliveryChallanRepository DCmastrepo = new DeliveryChallanRepository();
                                var DCdata = DCmastrepo.GetAll().Where(t => t.DeliveryChallanNo == DCNo && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                if (DCdata != null)
                                {
                                    DeliveryChallanRepository DCRepo = new DeliveryChallanRepository();
                                    DeliveryChallanMaster DCMdata = DCRepo.GetById(DCdata.Id);
                                    DCMdata.Status = 1;
                                    DCRepo.Edit(DCMdata);
                                    DCRepo.Save();
                                    DCRepo.Dispose();
                                }
                                DCmastrepo.Dispose();
                            }
                            RemainingPaymentRepository remainingRepo = new RemainingPaymentRepository();
                            var remainingData = remainingRepo.GetAll().Where(t => t.BillId == Convert.ToString(custbillno) && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Type == "Bill" && t.PaidAmt == 0 && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                            if (remainingData != null)
                            {
                                int ReceiptId = remainingRepo.GetAll().Where(t => t.BillId == Convert.ToString(custbillno) && t.CustomerId == Convert.ToInt32(cmbcustomername.SelectedValue) && t.Type == "Bill" && t.PaidAmt == 0 && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault().Id;
                                RemainingPaymentRepository remRepo = new RemainingPaymentRepository();
                                RemainingPayment remdata = remRepo.GetById(ReceiptId);
                                remRepo.Remove(remdata);
                                remRepo.Save();
                                decimal decremamt = 0;
                                RemainingPaymentRepository remainingpayrepo1 = new RemainingPaymentRepository();
                                RemainingPayment remainingdata1 = new RemainingPayment();
                                remainingdata1 = remainingpayrepo1.GetAll().Where(t => t.CustomerId == Convert.ToInt32(remdata.CustomerId) && t.Id < remdata.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).LastOrDefault();
                                if (remainingdata1 != null)
                                    decremamt = Convert.ToDecimal(remainingdata1.RemainingAmt);
                                else
                                    decremamt = 0;
                                RemainingPaymentRepository remainingpayrepo2 = new RemainingPaymentRepository();
                                List<RemainingPayment> remainingdata2 = new List<RemainingPayment>();
                                remainingdata2 = remainingpayrepo2.GetAll().Where(t => t.CustomerId == Convert.ToInt32(remdata.CustomerId) && t.Id > remdata.Id && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).ToList();
                                int i = 0;
                                foreach (var item in remainingdata2)
                                {
                                    item.RemainingAmt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                                    decremamt = Convert.ToDecimal(item.NetAmt) - Convert.ToDecimal(item.PaidAmt) + decremamt;
                                    remainingpayrepo2.Edit(item);
                                    remainingpayrepo2.Save();
                                    i++;
                                }
                            }
                            CustomerBillDetailRepository custDetRepo = new CustomerBillDetailRepository();
                            List<CustomerBillDetail> detailList = custDetRepo.GetAll().Where(t => t.BillNo == custId).ToList();
                            if (detailList.Count != 0)
                            {
                                foreach (var item1 in detailList)
                                {
                                    int detailId = 0, updateStockId = 0;
                                    string batchno = "", expirydate = "";
                                    decimal rate = 0, BUQty = 0, BPurQty = 0, FreeQty = 0, BSRQty = 0, BRQty = 0, BPRQty = 0, netQty = 0;
                                    productname = item1.ProductId;
                                    company = item1.CompanyName;
                                    unit = item1.Unit;
                                    alternateunit = item1.SaleUnit;
                                    detailId = item1.Id;
                                    batchno = item1.BatchNo;
                                    expirydate = item1.Expiry;
                                    Quantity = Convert.ToDecimal(item1.Quantity);
                                    ManufacturingUnitInfoRepository mfgunitRepo = new ManufacturingUnitInfoRepository();
                                    var mfgdata = mfgunitRepo.GetAll().Where(t => t.BillDetailId == detailId && t.CompId == CommonMethod.CompId).FirstOrDefault();
                                    if (mfgdata != null)
                                    {
                                        ManufacturingUnitInfo unitdata = mfgunitRepo.GetById(mfgdata.ID);
                                        mfgunitRepo.Remove(unitdata);
                                        mfgunitRepo.Save();
                                    }
                                    mfgunitRepo.Dispose();
                                    getProductType(productname, company, unit);
                                    if (productentrytype == 1 || productentrytype == 2)
                                    {
                                        string[] barray = batchno.Split(',');
                                        for (int m = 0; m < barray.Length; m++)
                                        {
                                            BatchRepository batchRepo = new BatchRepository();
                                            var batchdata = batchRepo.GetAll().Where(t => t.ProductName == productname && t.ManufactureCompany == company && t.Unit == unit && t.BillId == Convert.ToString(detailId) && t.MasterBillNo == custbillno && (t.BatchNo == barray[m]) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                            if (batchdata != null)
                                            {
                                                PurchaseMasterRepository mastRepo1 = new PurchaseMasterRepository();
                                                var purData1 = mastRepo1.GetAll().Where(t => t.Id == batchdata.PorderNo && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                                if (purData1 != null)
                                                {
                                                    PurchaseDetailRepository detailrepo1 = new PurchaseDetailRepository();
                                                    var purdetaildata1 = detailrepo1.GetAll().Where(t => t.PorderNo == purData1.Id && t.ProductName == productname && t.CompanyName == company && t.Unit == unit && t.BatchNo == barray[m] && t.PurchaseMaster.CompId == CommonMethod.CompId && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                                    if (purdetaildata1 != null)
                                                    {
                                                        PReturnDetailRepository PRdetailRepo = new PReturnDetailRepository();
                                                        var PRdetdata = PRdetailRepo.GetAll().Where(t => t.POID == purdetaildata1.Id && t.ProductName == productname && t.CompanyName == company && t.Unit == unit && t.BatchNo == barray[m] && t.PurchaseReturnMaster.CompId == CommonMethod.CompId && t.PurchaseReturnMaster.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                                        if (PRdetdata != null)
                                                            BPRQty = Convert.ToDecimal(PRdetdata.Quantity);
                                                        else
                                                            BPRQty = 0;
                                                        BPurQty = Convert.ToDecimal(detailrepo1.GetAll().Where(t => t.PorderNo == purData1.Id && t.ProductName == productname && t.CompanyName == company && t.Unit == unit && t.BatchNo == barray[m] && t.PurchaseMaster.CompId == CommonMethod.CompId && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear).Sum(t => t.Quantity));
                                                        FreeQty = Convert.ToDecimal(detailrepo1.GetAll().Where(t => t.PorderNo == purData1.Id && t.ProductName == productname && t.CompanyName == company && t.Unit == unit && t.BatchNo == barray[m] && t.PurchaseMaster.CompId == CommonMethod.CompId && t.PurchaseMaster.TransactionYear == CommonMethod.TransactionYear).Sum(t => t.FreeQty));
                                                        netQty = (BPurQty + FreeQty) - BPRQty;
                                                        try
                                                        {
                                                            GoodDetailRepository SRRepo = new GoodDetailRepository();
                                                            GoodReturnDetail SRData = new GoodReturnDetail();
                                                            SRData = SRRepo.GetAll().Where(t => t.BNID == detailId && t.ProductId == productname && t.CompanyName == company && t.Unit == unit && t.BatchNo == barray[m] && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault();
                                                            BSRQty = BSRQty + Convert.ToDecimal(SRData.Quantity);
                                                        }
                                                        catch (Exception)
                                                        { }
                                                        CustomerBillMasterRepository custMRepo = new CustomerBillMasterRepository();
                                                        var custMData = custMRepo.GetAll().Where(t => t.BillNo == Convert.ToString(custbillno) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                                        CustomerBillDetailRepository custDRepo = new CustomerBillDetailRepository();
                                                        var custDetData = custDRepo.GetAll().Where(t => t.ProductId == productname && t.CompanyName == company && t.Unit == unit && (t.BatchNo == barray[m]) && t.CustomerBillMaster.CompId == CommonMethod.CompId && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                                        if (custDetData != null)
                                                            BUQty = Convert.ToDecimal(custDRepo.GetAll().Where(t => t.Id == Convert.ToInt32(detailId) && t.ProductId == productname && t.CompanyName == company && t.Unit == unit && (t.BatchNo == barray[m]) && t.CustomerBillMaster.CompId == CommonMethod.CompId && t.CustomerBillMaster.TransactionYear == CommonMethod.TransactionYear).Sum(t => t.Quantity));
                                                        BRQty = netQty - (BUQty - BSRQty);
                                                        if (BRQty != 0)
                                                        {
                                                            PurchaseDetail pdata1 = new PurchaseDetail();
                                                            pdata1 = detailrepo1.GetById(purdetaildata1.Id);
                                                            pdata1.Status = "Active";
                                                            detailrepo1.Edit(pdata1);
                                                            detailrepo1.Save();
                                                        }
                                                        else
                                                        {
                                                            PurchaseDetail pdata1 = new PurchaseDetail();
                                                            pdata1 = detailrepo1.GetById(purdetaildata1.Id);
                                                            pdata1.Status = "Inactive";
                                                            detailrepo1.Edit(pdata1);
                                                            detailrepo1.Save();
                                                        }
                                                    }
                                                }
                                                Batch bdata = batchRepo.GetById(batchdata.ID);
                                                batchRepo.Remove(bdata);
                                                batchRepo.Save();
                                            }
                                            batchRepo.Dispose();
                                        }
                                    }
                                    dt = db.GetTable("Delete  from CustomerBillDetail Where BillNo=" + custId + " and Id='" + detailId + "' ");
                                    if (productentrytype == 9)
                                    { }
                                    else if (productentrytype == 6)
                                    { }
                                    else
                                    {
                                        StockRepository stockRepo = new StockRepository();
                                        var stockdata = stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                                        if (stockdata != null)
                                        {
                                            newsqty = 0; sqty = 0; pqty = 0; prqty = 0; newrqty = 0; rqty = 0; srqty = 0; dqty = 0; oqty = 0;
                                            sqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().SaleQty);
                                            pqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().PurchaseQty);
                                            rqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().RemQty);
                                            oqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().OpeningQty);
                                            dqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().DeadQty);
                                            prqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().PurReturnQty);
                                            srqty = Convert.ToDecimal(stockRepo.GetAll().Where(t => t.ProductName == Convert.ToString(productname) && t.MfgCompany == Convert.ToString(company) && t.Unit == Convert.ToString(unit) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault().SaleReturnQty);
                                            newsqty = sqty - Quantity;
                                            newrqty = oqty + pqty - prqty - newsqty + srqty - dqty;
                                            updateStockId = stockdata.Id;
                                        }
                                        sdata = stockRepo.GetById(stockdata.Id);
                                        if (sdata != null)
                                        {
                                            sdata.ProductId = stockdata.ProductId;
                                            sdata.ProductName = productname;
                                            sdata.MfgCompany = company;
                                            sdata.Unit = unit;
                                            sdata.OpeningQty = stockdata.OpeningQty;
                                            sdata.DeadQty = stockdata.DeadQty;
                                            sdata.PurchaseQty = Convert.ToDecimal(pqty);
                                            sdata.SaleQty = Convert.ToDecimal(newsqty);
                                            sdata.RemQty = Convert.ToDecimal(newrqty);
                                            sdata.SaleReturnQty = stockdata.SaleReturnQty;
                                            sdata.PurReturnQty = stockdata.PurReturnQty;
                                            if (SetDataM.StockOn == "Purchase Rate")
                                            {
                                                try
                                                {
                                                    db.connect();
                                                    SqlCommand command = new SqlCommand("SPNewAvgPurchaseRate", db.Connection);
                                                    command.CommandType = CommandType.StoredProcedure;

                                                    command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = productname;
                                                    command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = company;
                                                    command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = unit;
                                                    command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                                    command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                                    command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                                    command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                                    SqlDataReader reader = command.ExecuteReader();
                                                    DataTable dtRate = new DataTable();
                                                    dtRate.Load(reader);
                                                    rate = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                                    db.CloseConnection();
                                                    dtRate.Dispose();
                                                }
                                                catch (Exception)
                                                { db.CloseConnection(); }
                                            }
                                            if (SetDataM.StockOn == "Sale Rate")
                                            {
                                                try
                                                {
                                                    db.connect();
                                                    SqlCommand command = new SqlCommand("SPNewAvgSaleRate", db.Connection);
                                                    command.CommandType = CommandType.StoredProcedure;

                                                    command.Parameters.Add("@ProductName", SqlDbType.VarChar).Value = productname;
                                                    command.Parameters.Add("@MfgCompany", SqlDbType.VarChar).Value = company;
                                                    command.Parameters.Add("@Unit", SqlDbType.VarChar).Value = unit;
                                                    command.Parameters.Add("@FDate", SqlDbType.VarChar).Value = '0';
                                                    command.Parameters.Add("@CDate", SqlDbType.VarChar).Value = '0';
                                                    command.Parameters.Add("@TransactionYear", SqlDbType.VarChar).Value = CommonMethod.TransactionYear;
                                                    command.Parameters.Add("@CompId", SqlDbType.Int).Value = CommonMethod.CompId;
                                                    SqlDataReader reader = command.ExecuteReader();
                                                    DataTable dtRate = new DataTable();
                                                    dtRate.Load(reader);
                                                    rate = Convert.ToDecimal(dtRate.Rows[0][0].ToString());
                                                    db.CloseConnection();
                                                    dtRate.Dispose();
                                                }
                                                catch (Exception)
                                                { db.CloseConnection(); }
                                            }
                                            sdata.ProductRate = Convert.ToDecimal(rate);
                                            sdata.CompId = CommonMethod.CompId;
                                            sdata.TransactionYear = CommonMethod.TransactionYear;
                                            sdata.Id = updateStockId;
                                            stockRepo.Edit(sdata);
                                            stockRepo.Save();
                                        }
                                    }
                                    dt.Dispose();
                                }
                            }
                            db.connect();
                            DataTable dt1 = db.GetTable("Delete from CustomerBillMaster Where Id=" + custId + " and CompId='" + CommonMethod.CompId + "' and TransactionYear='" + CommonMethod.TransactionYear + "'");
                            MessageBox.Show("Record Deleted Sucessfully.", "Success");
                            dt1.Dispose();
                            db.CloseConnection();
                            DeleteDuplicateBatchRecords();
                            GvProductInfo.Rows.Clear();
                            clear();
                            this.ActiveControl = btnnew;
                            Custmasterrepo.Dispose();
                            btnDelete.Enabled = false;
                        }
                    }
                }
            }
            catch (Exception)
            { }
        }

        private void btnSendSMS_Click(object sender, EventArgs e)
        {
            try
            {
                CustomerBillMasterRepository cBillMastRepo = new CustomerBillMasterRepository();
                decimal netamount = Convert.ToDecimal(cBillMastRepo.GetAll().Where(t => t.BillNo == billid && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault().NetAmount);
                SendSMSMannual(billid, netamount);
                cBillMastRepo.Dispose();
            }
            catch (Exception)
            { }
        }

        private void GvProductInfo_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (GvProductInfo.Rows.Count > 0)
                {
                    lblCurrentRow.Text = Convert.ToString(e.RowIndex + 1);
                    qdid = Convert.ToInt32(GvProductInfo.Rows[e.RowIndex].Cells["Id"].Value);
                    try
                    {
                        if (btnUpdate.Enabled == true && GvProductInfo.Rows[e.RowIndex].Cells["Id"].Value.ToString() != "" && GvProductInfo.Rows[e.RowIndex].Cells["Id"].Value != null)
                        {
                            CustomerBillDetail newbill = new CustomerBillDetail();
                            CustomerBillDetailRepository newbillrepo = new CustomerBillDetailRepository();
                            newbill = newbillrepo.GetAll().Where(t => t.Id == qdid).FirstOrDefault();
                            savedQuantity = Convert.ToDecimal(newbill.Quantity);
                        }
                    }
                    catch (Exception)
                    { }
                }
                barcode = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Barcodeg"].Value);
                PrefixToBind = true;
                if (GvProductInfo.Columns[e.ColumnIndex].HeaderText == "Remove")
                //if (e.ColumnIndex == 29)
                {
                    if (GvProductInfo.Rows.Count != 1 && btnsave.Enabled == false)
                    {
                        decimal srqty1 = 0;
                        // This is done if product has subtitle 
                        string pname1 = "";
                        string productstring = GvProductInfo.Rows[e.RowIndex].Cells["ProductNameg"].Value.ToString();
                        if (productstring.Contains(',') == true)
                        {
                            pname1 = productstring.Split(',')[1];
                            subtitlestring = productstring.Split(',')[0];
                        }
                        else
                            pname1 = GvProductInfo.Rows[e.RowIndex].Cells["ProductNameg"].Value.ToString();
                        string cname1 = GvProductInfo.Rows[e.RowIndex].Cells["Company"].Value.ToString();
                        string uname1 = GvProductInfo.Rows[e.RowIndex].Cells["Unit"].Value.ToString();
                        GoodDetailRepository SaleRDRepo = new GoodDetailRepository();
                        try
                        {
                            srqty1 = Convert.ToDecimal(SaleRDRepo.GetAll().Where(t => t.GoodReturnMaster.BillNo == txtbillno.Text && t.ProductId == pname1 && t.CompanyName == cname1 && t.Unit == uname1 && t.GoodReturnMaster.TransactionYear == CommonMethod.TransactionYear && t.GoodReturnMaster.CompId == CommonMethod.CompId).FirstOrDefault().Quantity);
                        }
                        catch (Exception)
                        {
                            srqty1 = 0;
                        }
                        if (srqty1 != 0)
                        {
                            if (srqty1 == Convert.ToDecimal(GvProductInfo.Rows[e.RowIndex].Cells["Quantityg"].Value))
                            {
                                MessageBox.Show("This Product is returned can't remove.", "Warning");
                                goto w;
                            }
                            else if (srqty1 != Convert.ToDecimal(GvProductInfo.Rows[e.RowIndex].Cells["Quantityg"].Value))
                            {
                                MessageBox.Show("Some quantity of this Product is returned can't remove.", "Warning");
                                goto w;
                            }
                            else
                                goto t;
                        }
                        else
                            goto t;
                    t:
                        {
                            if ((MessageBox.Show("Are you sure to delete this record?", "Delete", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK))
                            {
                                deleteid.Add(Convert.ToInt32(GvProductInfo.Rows[e.RowIndex].Cells["Id"].Value));
                                GvProductInfo.Rows.Remove(GvProductInfo.Rows[e.RowIndex]);
                                totalamt = 0; totalqty = 0;
                                totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                                totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                                txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                                lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                                totalamt = 0;
                                clearatadd();
                            }
                        }
                    w: { }
                        SaleRDRepo.Dispose();
                    }
                    else if (btnsave.Enabled == true)
                    {
                        GvProductInfo.Rows.Remove(GvProductInfo.Rows[e.RowIndex]);
                        totalamt = 0; totalqty = 0;
                        totalqty = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["Quantityg"].Value));
                        totalamt = GvProductInfo.Rows.Cast<DataGridViewRow>().Sum(x => Convert.ToDecimal(x.Cells["TotalAmount"].Value));
                        txtTotalAmt.Text = Convert.ToString(Math.Round(totalamt, 2, MidpointRounding.AwayFromZero));
                        lbltotalqty.Text = Convert.ToString(Math.Round(totalqty, 0, MidpointRounding.AwayFromZero));
                        clearatadd();
                    }
                    else
                    {
                        MessageBox.Show("This Invoice has only 1 product." + Environment.NewLine + "You have to delete full Bill.", "Warning");
                        this.ActiveControl = btnUpdate;
                    }
                }
                else
                {
                    string pname1 = "";
                    string productstring = GvProductInfo.Rows[e.RowIndex].Cells["ProductNameg"].Value.ToString();
                    if (productstring.Contains(',') == true)
                    {
                        pname1 = productstring.Split(',')[1];
                        subtitlestring = productstring.Split(',')[0];
                    }
                    else
                        pname1 = GvProductInfo.Rows[e.RowIndex].Cells["ProductNameg"].Value.ToString();
                    GoodMasterRepository SaleRMRepo = new GoodMasterRepository();
                    GoodReturnMaster SaleRMData = new GoodReturnMaster();
                    SaleRMData = SaleRMRepo.GetAll().Where(t => t.BillNo == txtbillno.Text && t.TransactionYear == CommonMethod.TransactionYear && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    if (SaleRMData != null)
                    {
                        var SaleRDData = SaleRMData.GoodReturnDetails;
                        foreach (var item in SaleRDData)
                        {
                            if (pname1 == item.ProductId && Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Company"].Value) == item.CompanyName && Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Unit"].Value) == item.Unit && Convert.ToDecimal(GvProductInfo.Rows[e.RowIndex].Cells["Quantityg"].Value) == Convert.ToDecimal(item.Quantity))
                            {
                                colIndex = -1;
                                lblpvat.Text = "0";
                                txtProductname.Text = "";
                                txtQuantity.Text = "0";
                                txtrate.Text = "0";
                                txtAmount.Text = "0";
                                txtpdiscount.Text = "0";
                                fillgst();
                                txtpTotalAmt.Text = "0";
                                lblBasicRate.Text = "0";
                                goto s;
                            }
                        }
                    }
                    colIndex = e.RowIndex;
                    txtpdiscount.Text = "0";
                    lblpvat.Text = "0";
                    ProductRepository ProdRepo = new ProductRepository();
                    ProductInformation ProdData = new ProductInformation();
                    if (CommonMethod.commProduct == true)
                        ProdData = ProdRepo.GetAll().Where(t => t.ProductName == pname1 && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Unit"].Value)).FirstOrDefault();
                    else
                        ProdData = ProdRepo.GetAll().Where(t => t.ProductName == pname1 && t.ManufactureCompany == Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Company"].Value) && t.Uniti == Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Unit"].Value) && t.CompId == CommonMethod.CompId).FirstOrDefault();
                    txtProductname.Text = pname1 + "," + GvProductInfo.Rows[e.RowIndex].Cells["Company"].Value + "," + GvProductInfo.Rows[e.RowIndex].Cells["Unit"].Value;
                    this.ActiveControl = txtProductname;
                    cmbUnit.Items.Clear();
                    cmbUnit.DisplayMember = "Text";
                    cmbUnit.ValueMember = "Value";
                    cmbUnit.Items.Add(new { Text = ProdData.Uniti, Value = ProdData.Uniti });
                    if (ProdData.AlternateUnit != null && ProdData.AlternateUnit != "")
                        cmbUnit.Items.Add(new { Text = ProdData.AlternateUnit, Value = ProdData.AlternateUnit });
                    if (ProdData.TripleUnit != null && ProdData.TripleUnit != "")
                        cmbUnit.Items.Add(new { Text = ProdData.TripleUnit, Value = ProdData.TripleUnit });
                    cmbUnit.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SaleUnit"].Value);
                    txtQuantity.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Quantityg"].Value);
                    if (ProductCategory == "Motor")
                    {
                        dtgvcode.Rows.Clear();
                        dtgvcode.Rows.Add();
                        dtgvcode.Rows[0].Cells[0].Value = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Code"].Value);
                    }
                    if (GvProductInfo.Rows[e.RowIndex].Cells["SaleRate"].Value == null)
                        txtrate.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Rate"].Value);
                    else
                        txtrate.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SaleRate"].Value);
                    lblBasicRate.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Rate"].Value);
                    txtAmount.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Amount"].Value);
                    txtpdiscount.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Disc"].Value);
                    txtpSpcDisc.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SpDisc"].Value);
                    cmbsgst.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SGST"].Value);
                    lblpvat.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SGSTAmt"].Value);
                    cmbcgst.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["CGST"].Value);
                    lblCGST.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["CGSTAmt"].Value);
                    cmbigst.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["IGST"].Value);
                    lblIGST.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["IGSTAmt"].Value);
                    txtpCess.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Cess"].Value);
                    txtpTotalAmt.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["TotalAmount"].Value);
                    txtHSNCode.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["HSNCode"].Value);
                    updatebarcode = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["Barcodeg"].Value);
                    txtSubtitle.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["SubTitle"].Value);
                    BarcodePrice = Convert.ToDecimal(GvProductInfo.Rows[e.RowIndex].Cells["BarcodePriceg"].Value);
                    if (GvProductInfo.Rows[e.RowIndex].Cells["QuantitySubtitle"].Value == null || Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["QuantitySubtitle"].Value) == "")
                        txtQuantitySubtitle.Text = "0";
                    else
                        txtQuantitySubtitle.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["QuantitySubtitle"].Value);
                    txtBatchNo.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["BatchNo"].Value);
                    txtExpiry.Text = Convert.ToString(GvProductInfo.Rows[e.RowIndex].Cells["ExpiryDate"].Value);
                    if (txtBatchNo.Text == "" && txtExpiry.Text == "") //standard
                        productentrytype = 0;
                    else if (txtBatchNo.Text != "" && txtExpiry.Text != "") // withbatchandexpiry
                        productentrytype = 1;
                    else if (txtBatchNo.Text != "" && txtExpiry.Text == "")  // only batch
                        productentrytype = 2;
                    SaleRMRepo.Dispose();
                }
            s: { }
            }
            catch (Exception)
            { }
        }

        private void btnIntegratedPanelClose_Click(object sender, EventArgs e)
        {
            try
            {
                pnlIntegratedDtls.Visible = false;
            }
            catch (Exception)
            { }
        }

        private void btnAddGroup_Click(object sender, EventArgs e)
        {
            try
            {
                frmGroupMaster grpmast = new frmGroupMaster();
                grpmast.ShowDialog();
                fillgroupmaster();
            }
            catch (Exception)
            { }
        }

        private void pnlQtySubtitle_Leave(object sender, EventArgs e)
        {
            try
            {
                pnlQtySubtitle.Visible = false;
                this.ActiveControl = txtrate;
            }
            catch (Exception)
            { }
        }

        private void txtSearchBillNo_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtSearchBillNo.Text != "")
                {
                    CustomerBillMaster customerData = new CustomerBillMaster();
                    CustomerBillMasterRepository customerRepo = new CustomerBillMasterRepository();
                    customerData = customerRepo.GetAll().Where(t => t.BillNo == Convert.ToString(txtSearchBillNo.Text) && t.CompId == CommonMethod.CompId && t.TransactionYear == CommonMethod.TransactionYear).FirstOrDefault();
                    if (customerData != null)
                        billdata(txtSearchBillNo.Text);
                    else
                    {
                        MessageBox.Show("Bill No is not valid");
                        txtSearchBillNo.Text = "";
                        txtSearchBillNo.Focus();
                    }
                }
            }
            catch (Exception)
            { }
        }
       
        private void txtpSpcDisc_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtpSpcDisc.Text == "")
                    txtpSpcDisc.Text = "0";
            }
            catch (Exception)
            { }
        }
        #endregion
    }
}